[{"title":"使用Eclipse-CDT构建CMake项目","url":"/it/c/eclipse_cdt/","content":"<p>之前写过一篇文章<a href=\"../visual_studio_code_cpp_ide\">Visual Studio Code for C++ development on MacOS</a>, 因为在Mac上一直没有找到免费且又比较好用的C++开发工具。但相比起Visual Studio而言，Visual Studio Code还是太难用了。最近Eclipse-CDT又更新了一下，所以再次体验了一下。</p>\n<h1 id=\"导入cmake工程\">导入CMake工程</h1>\n<p>Eclipse CDT默认是支持CMake的，所以不用使用cmake生成eclipse的工程，直接就可以用。新建项目的时候是可以直接选用CMake项目的，那么，怎么导入一个现有的CMake工程呢？</p>\n<p>实际上，并不能使用\"Import\"来导入，而是要用\"File -&gt; New -&gt; C/C++ Project -&gt; Empty or Existing CMake Project\"，然后就可以选择现有项目，导入到Eclipse中去了。是不是很坑？</p>\n<figure>\n<img src=\"/images/CDT_import_cmake_project.png\" alt=\"\" /><figcaption>Import project</figcaption>\n</figure>\n<h1 id=\"运行google-test测试\">运行Google Test测试</h1>\n<p>可以直接在Eclipse中运行Google Test，因为本身编译测试出来是一个应用，其实可以直接运行，但是eclipse集成的Unit Test可以让结果更好看一点：</p>\n<figure>\n<img src=\"/images/CDT_run_tests.png\" alt=\"\" /><figcaption>Run tests</figcaption>\n</figure>\n<p>要运行这样的测试必须在Run Configuration中新建一个Unit Test的目标，并选择编译出来的test程序。</p>\n<h1 id=\"mac下字体设置\">Mac下字体设置</h1>\n<p>Eclipse在Mac下有一个问题就是默认的UI字体实在太小了，看着眼睛疼。</p>\n<figure>\n<img src=\"/images/CDT_smallfont.png\" alt=\"\" /><figcaption>默认字体</figcaption>\n</figure>\n<p>有一个解决办法就是安装一个<a href=\"https://www.bresink.com/osx/TinkerTool.html\" target=\"_blank\" rel=\"noopener\">TinkerTool</a>，然后设置“Help tags”字体的大小。参见这个<a href=\"https://bugs.eclipse.org/bugs/show_bug.cgi?id=56558\" target=\"_blank\" rel=\"noopener\">Bug</a>。</p>\n<figure>\n<img src=\"/images/CDT_14px.png\" alt=\"\" /><figcaption>更改后的字体</figcaption>\n</figure>\n","categories":["Programing","C++"],"tags":["Eclipse","CMake"]},{"title":"阅读笔记：ConcurrentHashMap","url":"/it/java/read_concurrent_hashmap/","content":"<p>我们知道HashMap不是Thread-safe的，而HashTable内部采取了同步操作，是线程安全的。然而有趣的是你去看HashTable的文档，它会建议你：如果不要Thread-Safe你就用HashMap吧，否则你用ConcurrentHashMap好了。</p>\n<p>一般如果对线程安全有要求，我们有如下的一些选择：</p>\n<ul>\n<li>ConcurrentHashMap</li>\n<li>Hashtable</li>\n<li>Collections.synchronizedMap</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"collections.synchronizedmap\">Collections.synchronizedMap</h1>\n<p>这个实现很粗暴，实际上就是将Map的各个操作都进行了包装和同步：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"kw\">private</span> <span class=\"dt\">static</span> <span class=\"kw\">class</span> SynchronizedMap&lt;K,V&gt;</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a>        <span class=\"kw\">implements</span> <span class=\"bu\">Map</span>&lt;K,V&gt;, <span class=\"bu\">Serializable</span> {</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>    <span class=\"kw\">private</span> <span class=\"dt\">final</span> <span class=\"bu\">Map</span>&lt;K,V&gt; m;     <span class=\"co\">// Backing Map</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>    <span class=\"dt\">final</span> <span class=\"bu\">Object</span>      mutex;  </span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>    <span class=\"fu\">SynchronizedMap</span>(<span class=\"bu\">Map</span>&lt;K,V&gt; m) {</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a>        <span class=\"kw\">this</span>.<span class=\"fu\">m</span> = Objects.<span class=\"fu\">requireNonNull</span>(m);</span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\"></a>        mutex = <span class=\"kw\">this</span>;</span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\"></a>    }</span></code></pre></div>\n<p>在构造函数中传入了原来的Map，以及一个对象锁（如果不传那就默认是this了）。然后，所有的操作都进行了同步处理：</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"kw\">public</span> <span class=\"dt\">boolean</span> <span class=\"fu\">containsValue</span>(<span class=\"bu\">Object</span> value) {</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a>    <span class=\"kw\">synchronized</span> (mutex) {<span class=\"kw\">return</span> m.<span class=\"fu\">containsValue</span>(value);}</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a>}</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a><span class=\"kw\">public</span> V <span class=\"fu\">get</span>(<span class=\"bu\">Object</span> key) {</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a>    <span class=\"kw\">synchronized</span> (mutex) {<span class=\"kw\">return</span> m.<span class=\"fu\">get</span>(key);}</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a>}</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a><span class=\"co\">// ...</span></span></code></pre></div>\n<h1 id=\"hashtable\">HashTable</h1>\n<p>HashTable实现线程安全的方式与上面有些类似，对所有需要同步的地方直接进行了同步：</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"kw\">public</span> <span class=\"kw\">synchronized</span> <span class=\"dt\">int</span> <span class=\"fu\">size</span>() {</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a>    <span class=\"kw\">return</span> count;</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\"></a>}</span></code></pre></div>\n<p>那么HashMap和HashTable有什么区别呢？除了同步之外，总结下来有以下几点：</p>\n<ul>\n<li>HashMap允许一个null的key，value也可以为null；但是HashTable不允许null作为key或者value</li>\n<li>HashMap是JDK1.2才引入的</li>\n<li>HashTable是基于Dictionary接口实现的</li>\n</ul>\n<p>HashTable（以及ConcurrentHashMap）都是不允许null值作为Key和Vaule的，主要的原因是因为要支持并发，假设调用<code>get(key)</code>得到了null，你是不能确认是key不存在，还是说存在但是值为null。在非并发场景下可以通过<code>contains(key)</code>来判断是否真的存在，但是在并发场景下，很可能会被其他线程修改。在JDK注释中有这样的解释：</p>\n<blockquote>\n<p>The main reason that nulls aren't allowed in ConcurrentMaps (ConcurrentHashMaps, ConcurrentSkipListMaps) is that ambiguities that may be just barely tolerable in non-concurrent maps can't be accommodated. The main one is that if map.get(key) returns null, you can't detect whether the key explicitly maps to null vs the key isn't mapped. In a non-concurrent map, you can check this via map.contains(key), but in a concurrent one, the map might have changed between calls.</p>\n</blockquote>\n<h1 id=\"concurrenthashmap\">ConcurrentHashMap</h1>\n<p>在Java1.7和1.8中ConcurrentHashMap实现差别较大，在1.7中采用分段锁的方式实现，将Map分为许多个Segment（Segment继承自ReentrantLock）,操作的时候，只会去占用某一个Segment，而其他的Segment不会受到影响。</p>\n<p>而在1.8中直接使用CAS+ synchronized来实现。其在内存中的结构与HashMap几乎相同了。</p>\n<h2 id=\"get操作\">get操作</h2>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a><span class=\"kw\">public</span> V <span class=\"fu\">get</span>(<span class=\"bu\">Object</span> key) {</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\"></a>    <span class=\"bu\">Node</span>&lt;K,V&gt;[] tab; <span class=\"bu\">Node</span>&lt;K,V&gt; e, p; <span class=\"dt\">int</span> n, eh; K ek;</span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\"></a></span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\"></a>    <span class=\"co\">// 得到最终的hash值（将高位混合到低位去避免哈希冲突）</span></span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\"></a>    <span class=\"dt\">int</span> h = <span class=\"fu\">spread</span>(key.<span class=\"fu\">hashCode</span>());</span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\"></a>    <span class=\"kw\">if</span> ((tab = table) != <span class=\"kw\">null</span> &amp;&amp; (n = tab.<span class=\"fu\">length</span>) &gt; <span class=\"dv\">0</span> &amp;&amp;</span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\"></a>        <span class=\"co\">// (n-1) &amp; h 计算出所在的index值（与HashMap相同）</span></span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\"></a>        (e = <span class=\"fu\">tabAt</span>(tab, (n - <span class=\"dv\">1</span>) &amp; h)) != <span class=\"kw\">null</span>) { </span>\n<span id=\"cb4-9\"><a href=\"#cb4-9\"></a>        <span class=\"co\">// 如果哈希值相同，则直接定位到节点，再判断是否equal即可</span></span>\n<span id=\"cb4-10\"><a href=\"#cb4-10\"></a>        <span class=\"kw\">if</span> ((eh = e.<span class=\"fu\">hash</span>) == h) {                </span>\n<span id=\"cb4-11\"><a href=\"#cb4-11\"></a>            <span class=\"co\">// 这里比较key是否equal，单纯只凭hashCode是不够的。</span></span>\n<span id=\"cb4-12\"><a href=\"#cb4-12\"></a>            <span class=\"co\">// 首先比较内存地址是否一致；然后再调用equals方法，是一种优化手段。</span></span>\n<span id=\"cb4-13\"><a href=\"#cb4-13\"></a>            <span class=\"kw\">if</span> ((ek = e.<span class=\"fu\">key</span>) == key || (ek != <span class=\"kw\">null</span> &amp;&amp; key.<span class=\"fu\">equals</span>(ek)))</span>\n<span id=\"cb4-14\"><a href=\"#cb4-14\"></a>                <span class=\"kw\">return</span> e.<span class=\"fu\">val</span>;</span>\n<span id=\"cb4-15\"><a href=\"#cb4-15\"></a>        }</span>\n<span id=\"cb4-16\"><a href=\"#cb4-16\"></a>        <span class=\"co\">/*</span></span>\n<span id=\"cb4-17\"><a href=\"#cb4-17\"></a><span class=\"co\">            Hash值的首位被用作标记位，为负数的hash值是特殊的节点（也就是红黑树化了）</span></span>\n<span id=\"cb4-18\"><a href=\"#cb4-18\"></a><span class=\"co\">        */</span></span>\n<span id=\"cb4-19\"><a href=\"#cb4-19\"></a>        <span class=\"co\">// 如果根据哈希值没有匹配到，那证明可能有哈希冲突，为负数是红黑树则在树中查找</span></span>\n<span id=\"cb4-20\"><a href=\"#cb4-20\"></a>        <span class=\"kw\">else</span> <span class=\"kw\">if</span> (eh &lt; <span class=\"dv\">0</span>)                         </span>\n<span id=\"cb4-21\"><a href=\"#cb4-21\"></a>            <span class=\"kw\">return</span> (p = e.<span class=\"fu\">find</span>(h, key)) != <span class=\"kw\">null</span> ? p.<span class=\"fu\">val</span> : <span class=\"kw\">null</span>;</span>\n<span id=\"cb4-22\"><a href=\"#cb4-22\"></a>        <span class=\"co\">// 否则是普通的链表，在链表中一直朝下找即可</span></span>\n<span id=\"cb4-23\"><a href=\"#cb4-23\"></a>        <span class=\"kw\">while</span> ((e = e.<span class=\"fu\">next</span>) != <span class=\"kw\">null</span>) {           </span>\n<span id=\"cb4-24\"><a href=\"#cb4-24\"></a>            <span class=\"kw\">if</span> (e.<span class=\"fu\">hash</span> == h &amp;&amp;</span>\n<span id=\"cb4-25\"><a href=\"#cb4-25\"></a>                ((ek = e.<span class=\"fu\">key</span>) == key || (ek != <span class=\"kw\">null</span> &amp;&amp; key.<span class=\"fu\">equals</span>(ek))))</span>\n<span id=\"cb4-26\"><a href=\"#cb4-26\"></a>                <span class=\"kw\">return</span> e.<span class=\"fu\">val</span>;</span>\n<span id=\"cb4-27\"><a href=\"#cb4-27\"></a>        }</span>\n<span id=\"cb4-28\"><a href=\"#cb4-28\"></a>    }</span>\n<span id=\"cb4-29\"><a href=\"#cb4-29\"></a>    <span class=\"kw\">return</span> <span class=\"kw\">null</span>;</span>\n<span id=\"cb4-30\"><a href=\"#cb4-30\"></a>}</span></code></pre></div>\n<p>可见get操作没有加任何的锁，而是通过将<code>transient volatile Node&lt;K,V&gt;[] table;</code>将table设置为volatile来保证可见性的。</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb5-1\"><a href=\"#cb5-1\"></a><span class=\"kw\">transient</span> <span class=\"kw\">volatile</span> <span class=\"bu\">Node</span>&lt;K,V&gt;[] table;</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\"></a></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\"></a><span class=\"dt\">static</span> <span class=\"kw\">class</span> <span class=\"bu\">Node</span>&lt;K,V&gt; <span class=\"kw\">implements</span> <span class=\"bu\">Map</span>.<span class=\"fu\">Entry</span>&lt;K,V&gt; {</span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\"></a>    <span class=\"dt\">final</span> <span class=\"dt\">int</span> hash;</span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\"></a>    <span class=\"dt\">final</span> K key;</span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\"></a>    <span class=\"kw\">volatile</span> V val;</span>\n<span id=\"cb5-7\"><a href=\"#cb5-7\"></a>    <span class=\"kw\">volatile</span> <span class=\"bu\">Node</span>&lt;K,V&gt; next;</span>\n<span id=\"cb5-8\"><a href=\"#cb5-8\"></a>    <span class=\"co\">//...</span></span>\n<span id=\"cb5-9\"><a href=\"#cb5-9\"></a>}</span></code></pre></div>\n<h2 id=\"put操作\">put操作</h2>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb6-1\"><a href=\"#cb6-1\"></a><span class=\"dt\">final</span> V <span class=\"fu\">putVal</span>(K key, V value, <span class=\"dt\">boolean</span> onlyIfAbsent) {</span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\"></a>    <span class=\"kw\">if</span> (key == <span class=\"kw\">null</span> || value == <span class=\"kw\">null</span>) <span class=\"kw\">throw</span> <span class=\"kw\">new</span> <span class=\"bu\">NullPointerException</span>();</span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\"></a>    <span class=\"dt\">int</span> hash = <span class=\"fu\">spread</span>(key.<span class=\"fu\">hashCode</span>());</span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\"></a>    <span class=\"dt\">int</span> binCount = <span class=\"dv\">0</span>;</span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\"></a>    <span class=\"kw\">for</span> (<span class=\"bu\">Node</span>&lt;K,V&gt;[] tab = table;;) {</span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\"></a>        <span class=\"bu\">Node</span>&lt;K,V&gt; f; <span class=\"dt\">int</span> n, i, fh;</span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\"></a>        <span class=\"co\">// 因为是懒加载，第一次插入的时候可能需要初始化</span></span>\n<span id=\"cb6-8\"><a href=\"#cb6-8\"></a>        <span class=\"kw\">if</span> (tab == <span class=\"kw\">null</span> || (n = tab.<span class=\"fu\">length</span>) == <span class=\"dv\">0</span>)</span>\n<span id=\"cb6-9\"><a href=\"#cb6-9\"></a>            tab = <span class=\"fu\">initTable</span>();</span>\n<span id=\"cb6-10\"><a href=\"#cb6-10\"></a>        <span class=\"co\">// 没有找到（节点之前不存在）</span></span>\n<span id=\"cb6-11\"><a href=\"#cb6-11\"></a>        <span class=\"kw\">else</span> <span class=\"kw\">if</span> ((f = <span class=\"fu\">tabAt</span>(tab, i = (n - <span class=\"dv\">1</span>) &amp; hash)) == <span class=\"kw\">null</span>) {</span>\n<span id=\"cb6-12\"><a href=\"#cb6-12\"></a>            <span class=\"co\">// 尝试CAS插入节点到空桶中，如果失败，则会重新走上面的流程进来</span></span>\n<span id=\"cb6-13\"><a href=\"#cb6-13\"></a>            <span class=\"kw\">if</span> (<span class=\"fu\">casTabAt</span>(tab, i, <span class=\"kw\">null</span>,</span>\n<span id=\"cb6-14\"><a href=\"#cb6-14\"></a>                         <span class=\"kw\">new</span> <span class=\"bu\">Node</span>&lt;K,V&gt;(hash, key, value, <span class=\"kw\">null</span>)))</span>\n<span id=\"cb6-15\"><a href=\"#cb6-15\"></a>                <span class=\"kw\">break</span>;                   <span class=\"co\">// no lock when adding to empty bin</span></span>\n<span id=\"cb6-16\"><a href=\"#cb6-16\"></a>        }</span>\n<span id=\"cb6-17\"><a href=\"#cb6-17\"></a>        <span class=\"co\">// 如果（后面的流程）插入到了红黑树中，会导致首节点改变，所以这个地方需要帮忙更改过来</span></span>\n<span id=\"cb6-18\"><a href=\"#cb6-18\"></a>        <span class=\"kw\">else</span> <span class=\"kw\">if</span> ((fh = f.<span class=\"fu\">hash</span>) == MOVED)</span>\n<span id=\"cb6-19\"><a href=\"#cb6-19\"></a>            tab = <span class=\"fu\">helpTransfer</span>(tab, f);</span>\n<span id=\"cb6-20\"><a href=\"#cb6-20\"></a>        <span class=\"kw\">else</span> {</span>\n<span id=\"cb6-21\"><a href=\"#cb6-21\"></a>            V oldVal = <span class=\"kw\">null</span>;</span>\n<span id=\"cb6-22\"><a href=\"#cb6-22\"></a>            <span class=\"co\">// f为当前定位到的桶中的第一个节点，将其同步进行后续操作</span></span>\n<span id=\"cb6-23\"><a href=\"#cb6-23\"></a>            <span class=\"kw\">synchronized</span> (f) {</span>\n<span id=\"cb6-24\"><a href=\"#cb6-24\"></a>                <span class=\"co\">// 看看同步之前当前节点是否已经被更改了；如果是则需要重新开始轮回</span></span>\n<span id=\"cb6-25\"><a href=\"#cb6-25\"></a>                <span class=\"kw\">if</span> (<span class=\"fu\">tabAt</span>(tab, i) == f) {</span>\n<span id=\"cb6-26\"><a href=\"#cb6-26\"></a>                    <span class=\"co\">// 普通链表</span></span>\n<span id=\"cb6-27\"><a href=\"#cb6-27\"></a>                    <span class=\"kw\">if</span> (fh &gt;= <span class=\"dv\">0</span>) {</span>\n<span id=\"cb6-28\"><a href=\"#cb6-28\"></a>                        binCount = <span class=\"dv\">1</span>;</span>\n<span id=\"cb6-29\"><a href=\"#cb6-29\"></a>                        <span class=\"kw\">for</span> (<span class=\"bu\">Node</span>&lt;K,V&gt; e = f;; ++binCount) {</span>\n<span id=\"cb6-30\"><a href=\"#cb6-30\"></a>                            K ek;</span>\n<span id=\"cb6-31\"><a href=\"#cb6-31\"></a>                            <span class=\"co\">// 如果已经存在值</span></span>\n<span id=\"cb6-32\"><a href=\"#cb6-32\"></a>                            <span class=\"kw\">if</span> (e.<span class=\"fu\">hash</span> == hash &amp;&amp;</span>\n<span id=\"cb6-33\"><a href=\"#cb6-33\"></a>                                ((ek = e.<span class=\"fu\">key</span>) == key ||</span>\n<span id=\"cb6-34\"><a href=\"#cb6-34\"></a>                                 (ek != <span class=\"kw\">null</span> &amp;&amp; key.<span class=\"fu\">equals</span>(ek)))) {</span>\n<span id=\"cb6-35\"><a href=\"#cb6-35\"></a>                                oldVal = e.<span class=\"fu\">val</span>;</span>\n<span id=\"cb6-36\"><a href=\"#cb6-36\"></a>                                <span class=\"kw\">if</span> (!onlyIfAbsent)</span>\n<span id=\"cb6-37\"><a href=\"#cb6-37\"></a>                                    e.<span class=\"fu\">val</span> = value;</span>\n<span id=\"cb6-38\"><a href=\"#cb6-38\"></a>                                <span class=\"kw\">break</span>;</span>\n<span id=\"cb6-39\"><a href=\"#cb6-39\"></a>                            }</span>\n<span id=\"cb6-40\"><a href=\"#cb6-40\"></a>                            <span class=\"co\">// 不存在则新增一个节点，插入到链表尾部</span></span>\n<span id=\"cb6-41\"><a href=\"#cb6-41\"></a>                            <span class=\"bu\">Node</span>&lt;K,V&gt; pred = e;</span>\n<span id=\"cb6-42\"><a href=\"#cb6-42\"></a>                            <span class=\"kw\">if</span> ((e = e.<span class=\"fu\">next</span>) == <span class=\"kw\">null</span>) {</span>\n<span id=\"cb6-43\"><a href=\"#cb6-43\"></a>                                pred.<span class=\"fu\">next</span> = <span class=\"kw\">new</span> <span class=\"bu\">Node</span>&lt;K,V&gt;(hash, key,</span>\n<span id=\"cb6-44\"><a href=\"#cb6-44\"></a>                                                          value, <span class=\"kw\">null</span>);</span>\n<span id=\"cb6-45\"><a href=\"#cb6-45\"></a>                                <span class=\"kw\">break</span>;</span>\n<span id=\"cb6-46\"><a href=\"#cb6-46\"></a>                            }</span>\n<span id=\"cb6-47\"><a href=\"#cb6-47\"></a>                        }</span>\n<span id=\"cb6-48\"><a href=\"#cb6-48\"></a>                    }</span>\n<span id=\"cb6-49\"><a href=\"#cb6-49\"></a>                    <span class=\"co\">// 按红黑树处理</span></span>\n<span id=\"cb6-50\"><a href=\"#cb6-50\"></a>                    <span class=\"kw\">else</span> <span class=\"kw\">if</span> (f <span class=\"kw\">instanceof</span> TreeBin) {</span>\n<span id=\"cb6-51\"><a href=\"#cb6-51\"></a>                        <span class=\"bu\">Node</span>&lt;K,V&gt; p;</span>\n<span id=\"cb6-52\"><a href=\"#cb6-52\"></a>                        binCount = <span class=\"dv\">2</span>;</span>\n<span id=\"cb6-53\"><a href=\"#cb6-53\"></a>                        <span class=\"kw\">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).<span class=\"fu\">putTreeVal</span>(hash, key,</span>\n<span id=\"cb6-54\"><a href=\"#cb6-54\"></a>                                                       value)) != <span class=\"kw\">null</span>) {</span>\n<span id=\"cb6-55\"><a href=\"#cb6-55\"></a>                            oldVal = p.<span class=\"fu\">val</span>;</span>\n<span id=\"cb6-56\"><a href=\"#cb6-56\"></a>                            <span class=\"kw\">if</span> (!onlyIfAbsent)</span>\n<span id=\"cb6-57\"><a href=\"#cb6-57\"></a>                                p.<span class=\"fu\">val</span> = value;</span>\n<span id=\"cb6-58\"><a href=\"#cb6-58\"></a>                        }</span>\n<span id=\"cb6-59\"><a href=\"#cb6-59\"></a>                    }</span>\n<span id=\"cb6-60\"><a href=\"#cb6-60\"></a>                }</span>\n<span id=\"cb6-61\"><a href=\"#cb6-61\"></a>            }</span>\n<span id=\"cb6-62\"><a href=\"#cb6-62\"></a>            <span class=\"kw\">if</span> (binCount != <span class=\"dv\">0</span>) {</span>\n<span id=\"cb6-63\"><a href=\"#cb6-63\"></a>                <span class=\"kw\">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span>\n<span id=\"cb6-64\"><a href=\"#cb6-64\"></a>                    <span class=\"fu\">treeifyBin</span>(tab, i);</span>\n<span id=\"cb6-65\"><a href=\"#cb6-65\"></a>                <span class=\"kw\">if</span> (oldVal != <span class=\"kw\">null</span>)</span>\n<span id=\"cb6-66\"><a href=\"#cb6-66\"></a>                    <span class=\"kw\">return</span> oldVal;</span>\n<span id=\"cb6-67\"><a href=\"#cb6-67\"></a>                <span class=\"kw\">break</span>;</span>\n<span id=\"cb6-68\"><a href=\"#cb6-68\"></a>            }</span>\n<span id=\"cb6-69\"><a href=\"#cb6-69\"></a>        }</span>\n<span id=\"cb6-70\"><a href=\"#cb6-70\"></a>    }</span>\n<span id=\"cb6-71\"><a href=\"#cb6-71\"></a>    <span class=\"fu\">addCount</span>(<span class=\"dv\">1L</span>, binCount);</span>\n<span id=\"cb6-72\"><a href=\"#cb6-72\"></a>    <span class=\"kw\">return</span> <span class=\"kw\">null</span>;</span>\n<span id=\"cb6-73\"><a href=\"#cb6-73\"></a>}</span></code></pre></div>\n<ul>\n<li><a href=\"https://www.javatpoint.com/difference-between-hashmap-and-hashtable\" target=\"_blank\" rel=\"noopener\">Difference between HashMap and Hashtable</a></li>\n</ul>\n","categories":["Programing","Java"],"tags":["JDK1.8"]},{"title":"阅读笔记：HashMap","url":"/it/java/read_hashmap/","content":"<p>HashMap可以算是最常用的数据结构了，而它的实现没想到还挺有学问在里面。</p>\n<a id=\"more\"></a>\n<h1 id=\"基本实现\">基本实现</h1>\n<h2 id=\"哈希映射\">哈希映射</h2>\n<p>在HashMap中使用数组来存储元素，根据元素的hash值一一映射到一个节点上。其中使用的哈希方法为：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"dt\">static</span> <span class=\"dt\">final</span> <span class=\"dt\">int</span> <span class=\"fu\">hash</span>(<span class=\"bu\">Object</span> key) {</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a>    <span class=\"dt\">int</span> h;</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>    <span class=\"co\">// 将哈希值无符号右移16位是因为取index使用了length作为掩码，这样当哈希值在掩码外的部分相同的时候就会发生冲突</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>    <span class=\"co\">// 这样将高位混杂到低位上，可以尽可能将这种影响消除</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>    <span class=\"kw\">return</span> (key == <span class=\"kw\">null</span>) ? <span class=\"dv\">0</span> : (h = key.<span class=\"fu\">hashCode</span>()) ^ (h &gt;&gt;&gt; <span class=\"dv\">16</span>);</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>}</span></code></pre></div>\n<p>举例来说对于容量为4的HashMap，插入\"a\"、\"b\"、\"c\"、\"d\"后在数组中的分布就是：</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode lua\"><code class=\"sourceCode lua\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"st\">&quot;a&quot;</span><span class=\"op\">.</span>hashCode<span class=\"op\">()</span> <span class=\"op\">=</span> <span class=\"dv\">97</span> <span class=\"op\">=</span> <span class=\"dv\">00000000000000000000000001100001</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a>hash<span class=\"op\">(</span><span class=\"st\">&quot;a&quot;</span><span class=\"op\">)</span> <span class=\"op\">=</span> <span class=\"dv\">00000000000000000000000001100001</span> <span class=\"op\">^</span> <span class=\"dv\">00000000000000000000000000000000</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a>          <span class=\"op\">=</span> <span class=\"dv\">00000000000000000000000001100001</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a>index <span class=\"op\">=</span> hash<span class=\"op\">(</span><span class=\"st\">&quot;a&quot;</span><span class=\"op\">)</span> <span class=\"op\">&amp;</span> <span class=\"op\">(</span><span class=\"dv\">4</span> <span class=\"op\">-</span> <span class=\"dv\">1</span><span class=\"op\">)</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a>      <span class=\"op\">=</span> <span class=\"dv\">00000000000000000000000001100001</span> <span class=\"op\">&amp;</span> <span class=\"dv\">00000000000000000000000000000011</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a>      <span class=\"op\">=</span> <span class=\"dv\">00000000000000000000000000000001</span></span></code></pre></div>\n<p>如此则数组中对应的序号为1，2，3，0。</p>\n<figure>\n<img src=\"/images/HashMap-resize.png\" alt=\"\" /><figcaption>HashMap resize</figcaption>\n</figure>\n<h2 id=\"load-factor负载因子和threshod阈值\">Load Factor(负载因子)和Threshod（阈值）</h2>\n<p>因为HashMap的底层实际上是使用数组进行存储，那么始终存在着一个动态内存分配的问题：数组的大小是固定的，但是HashMap实际存储多少数据是未知的（可以一直向HashMap中进行插入），那么当数组塞满了（实际上还有一个问题是发生哈希冲突）之后如何处理？</p>\n<p>解决这个问题最简单的做法就是，一旦数组满了之后，就对数组进行扩容。扩容也很简单，重新申请一个大一点的数组，再把原来数组里面的数据复制过去即可。这里涉及到另外一个问题就是，扩容的时候选择一个怎么样的容量进行扩容呢？这个操作是有代价的，如果频繁的扩容就涉及到频繁的数组复制操作，性能上会受到影响；如果一次扩容选择一个很大的空间，但实际之后这些空间又没有使用到，那么久造成了资源浪费。怎么解决这一个问题呢？</p>\n<p>在HashMap的构造中有两个关键的参数：</p>\n<ul>\n<li><code>initialCapacity</code>:初始化容量，即可以装多少条数据</li>\n<li><code>loadFactor</code>：负载因子，用来描述HashMap中可以变得多“满”（到达什么程度开始扩容）</li>\n</ul>\n<p>实际上，HashMap并不会根据你提供的<code>initial capacity</code>来初始化一个数组，而是找到一个值 <span class=\"math inline\">\\(t\\)</span> 并满足 <span class=\"math inline\">\\(t &gt;= i \\&amp;\\&amp; t==2^{n}\\)</span>（比如3对应得到4， 15对应得到16），并在第一次插入的时候进行初始化。</p>\n<p>为什么数组在初始化的时候一定是2的倍数？这是因为方便扩容的时候直接将数组大小变成原来的二倍，同时也简化了一些其他的操作，比如如何定位到一个值所在的索引:</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"dt\">int</span> index = (length - <span class=\"dv\">1</span>) &amp; hash</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\"></a><span class=\"co\">/*</span></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\"></a><span class=\"co\">final Node&lt;K,V&gt; getNode(int hash, Object key) {</span></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\"></a><span class=\"co\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;</span></span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\"></a><span class=\"co\">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span></span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\"></a><span class=\"co\">        (first = tab[(n - 1) &amp; hash]) != null) {</span></span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\"></a><span class=\"co\">    ...</span></span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\"></a><span class=\"co\">*/</span></span></code></pre></div>\n<p>正常的做法是，<code>abs(hash) % SIZE</code>像这样取余操作。但是如果除数是2的n次幂，则可以简化为位运算操作。</p>\n<p>而至于为什么默认的负载因子是0.75，有人根据二项式分布算出最佳的load factor是 <span class=\"math inline\">\\(log(2)=0.693\\)</span> ，然后拍脑袋给出的0.75（乘以容量还可以得个整数...)。</p>\n<h1 id=\"树化红黑树\">树化（红黑树）</h1>\n<h2 id=\"treeify_threshold树化阈值\">TREEIFY_THRESHOLD（树化阈值）</h2>\n<p>所以使用0.75作为负载因子，那么出现的情况是如果当前容量达到这个值的时候就会resize到原来的两倍。对于一个容量为4的Map来说，理想情况下元素均匀分布，是这样：</p>\n<pre><code>最好情况                                 极端情况\nbucket | elements                      bucket | elements     \n-------+---------                      -------+---------    \n     0 | Z                                  0 |   \n     1 | X                                  1 | Z -&gt; X -&gt; Y \n     2 |                                    2 |  \n     3 | Y                                  3 | \n</code></pre>\n<p>理想状况下（假设基于随机hash算法节点在桶中均匀分布，且节点的个数占桶的50%，那么单个节点出现在桶中的概率为0.5），节点在hash桶中的出现的频率遵循<a href=\"https://zh.wikipedia.org/wiki/%E6%B3%8A%E6%9D%BE%E5%88%86%E4%BD%88\" target=\"_blank\" rel=\"noopener\">泊松分布</a>（ <span class=\"math inline\">\\(λ = 0.5\\)</span> )</p>\n<p><span class=\"math display\">\\[\nP(X=k)=\\frac{e^{-\\lambda}\\lambda^k}{k!}=\\frac{e^{-0.5}0.5^k}{k!}\n\\]</span></p>\n<p>意味着在load factor=0.75的情况下，hash桶中出现 <span class=\"math inline\">\\(k\\)</span> 个节点（冲突）的概率大致为：</p>\n<pre><code>* 0:    0.60653066\n* 1:    0.30326533\n* 2:    0.07581633\n* 3:    0.01263606\n* 4:    0.00157952\n* 5:    0.00015795\n* 6:    0.00001316\n* 7:    0.00000094\n* 8:    0.00000006\n* more: less than 1 in ten million</code></pre>\n<p>可见哈希冲突导致一个桶中出现8个节点情况已经几乎小之又小的事情了，这是<code>TREEIFY_THRESHOLD = 8</code>的原因，当大于8的时候转换为红黑树。</p>\n<h2 id=\"treeify树化\">Treeify（树化）</h2>\n<p>通常情况下，当哈希冲突产生的时候，会被当成链表存储。这个改变是通过<a href=\"http://openjdk.java.net/jeps/180\" target=\"_blank\" rel=\"noopener\">JEP 180: Handle Frequent HashMap Collisions with Balanced Trees</a>引入的。在下面的情况下，会转换为红黑树：</p>\n<ul>\n<li>链表中的节点数达到TREEIFY_THRESHOLD（8）</li>\n<li>容量至少达到MIN_TREEIFY_CAPACITY（64），否则只是单纯扩容到到原来的两倍</li>\n</ul>\n<p>现实中哈希冲突的场景并不多，不过如果非要测试这种场景也很容易。比如<code>Aa</code>和字符串<code>BB</code>就拥有相同的哈希值，把他们随机组合到一起，还是一样。于是我们构建了很多个哈希值相同的key值，来演示哈希冲突的场景：</p>\n<figure>\n<img src=\"/images/HashMap-treeify.png\" alt=\"\" /><figcaption>Treeify</figcaption>\n</figure>\n<h2 id=\"尾插入\">尾插入</h2>\n<p>从上面的图可以注意到：哈希冲突的节点在链表中是插入到链表尾部的</p>\n<p>在Java8之前是插入到前面的，但是Java8改成插入到尾部了，这样做的原因（据说）是因为扩容时会改变链表的顺序，在多线程条件下会导致形成闭环（从而可能引起死循环）。</p>\n<h1 id=\"fail-fast机制\">fail-fast机制</h1>\n<p>在HashMap中存在一个变量记录修改的次数<code>modCount</code>,当这个次数和期待的不一致的时候就会抛出<code>ConcurrentModificationException</code>。这种机制被称之为\"Fail-Fast”，意味着出现错误的时候尽早结束。通常在<code>java.util</code>下面的迭代器都是这类的，如果在迭代的中途数据被其他线程修改了，那么就会（尽可能的，当然并不能保证）触发这个检测。</p>\n<p>而<code>java.util.concurrent</code>包下的迭代器是\"Fail-Safe\"的，例如ConcurrentHashMap、CopyOnWriteArrayList等。</p>\n<h1 id=\"性能分析\">性能分析</h1>\n<p>HashMap对于<code>get</code>和<code>put</code>操作的复杂度是常数级 <span class=\"math inline\">\\(\\displaystyle{O(1)}\\)</span> ，在最坏的情况下，因为使用了红黑树进行查找，复杂度为 <span class=\"math inline\">\\(\\displaystyle{O(log(n))}\\)</span> 。</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/20448477/cant-understand-poisson-part-of-hash-tables-from-sun-documentation\" target=\"_blank\" rel=\"noopener\">Can't understand Poisson part of Hash tables from Sun documentation</a></li>\n<li><a href=\"https://stackoverflow.com/questions/10901752/what-is-the-significance-of-load-factor-in-hashmap\" target=\"_blank\" rel=\"noopener\">What is the significance of load factor in HashMap?</a></li>\n<li><a href=\"http://rabbit.eng.miami.edu/class/een318/poisson.pdf\" target=\"_blank\" rel=\"noopener\">Testing a Hash Function using Probability</a></li>\n</ul>\n","categories":["Programing","Java"],"tags":["JDK1.8"]},{"title":"Redis Memory limit and eviction policy configuration","url":"/it/cache/redis_lru/","content":"<p>By default, the redis running inside docker has no limitation about memory however generally the container has. Thus if no further configuation of eviction or memory limit is set in redis, you may possibly get some error like Out-of-memory if you keep adding new keys to redis.</p>\n<a id=\"more\"></a>\n<h1 id=\"testing-with-docker\">Testing with docker</h1>\n<h2 id=\"create-a-simple-application\">Create a simple application</h2>\n<p>To reproduce the problem, let's create a simple application by using SpringBoot. We'll have a post api for generating a random item and insert it into redis:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"at\">@PostMapping</span>(<span class=\"st\">&quot;/generate&quot;</span>)</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a><span class=\"kw\">public</span> Item <span class=\"fu\">generate</span>() {</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>  Item item = Item.<span class=\"fu\">random</span>();</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>  redisTemplate.<span class=\"fu\">opsForValue</span>().<span class=\"fu\">set</span>(item.<span class=\"fu\">getId</span>(), item);</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>  <span class=\"kw\">return</span> item;</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>}</span></code></pre></div>\n<h2 id=\"keep-inserting-data-via-jmeter\">Keep inserting data via jmeter</h2>\n<p>In order to keep inserting data into redis using the post api, we can use Apache jmeter to do this job.</p>\n<figure>\n<img src=\"/images/Jmeter-report.png\" alt=\"\" /><figcaption>Jmeter</figcaption>\n</figure>\n<p>A few components should be added into the test plan:</p>\n<ul>\n<li>Thread group: to execute a lot of requests parallelly, eg. 20 threads, and using infinite loop</li>\n<li>Http Request sampler: to send post api</li>\n<li>Assertion results: to verify the request, eg. verify the response code should be 200</li>\n<li>Report: eg. Aggregate report to virtualize the result</li>\n</ul>\n<h2 id=\"round1-redis-with-128m-memory\">Round1: Redis with 128m memory</h2>\n<p>Let's set the memory limit of redis container to 128m, by using this commands:</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"ex\">docker</span> run --name redis-128 \\</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a>           -d \\</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a>           -p 6381:6379 \\</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a>           --memory=<span class=\"st\">&quot;128m&quot;</span> \\</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a>           -v /Users/hfli/Downloads/redis-test-data/redis-128:/data \\</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a>           redis redis-server</span></code></pre></div>\n<p>Note that the option <code>--memory=\"128m\"</code> sets the memory limitation for redis container, and also we perisit the data into a local volumum so that it will never lose after container restart.</p>\n<p>To find the memory usage status of docker container, we can use the <code>docker stats</code> command:</p>\n<pre><code># docker stats\nCONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT   MEM %               NET I/O             BLOCK I/O           PIDS\na38d4615af6b        redis-128           0.12%               126.8MiB / 128MiB   99.06%              182MB / 18.6MB      3.08GB / 264MB      6</code></pre>\n<p>After successfully started redis, now we are able to use jmeter to test it. Keep running the job, and soon we'll get error in the application:</p>\n<pre class=\"log\"><code>Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisSystemException: \nError in execution; nested exception is io.lettuce.core.RedisCommandExecutionException: \nMISCONF Redis is configured to save RDB snapshots, but it is currently not able to persist on disk. Commands that may modify the data set are disabled, because this instance is configured to report errors during writes if RDB snapshotting fails (stop-writes-on-bgsave-error option). \nPlease check the Redis logs for details about the RDB error.] with root cause</code></pre>\n<p>And we can also get some info about redis by using <code>info</code>（or use <code>info memory</code> to only get the info related to memory ) and <code>dbsize</code> command in redis-cli:</p>\n<pre><code># redis-cli\n127.0.0.1:6379&gt; info\n...\n# Memory\nused_memory:238777840\nused_memory_human:227.72M\nused_memory_rss:134189056\nused_memory_rss_human:127.97M\nused_memory_peak:238777840\nused_memory_peak_human:227.72M\nused_memory_peak_perc:100.00%\nused_memory_overhead:42998602\nused_memory_startup:791264\nused_memory_dataset:195779238\nused_memory_dataset_perc:82.26%</code></pre>\n<p>So it has used actually more that 128M!</p>\n<pre><code>127.0.0.1:6379&gt; dbsize\n(integer) 843802</code></pre>\n<p>Now the redis server is able to start, but it will crash if you try to run <code>keys *</code> command.</p>\n<h2 id=\"round2-redis-with-128m-memory-and-maxmemory\">Round2: Redis with 128m memory and maxmemory</h2>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb7-1\"><a href=\"#cb7-1\"></a><span class=\"co\"># redis.conf</span></span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\"></a><span class=\"ex\">maxmemory</span> 100mb</span></code></pre></div>\n<p>Add the above maxmemory setting in redis.conf and then start redis by this:</p>\n<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb8-1\"><a href=\"#cb8-1\"></a><span class=\"ex\">docker</span> run -v /Users/hfli/Downloads/redis-test-data/redis-128.conf:/usr/local/etc/redis/redis.conf \\</span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\"></a>           --name redis-128-max \\</span>\n<span id=\"cb8-3\"><a href=\"#cb8-3\"></a>           -d \\</span>\n<span id=\"cb8-4\"><a href=\"#cb8-4\"></a>           -p 6381:6379 \\</span>\n<span id=\"cb8-5\"><a href=\"#cb8-5\"></a>           --memory=<span class=\"st\">&quot;128m&quot;</span> \\</span>\n<span id=\"cb8-6\"><a href=\"#cb8-6\"></a>           -v /Users/hfli/Downloads/redis-test-data/redis-128-max:/data \\</span>\n<span id=\"cb8-7\"><a href=\"#cb8-7\"></a>           redis redis-server /usr/local/etc/redis/redis.conf</span></code></pre></div>\n<p>This time we'll still get error when inserted lots of items, but the error message is a little bit different then:</p>\n<pre><code>nested exception is org.springframework.data.redis.RedisSystemException: \nError in execution; nested exception is io.lettuce.core.RedisCommandExecutionException:\n OOM command not allowed when used memory &gt; &#39;maxmemory&#39;.] with root cause</code></pre>\n<p>That's because the default behavior of redis is that it will return error when memory limit is reached.</p>\n<h2 id=\"round3-redis-with-128m-memory-and-maxmemory-and-lru\">Round3: Redis with 128m memory and maxmemory and lru</h2>\n<p>Try to add one more line to set the lru policy for redis:</p>\n<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb10-1\"><a href=\"#cb10-1\"></a><span class=\"co\"># redis.conf</span></span>\n<span id=\"cb10-2\"><a href=\"#cb10-2\"></a><span class=\"ex\">maxmemory</span> 100mb</span>\n<span id=\"cb10-3\"><a href=\"#cb10-3\"></a><span class=\"ex\">maxmemory-policy</span> allkeys-lru</span></code></pre></div>\n<p>Then even if we keep inserting new data into redis, we'll never get some error, because redis will automatically evict the existing items to save memory, that means the <code>dbsize</code> of redis would not be always increcing anymore.</p>\n<h1 id=\"eviction-policy\">Eviction policy</h1>\n<p>According to the offical document of redis, LRU and LFU(Least Frequently Used) are supported by redis(~4.0). In order to use them first we need to set the memory limit so that redis will use a specified amout of memory for the data set. As shown in the above sections, we can set it in config file or set it thorugh redis-cli at runtime:</p>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb11-1\"><a href=\"#cb11-1\"></a><span class=\"ex\">config</span> set maxmemory 100mb</span></code></pre></div>\n<p>If it's successfully configured we should be able to find it via <code>info</code> command:</p>\n<pre><code>127.0.0.1:6379&gt; info memory\n# Memory\n...\nmaxmemory:104857600\nmaxmemory_human:100.00M</code></pre>\n<p>By default is the value <code>0</code> which means no limit at all, and for those running at a 32-bit system there is an implicit memory limit of 3GB.</p>\n<p>The evicition policies are listed as bellow:</p>\n<ul>\n<li><strong>noeviction</strong>: Return errors</li>\n<li><strong>allkeys-lru</strong>: Remove less recently used(LRU) keys first</li>\n<li><strong>volatile-lru</strong>: Only remove LRU keys that has expire set</li>\n<li><strong>allkeys-random</strong>: Randomly remove keys</li>\n<li><strong>volatile-random</strong>: Randomly remove keys that has expire set</li>\n<li><strong>volatile-ttl</strong>: Evict keys with expire set and keys has shorter time to live(TTL) will be removed firstly</li>\n<li><strong>volatile-lfu</strong>: Remove less frequently used(LFU) keys first</li>\n<li><strong>allkeys-lfu</strong>: Remove LFU keys that has expire set</li>\n</ul>\n<p>For volatile-lru, volatile-lfu, volatile-random and volatile-ttl policies, it's possible that no keys are available to be removed, then redis will behave like noeviction(ie. throw error).</p>\n<h2 id=\"how-to-choose-policy\">How to choose policy</h2>\n<p>Generally LFU will be better than LRU, try to think that some items recently accessed but is actually almost never accessed in the future, if you use LRU then there is a risk that items get higher chance to be requested in the future will be evicted, while LFU does not have such a problem.</p>\n<p>In short, follow these rules to choose the evict policy:</p>\n<ul>\n<li><strong>allkeys-lru</strong>: If you expect that some elements will be accessed far more often than the rest, choose it. And if you're not sure, this is also the suggested option for you.</li>\n<li><strong>allkeys-random</strong>: If you'd prefer that all elements have the same chance to be accessed, use it.</li>\n<li><strong>volatile-ttl</strong>: If you wish to evict keys according to ttl</li>\n<li><strong>volatile-lru/volatile-random</strong>: If you use the same redis for both persistent keys and caching, <em>BUT</em> usually in this case it's suggested to run two seperate instance of redis.</li>\n</ul>\n<h2 id=\"controll-lru-precision\">Controll LRU precision</h2>\n<p>The redis LRU algorithm is an approxmimated LRU algorithm, the reason behind is that use true LRU algorithm will cost more memory, while the approximation is virtually equivalent (good enough) for the application using redis.</p>\n<p>And you're able to tune the precision of LRU by:</p>\n<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb13-1\"><a href=\"#cb13-1\"></a><span class=\"ex\">maxmemory-samples</span> 5</span></code></pre></div>\n<p>The larger value you use, the more approximated you will get, but also with more CPU usage.</p>\n<pre><code>maxmemory_human:0B\nmaxmemory_policy:noeviction</code></pre>\n","categories":["Programing","Cache"],"tags":["Redis"]},{"title":"搭建Openshift本地环境","url":"/it/devops/install_local_openshift/","content":"<p>OpenShift是红帽基于Docker和Kubernetes的云开发平台即服务（PaaS）。而<a href=\"https://www.okd.io/\" target=\"_blank\" rel=\"noopener\">OKD(The Origin Community Distribution of Kubernetes )</a>即Openshift的开源版本。在本机上搭建一套完整的Openshift环境较为麻烦，有以下几种方式：</p>\n<ul>\n<li>Running in a Container</li>\n<li>Run the All-In-One VM with Minishift</li>\n<li>使用Virtualbox构建Openshift集群</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"使用virtualbox构建openshift集群\">使用VirtualBox构建Openshift集群</h1>\n<p>按照<a href=\"https://docs.openshift.com/container-platform/3.11/install/index.html\" target=\"_blank\" rel=\"noopener\">安装文档</a>应该可以在本地搭建一个集群，但是纯手动安装的话比较复杂，幸好有<a href=\"https://github.com/eliu/openshift-vagrant\" target=\"_blank\" rel=\"noopener\">Openshift Vagrant</a>这个项目可以帮助我们简单的构建出一个集群环境。</p>\n<h2 id=\"集群规划\">集群规划</h2>\n<p>下面是计划搭建的最简单的单master、多node的一个集群配置：</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Node</th>\n<th style=\"text-align: left;\">IP</th>\n<th style=\"text-align: left;\">Role</th>\n<th style=\"text-align: left;\">Instance</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">master.example.com</td>\n<td style=\"text-align: left;\">.100</td>\n<td style=\"text-align: left;\">node, master, etcd</td>\n<td style=\"text-align: left;\">4GMem, 2Core, 40GDisk</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">node1.example.com</td>\n<td style=\"text-align: left;\">.101</td>\n<td style=\"text-align: left;\">node</td>\n<td style=\"text-align: left;\">2GMem, 1Core, 40GDisk</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">node2.example.com</td>\n<td style=\"text-align: left;\">.102</td>\n<td style=\"text-align: left;\">node</td>\n<td style=\"text-align: left;\">2GMem, 1Core, 40GDisk</td>\n</tr>\n</tbody>\n</table>\n<p>整个安装步骤可以分为这几步：</p>\n<ul>\n<li>创建好master、node三个虚拟机</li>\n<li>通过hosts文件设置好域名解析</li>\n<li>在master、node上都安装docker依赖</li>\n<li>配置在master上可以通过ssh访问到node01、node02</li>\n<li>在master上安装ansible</li>\n<li>在master上执行openshift-ansible部署openshift</li>\n</ul>\n<h2 id=\"定义虚拟机\">定义虚拟机</h2>\n<p>如果手动从virtualbox安装虚拟机、再安装系统的话，需要耗费不少时间，通过Vagrant我们可以快速自动化地创建出这样的一个机器集群，类似从docker拉取image一样。定义这些只需要创建一个Vagrantfile：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode lua\"><code class=\"sourceCode lua\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a>Vagrant<span class=\"op\">.</span>configure<span class=\"op\">(</span><span class=\"st\">&quot;2&quot;</span><span class=\"op\">)</span> <span class=\"cf\">do</span> <span class=\"op\">|</span>config<span class=\"op\">|</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a>    config<span class=\"op\">.</span>vm<span class=\"op\">.</span>box <span class=\"op\">=</span> <span class=\"st\">&quot;centos/7&quot;</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>    config<span class=\"op\">.</span>vm<span class=\"op\">.</span>box_check_update <span class=\"op\">=</span> <span class=\"kw\">false</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>    config<span class=\"op\">.</span>vm<span class=\"op\">.</span>provider <span class=\"st\">&quot;virtualbox&quot;</span> <span class=\"cf\">do</span> <span class=\"op\">|</span>vb<span class=\"op\">|</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>        vb<span class=\"op\">.</span>memory <span class=\"op\">=</span> <span class=\"dv\">2048</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a>        vb<span class=\"op\">.</span>cpus <span class=\"op\">=</span> <span class=\"dv\">1</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\"></a>    <span class=\"cf\">end</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\"></a></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\"></a>    config<span class=\"op\">.</span>vm<span class=\"op\">.</span>provision <span class=\"st\">&quot;shell&quot;</span><span class=\"op\">,</span> inline<span class=\"op\">:</span> <span class=\"op\">&lt;&lt;-</span><span class=\"cn\">SHELL</span></span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\"></a>        <span class=\"op\">/</span>vagrant<span class=\"op\">/</span>common<span class=\"op\">.</span>sh</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\"></a>    <span class=\"cn\">SHELL</span></span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\"></a></span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\"></a>    config<span class=\"op\">.</span>hostmanager<span class=\"op\">.</span>enabled <span class=\"op\">=</span> <span class=\"kw\">true</span></span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\"></a>    config<span class=\"op\">.</span>hostmanager<span class=\"op\">.</span>manage_host <span class=\"op\">=</span> <span class=\"kw\">true</span></span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\"></a>    config<span class=\"op\">.</span>hostmanager<span class=\"op\">.</span>ignore_private_ip <span class=\"op\">=</span> <span class=\"kw\">false</span></span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\"></a>  </span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\"></a>    <span class=\"op\">(</span><span class=\"dv\">1..2</span><span class=\"op\">).</span>each <span class=\"cf\">do</span> <span class=\"op\">|</span>i<span class=\"op\">|</span></span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\"></a>        config<span class=\"op\">.</span>vm<span class=\"op\">.</span>define <span class=\"st\">&quot;node0#{i}&quot;</span> <span class=\"cf\">do</span> <span class=\"op\">|</span>node<span class=\"op\">|</span></span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\"></a>            node<span class=\"op\">.</span>vm<span class=\"op\">.</span>network <span class=\"st\">&quot;private_network&quot;</span><span class=\"op\">,</span> ip<span class=\"op\">:</span> <span class=\"st\">&quot;#{NETWORK_BASE}#{i}&quot;</span></span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\"></a>            node<span class=\"op\">.</span>vm<span class=\"op\">.</span>hostname <span class=\"op\">=</span> <span class=\"st\">&quot;node0#{i}.example.com&quot;</span></span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\"></a>        <span class=\"cf\">end</span></span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\"></a>    <span class=\"cf\">end</span></span>\n<span id=\"cb1-24\"><a href=\"#cb1-24\"></a><span class=\"cf\">end</span></span></code></pre></div>\n<p>以上的配置定义了操作系统、内存和cpu，以及网络和域名设置，然后创建node01、node02。这里用到了vagrant的hostmanager插件，他会去修改宿主机以及虚拟机的hosts文件，增加域名映射。同时，可以把一些公共的依赖项安装脚本进行provision，例如安装docker。然后，还需要创建master节点：</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode lua\"><code class=\"sourceCode lua\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a>config<span class=\"op\">.</span>vm<span class=\"op\">.</span>define <span class=\"st\">&quot;master&quot;</span><span class=\"op\">,</span> primary<span class=\"op\">:</span> <span class=\"kw\">true</span> <span class=\"cf\">do</span> <span class=\"op\">|</span>master<span class=\"op\">|</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a>        master<span class=\"op\">.</span>vm<span class=\"op\">.</span>network <span class=\"st\">&quot;private_network&quot;</span><span class=\"op\">,</span> ip<span class=\"op\">:</span> <span class=\"st\">&quot;#{NETWORK_BASE}0&quot;</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a>        <span class=\"op\">#</span> master<span class=\"op\">.</span>vm<span class=\"op\">.</span>hostname <span class=\"op\">=</span> <span class=\"st\">&quot;master.example.com&quot;</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a>        master<span class=\"op\">.</span>hostmanager<span class=\"op\">.</span>aliases <span class=\"op\">=</span> <span class=\"op\">%</span>w<span class=\"op\">(</span>master<span class=\"op\">.</span>example<span class=\"op\">.</span>com etcd<span class=\"op\">.</span>example<span class=\"op\">.</span>com nfs<span class=\"op\">.</span>example<span class=\"op\">.</span>com<span class=\"op\">)</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a>        master<span class=\"op\">.</span>vm<span class=\"op\">.</span>provider <span class=\"st\">&quot;virtualbox&quot;</span> <span class=\"cf\">do</span> <span class=\"op\">|</span>vb<span class=\"op\">|</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a>            vb<span class=\"op\">.</span>memory <span class=\"op\">=</span> <span class=\"st\">&quot;4096&quot;</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a>            vb<span class=\"op\">.</span>cpus <span class=\"op\">=</span> <span class=\"dv\">2</span></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\"></a>        <span class=\"cf\">end</span></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\"></a><span class=\"cf\">end</span></span></code></pre></div>\n<p>创建了vagrantfile之后，就可以利用<code>vagrant up</code>命令来创建和启动这些虚拟机了。</p>\n<figure>\n<img src=\"/images/Virtualbox-cluster.png\" alt=\"\" /><figcaption>Virtualbox</figcaption>\n</figure>\n<p>这里master的域名配置有个坑，那就是hostnamanger会会生成一个master.example.com的ip映射在hosts文件里面，但是这个文件开头还有127.0.0.1 指向 master.example.com，像这样：</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode lua\"><code class=\"sourceCode lua\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"dv\">127.0.0.1</span>       master<span class=\"op\">.</span>example<span class=\"op\">.</span>com      master</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a><span class=\"dv\">127.0.0.1</span>   localhost localhost<span class=\"op\">.</span>localdomain localhost4 localhost4<span class=\"op\">.</span>localdomain4</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\"></a><span class=\"op\">::</span><span class=\"dv\">1</span>         localhost localhost<span class=\"op\">.</span>localdomain localhost6 localhost6<span class=\"op\">.</span>localdomain6</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\"></a></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\"></a><span class=\"op\">##</span> vagrant<span class=\"op\">-</span>hostmanager<span class=\"op\">-</span>start</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\"></a><span class=\"dv\">192.168.11.102</span>  node02<span class=\"op\">.</span>example<span class=\"op\">.</span>com</span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\"></a><span class=\"dv\">192.168.11.100</span>  master<span class=\"op\">.</span>example<span class=\"op\">.</span>com</span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\"></a><span class=\"dv\">192.168.11.101</span>  node01<span class=\"op\">.</span>example<span class=\"op\">.</span>com</span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\"></a><span class=\"op\">##</span> vagrant<span class=\"op\">-</span>hostmanager<span class=\"op\">-</span><span class=\"cf\">end</span></span></code></pre></div>\n<p>所以这里设置的<code>master.hostmanager.aliases</code>，同时要手动修改hostname：</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a><span class=\"ex\">hostnamectl</span> set-hostname master.example.com</span></code></pre></div>\n<h2 id=\"安装依赖项\">安装依赖项</h2>\n<p>各个节点上都需要安装docker环境，使用下面的命令安装：</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb5-1\"><a href=\"#cb5-1\"></a><span class=\"ex\">yum</span> -y install docker-1.13.1</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\"></a></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\"></a><span class=\"co\"># http://softpanorama.org/VM/Docker/Installation/rhel7_docker_package_dockerroot_problem.shtml</span></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\"></a></span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\"></a><span class=\"ex\">usermod</span> -aG dockerroot vagrant</span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\"></a></span>\n<span id=\"cb5-7\"><a href=\"#cb5-7\"></a><span class=\"fu\">cat</span> <span class=\"op\">&gt;</span> /etc/docker/daemon.json <span class=\"op\">&lt;&lt;EOF</span></span>\n<span id=\"cb5-8\"><a href=\"#cb5-8\"></a>{</span>\n<span id=\"cb5-9\"><a href=\"#cb5-9\"></a>    &quot;group&quot;: &quot;dockerroot&quot;</span>\n<span id=\"cb5-10\"><a href=\"#cb5-10\"></a>}</span>\n<span id=\"cb5-11\"><a href=\"#cb5-11\"></a><span class=\"op\">EOF</span></span>\n<span id=\"cb5-12\"><a href=\"#cb5-12\"></a></span>\n<span id=\"cb5-13\"><a href=\"#cb5-13\"></a><span class=\"ex\">systemctl</span> enable docker</span>\n<span id=\"cb5-14\"><a href=\"#cb5-14\"></a><span class=\"ex\">systemctl</span> start docker</span></code></pre></div>\n<p>同时需要禁用掉SELinux：</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb6-1\"><a href=\"#cb6-1\"></a><span class=\"ex\">setenforce</span> 0</span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\"></a><span class=\"fu\">sed</span> -i <span class=\"st\">&#39;s/SELINUX=enforcing/SELINUX=permissive/g&#39;</span> /etc/selinux/config</span></code></pre></div>\n<p>而在master上需要装更多的依赖项：</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb7-1\"><a href=\"#cb7-1\"></a><span class=\"ex\">yum</span> install wget git net-tools bind-utils yum-utils iptables-services bridge-utils bash-completion kexec-tools sos psacct</span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\"></a></span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\"></a><span class=\"ex\">yum</span> install unzip</span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\"></a></span>\n<span id=\"cb7-5\"><a href=\"#cb7-5\"></a><span class=\"ex\">yum</span> -y install https://releases.ansible.com/ansible/rpm/release/epel-7-x86_64/ansible-2.9.6-1.el7.ans.noarch.rpm</span></code></pre></div>\n<p>这里安装依赖项之前，可以考虑将Base源替换为163源，这样速度会稍微快一点。</p>\n<h2 id=\"配置ssh访问\">配置ssh访问</h2>\n<p>应为整个集群安装是在master上进行的，但实际上有一些东西是需要操作node的，因此要配置好在master上能直接无密码登录到其他的node上。这里通过ssh私钥的形式来设置，首先在Vagrantfile中:</p>\n<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode lua\"><code class=\"sourceCode lua\"><span id=\"cb8-1\"><a href=\"#cb8-1\"></a><span class=\"cf\">if</span> File<span class=\"op\">.</span>exist?<span class=\"op\">(</span><span class=\"st\">&quot;.vagrant/machines/master/virtualbox/private_key&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\"></a>    master<span class=\"op\">.</span>vm<span class=\"op\">.</span>provision <span class=\"st\">&quot;master-key&quot;</span><span class=\"op\">,</span> <span class=\"fu\">type</span><span class=\"op\">:</span> <span class=\"st\">&quot;file&quot;</span><span class=\"op\">,</span> source<span class=\"op\">:</span> <span class=\"st\">&quot;.vagrant/machines/master/virtualbox/private_key&quot;</span><span class=\"op\">,</span> destination<span class=\"op\">:</span> <span class=\"st\">&quot;/home/vagrant/.ssh/master.key&quot;</span></span>\n<span id=\"cb8-3\"><a href=\"#cb8-3\"></a><span class=\"cf\">end</span></span>\n<span id=\"cb8-4\"><a href=\"#cb8-4\"></a><span class=\"cf\">if</span> File<span class=\"op\">.</span>exist?<span class=\"op\">(</span><span class=\"st\">&quot;.vagrant/machines/node01/virtualbox/private_key&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb8-5\"><a href=\"#cb8-5\"></a>    master<span class=\"op\">.</span>vm<span class=\"op\">.</span>provision <span class=\"st\">&quot;node01-key&quot;</span><span class=\"op\">,</span> <span class=\"fu\">type</span><span class=\"op\">:</span> <span class=\"st\">&quot;file&quot;</span><span class=\"op\">,</span> source<span class=\"op\">:</span> <span class=\"st\">&quot;.vagrant/machines/node01/virtualbox/private_key&quot;</span><span class=\"op\">,</span> destination<span class=\"op\">:</span> <span class=\"st\">&quot;/home/vagrant/.ssh/node01.key&quot;</span></span>\n<span id=\"cb8-6\"><a href=\"#cb8-6\"></a><span class=\"cf\">end</span></span>\n<span id=\"cb8-7\"><a href=\"#cb8-7\"></a><span class=\"cf\">if</span> File<span class=\"op\">.</span>exist?<span class=\"op\">(</span><span class=\"st\">&quot;.vagrant/machines/node02/virtualbox/private_key&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb8-8\"><a href=\"#cb8-8\"></a>    master<span class=\"op\">.</span>vm<span class=\"op\">.</span>provision <span class=\"st\">&quot;node02-key&quot;</span><span class=\"op\">,</span> <span class=\"fu\">type</span><span class=\"op\">:</span> <span class=\"st\">&quot;file&quot;</span><span class=\"op\">,</span> source<span class=\"op\">:</span> <span class=\"st\">&quot;.vagrant/machines/node02/virtualbox/private_key&quot;</span><span class=\"op\">,</span> destination<span class=\"op\">:</span> <span class=\"st\">&quot;/home/vagrant/.ssh/node02.key&quot;</span></span>\n<span id=\"cb8-9\"><a href=\"#cb8-9\"></a><span class=\"cf\">end</span></span></code></pre></div>\n<p>然后通过下面的命令将文件拷贝过去：</p>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb9-1\"><a href=\"#cb9-1\"></a><span class=\"ex\">vagrant</span> provision --provision-with master-key,node01-key,node02-key</span></code></pre></div>\n<p>这一步的目的是因为Vagrant在创建这些node的时候，这个key还没有生成，只能在创建完之后才能成功拷贝过去。然后设置master的ssh配置：</p>\n<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb10-1\"><a href=\"#cb10-1\"></a><span class=\"co\"># vagrant ssh master</span></span>\n<span id=\"cb10-2\"><a href=\"#cb10-2\"></a><span class=\"co\">#vim ~/.ssh/config</span></span>\n<span id=\"cb10-3\"><a href=\"#cb10-3\"></a><span class=\"ex\">Host</span> *</span>\n<span id=\"cb10-4\"><a href=\"#cb10-4\"></a><span class=\"ex\">StrictHostKeyChecking</span> no</span></code></pre></div>\n<p>到这一步，docker、ssh访问都应该是成功的，如果想检查是否配置成功，可以在master上测试：</p>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb11-1\"><a href=\"#cb11-1\"></a><span class=\"ex\">vagrant</span> ssh master</span>\n<span id=\"cb11-2\"><a href=\"#cb11-2\"></a><span class=\"ex\">docker</span> -v</span>\n<span id=\"cb11-3\"><a href=\"#cb11-3\"></a><span class=\"fu\">ssh</span> -i node01.key vagrant@node01.example.com</span></code></pre></div>\n<h2 id=\"创建inventory\">创建Inventory</h2>\n<p>通过ansible执行需要一个hosts文件，如下：</p>\n<div class=\"sourceCode\" id=\"cb12\"><pre class=\"sourceCode ini\"><code class=\"sourceCode ini\"><span id=\"cb12-1\"><a href=\"#cb12-1\"></a><span class=\"kw\">[OSEv3:children]</span></span>\n<span id=\"cb12-2\"><a href=\"#cb12-2\"></a><span class=\"dt\">masters</span></span>\n<span id=\"cb12-3\"><a href=\"#cb12-3\"></a><span class=\"dt\">nodes</span></span>\n<span id=\"cb12-4\"><a href=\"#cb12-4\"></a><span class=\"dt\">etcd</span></span>\n<span id=\"cb12-5\"><a href=\"#cb12-5\"></a></span>\n<span id=\"cb12-6\"><a href=\"#cb12-6\"></a><span class=\"kw\">[OSEv3:vars]</span></span>\n<span id=\"cb12-7\"><a href=\"#cb12-7\"></a><span class=\"dt\">ansible_ssh_user</span><span class=\"ot\">=</span><span class=\"st\">vagrant</span></span>\n<span id=\"cb12-8\"><a href=\"#cb12-8\"></a><span class=\"dt\">ansible_become</span><span class=\"ot\">=</span><span class=\"kw\">true</span></span>\n<span id=\"cb12-9\"><a href=\"#cb12-9\"></a><span class=\"dt\">openshift_deployment_type</span><span class=\"ot\">=</span><span class=\"st\">origin</span></span>\n<span id=\"cb12-10\"><a href=\"#cb12-10\"></a><span class=\"dt\">openshift_disable_check</span><span class=\"ot\">=</span><span class=\"st\">disk_availability,memory_availability,docker_storage,docker_image_availability</span></span>\n<span id=\"cb12-11\"><a href=\"#cb12-11\"></a></span>\n<span id=\"cb12-12\"><a href=\"#cb12-12\"></a><span class=\"kw\">[masters]</span></span>\n<span id=\"cb12-13\"><a href=\"#cb12-13\"></a><span class=\"dt\">master.example.com ansible_ssh_private_key_file</span><span class=\"ot\">=</span><span class=\"st\">&quot;/home/vagrant/.ssh/master.key&quot;</span></span>\n<span id=\"cb12-14\"><a href=\"#cb12-14\"></a></span>\n<span id=\"cb12-15\"><a href=\"#cb12-15\"></a><span class=\"kw\">[etcd]</span></span>\n<span id=\"cb12-16\"><a href=\"#cb12-16\"></a><span class=\"dt\">master.example.com ansible_ssh_private_key_file</span><span class=\"ot\">=</span><span class=\"st\">&quot;/home/vagrant/.ssh/master.key&quot;</span></span>\n<span id=\"cb12-17\"><a href=\"#cb12-17\"></a></span>\n<span id=\"cb12-18\"><a href=\"#cb12-18\"></a><span class=\"kw\">[nodes]</span></span>\n<span id=\"cb12-19\"><a href=\"#cb12-19\"></a><span class=\"dt\">master.example.com containerized</span><span class=\"ot\">=</span><span class=\"kw\">false</span><span class=\"st\"> etcd_ip=</span><span class=\"dv\">192</span><span class=\"st\">.</span><span class=\"dv\">168</span><span class=\"st\">.</span><span class=\"fl\">11.100</span><span class=\"st\"> openshift_node_group_name=&#39;node-config-master-infra&#39;  ansible_ssh_private_key_file=&quot;/home/vagrant/.ssh/master.key&quot;</span></span>\n<span id=\"cb12-20\"><a href=\"#cb12-20\"></a><span class=\"dt\">node01.example.com openshift_node_group_name</span><span class=\"ot\">=</span><span class=\"st\">&#39;node-config-compute&#39; ansible_ssh_private_key_file=&quot;/home/vagrant/.ssh/node01.key&quot;</span></span>\n<span id=\"cb12-21\"><a href=\"#cb12-21\"></a><span class=\"dt\">node02.example.com openshift_node_group_name</span><span class=\"ot\">=</span><span class=\"st\">&#39;node-config-compute&#39; ansible_ssh_private_key_file=&quot;/home/vagrant/.ssh/node02.key&quot;</span></span></code></pre></div>\n<p>这里有几点坑： * <code>containerized=false etcd_ip=192.168.11.100</code>这个如果不加会导致<a href=\"https://github.com/eliu/openshift-vagrant/issues/10\" target=\"_blank\" rel=\"noopener\">\"Wait for control plane pods to appear\"</a>错误</p>\n<p>这个文件保存到/etc/ansible/hosts。</p>\n<h2 id=\"安装\">安装</h2>\n<p>在master上面安装ansible:</p>\n<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb13-1\"><a href=\"#cb13-1\"></a><span class=\"ex\">yum</span> -y install https://releases.ansible.com/ansible/rpm/release/epel-7-x86_64/ansible-2.9.6-1.el7.ans.noarch.rpm</span>\n<span id=\"cb13-2\"><a href=\"#cb13-2\"></a><span class=\"fu\">wget</span> https://github.com/openshift/openshift-ansible/archive/openshift-ansible-3.11.187-1.zip</span></code></pre></div>\n<p>然后，最好把openshift-ansible里面的mirror修改成国内的，否则很可能安装不成功或者要花很长时间：</p>\n<div class=\"sourceCode\" id=\"cb14\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb14-1\"><a href=\"#cb14-1\"></a><span class=\"fu\">sed</span> -i <span class=\"st\">&#39;s/mirror.centos.org/mirrors.163.com/g&#39;</span> openshift-ansible/roles/openshift_repos/templates/CentOS-OpenShift-Origin311.repo.j2</span></code></pre></div>\n<p>正是安装：</p>\n<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb15-1\"><a href=\"#cb15-1\"></a><span class=\"ex\">ansible-playbook</span> /home/vagrant/openshift-ansible/playbooks/prerequisites.yml <span class=\"kw\">&amp;&amp;</span> <span class=\"ex\">ansible-playbook</span> /home/vagrant/openshift-ansible/playbooks/deploy_cluster.yml</span></code></pre></div>\n<p>如果一切正常的话，就可以安装成功了。其中有几步比较耗时(大概十分钟左右），需要点耐心：</p>\n<pre><code>TASK [openshift_node : Install node, clients, and conntrack packages]\nTASK [openshift_node : Check status of node image pre-pull]</code></pre>\n<p>成功之后，可以看到log：</p>\n<pre><code>PLAY RECAP ***********************************************************************************************************\nlocalhost                  : ok=11   changed=0    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0\nmaster.example.com         : ok=622  changed=275  unreachable=0    failed=0    skipped=987  rescued=0    ignored=0\nnode01.example.com         : ok=130  changed=63   unreachable=0    failed=0    skipped=167  rescued=0    ignored=0\nnode02.example.com         : ok=130  changed=63   unreachable=0    failed=0    skipped=167  rescued=0    ignored=0\n\n\nINSTALLER STATUS *****************************************************************************************************\nInitialization               : Complete (0:00:18)\nHealth Check                 : Complete (0:00:04)\nNode Bootstrap Preparation   : Complete (0:34:23)\netcd Install                 : Complete (0:00:32)\nMaster Install               : Complete (0:07:48)\nMaster Additional Install    : Complete (0:00:34)\nNode Join                    : Complete (0:06:56)\nHosted Install               : Complete (0:00:56)\nCluster Monitoring Operator  : Complete (0:02:47)\nWeb Console Install          : Complete (0:01:45)\nConsole Install              : Complete (0:01:21)\nService Catalog Install      : Complete (0:07:53)</code></pre>\n<p>然后就可以访问<code>https://master.example.com:8443/</code>了：</p>\n<figure>\n<img src=\"/images/Openshift-welcome.png\" alt=\"\" /><figcaption>Openshift home</figcaption>\n</figure>\n<p>Reference: * <a href=\"https://blog.csdn.net/sun_qiangwei/article/details/80443943\" target=\"_blank\" rel=\"noopener\">OpenShift 3.9 多节点集群（Ansible）安装</a></p>\n","categories":["Programing","Docker"],"tags":["Docker","OpenShift","Virtualbox"]},{"title":"Burrows-Wheeler变换(Burrows–Wheeler Transform)","url":"/it/algorithm/about_bwt/","content":"<p>最近听一个医学专业的同学提到了在进行基因分析中用到BWT算法，觉得挺有意思的，正巧赶上这次疫情在家，于是想研究一下这个算法。这个算法的核心思想在于，调整原来的字符串中字符的顺序（而不改变其长度及内容）从而更多的将重复的字符排列到一起，这样有助于其他的压缩算法获得更高的压缩比。这个算法在基因分析中大有用处也就顺理成章了，想想DNA的双链表示大概都是G-T-A-C会有很多这样的字符，那么运用BWT应该可以有比较好的效果。 <a id=\"more\"></a></p>\n<h1 id=\"算法实现\">算法实现</h1>\n<p>考虑一个字符串，要想将相同的字符排列到一起，那么最简单的办法就是，将字符串中的字符进行排序。可是单纯的排序之后，虽然还是那么多字符，但是丢失了一个重要的信息就是字符原来的顺序，而BWT的核心思想就是在于排序并想办法保存字符的顺序信息。</p>\n<h2 id=\"编码\">编码</h2>\n<p>编码方式如下：</p>\n<ul>\n<li>将 <span class=\"math inline\">\\({\\displaystyle \\$}\\)</span> 作为字符串结尾标记加入到原字符串（记为 <span class=\"math inline\">\\({\\displaystyle S}\\)</span> )末尾</li>\n<li>将字符串从左到右进行轮换，对于一个长度为 <span class=\"math inline\">\\({\\displaystyle N}\\)</span> 的字符串，产生 <span class=\"math inline\">\\({\\displaystyle N}\\)</span> 个新的字符串，记为 <span class=\"math inline\">\\({\\displaystyle S_{n}}\\)</span></li>\n<li>将 <span class=\"math inline\">\\({\\displaystyle S, S_{1}...S_{n}}\\)</span> 进行字典序排序， <span class=\"math inline\">\\({\\displaystyle \\$}\\)</span> 权值最小放在最前面，也即 <span class=\"math inline\">\\({\\displaystyle S_{n}}\\)</span> 在第一个</li>\n<li>取排序后的所有字符串的最后一个字符，生成一个新的字符串（记为<span class=\"math inline\">\\({\\displaystyle S^{&quot;}}\\)</span> )，即编码完成</li>\n</ul>\n<p>以字符串<code>banana</code>举例来说：</p>\n<p><span class=\"math display\">\\[\nS = banana, N = 6\\\\\n\\begin{cases}\nS_{0} = banana\\color{blue}{$}\\\\\nS_{1} = anana\\color{blue}{$}b\\\\\nS_{2} = nana\\color{blue}{$}ba\\\\\nS_{3} = ana\\color{blue}{$}ban\\\\\nS_{4} = na\\color{blue}{$}bana\\\\\nS_{5} = a\\color{blue}{$}banan\\\\\nS_{6} = \\color{blue}{$}banana\n\\end{cases}\n\\xrightarrow[\\text{字典序排序}]{}\n\\begin{cases}\nS_{6} = \\color{blue}{$}banana\\\\\nS_{5} = a\\color{blue}{$}banan\\\\\nS_{3} = ana\\color{blue}{$}ban\\\\\nS_{1} = anana\\color{blue}{$}b\\\\\nS_{0} = banana\\color{blue}{$}\\\\\nS_{4} = na\\color{blue}{$}bana\\\\\nS_{2} = nana\\color{blue}{$}ba\n\\end{cases}\n\\xrightarrow[\\text{获取最后一个字符}]{}\n\\begin{cases}\nS_{6} = $banan\\color{red}{a}\\\\\nS_{5} = a$bana\\color{red}{n}\\\\\nS_{3} = ana$ba\\color{red}{n}\\\\\nS_{1} = anana$\\color{red}{b}\\\\\nS_{0} = banana\\color{red}{$}\\\\\nS_{4} = na$ban\\color{red}{a}\\\\\nS_{2} = nana$b\\color{red}{a}\n\\end{cases}\\\\\nS^{&quot;} = BWT(banana) = annb$aa\n\\]</span></p>\n<p>可以看出，转换后的字符串<code>annb$aa</code>比原来的字符串重复相连的字符的确更多了。实际上<a href=\"http://www.bzip.org/\" target=\"_blank\" rel=\"noopener\">bzip</a>就是应用了BWT结合进行压缩的：</p>\n<blockquote>\n<p>bzip2 compression program is based on Burrows–Wheeler algorithm.</p>\n</blockquote>\n<p>BWT转换后的重复相连字符更多并不绝对，有时候可能转换后的情况反而更糟，比如这个例子：</p>\n<p><span class=\"math display\">\\[\nBWT(appellee) = e$elplepa\n\\]</span></p>\n<p>反而不如原始字符串了。</p>\n<h2 id=\"解码\">解码</h2>\n<h3 id=\"利用还原矩阵法\">利用还原矩阵法</h3>\n<p>解码的过程分为以下几步：</p>\n<ul>\n<li>根据编码后的字符串 <span class=\"math inline\">\\({\\displaystyle S^{&quot;}}\\)</span> ，得到还原矩阵</li>\n<li>根据还原矩阵，逐个还原出原来的顺序</li>\n</ul>\n<p>根据编码的过程我们知道，实际上是这样的对应： <span class=\"math display\">\\[\n\\begin{cases}\nS_{6} = \\color{green}{$}banan\\color{red}{a}\\\\\nS_{5} = \\color{green}{a}$bana\\color{red}{n}\\\\\nS_{3} = \\color{green}{a}na$ba\\color{red}{n}\\\\\nS_{1} = \\color{green}{a}nana$\\color{red}{b}\\\\\nS_{0} = \\color{green}{b}anana\\color{red}{$}\\\\\nS_{4} = \\color{green}{n}a$ban\\color{red}{a}\\\\\nS_{2} = \\color{green}{n}ana$b\\color{red}{a}\n\\end{cases}\n\\xrightarrow[\\text{还原矩阵}]{}\n\\begin{pmatrix}\n$ &amp; a\\\\\na &amp; n\\\\\na &amp; n\\\\\na &amp; b\\\\\nb &amp; $\\\\\nn &amp; a\\\\\nn &amp; a\n\\end{pmatrix}\n\\]</span></p>\n<p>得到这个矩阵非常简单，直接将字符串 <span class=\"math inline\">\\({\\displaystyle S^{&quot;}}\\)</span> 排个序就可以得到：</p>\n<p><span class=\"math display\">\\[\n\\begin{cases}\n------a\\\\\n------n\\\\\n------n\\\\\n------b\\\\\n------$\\\\\n------a\\\\\n------a\n\\end{cases}\n\\xrightarrow[\\text{排序}]{}\n\\begin{cases}\n------$\\\\\n------a\\\\\n------a\\\\\n------a\\\\\n------b\\\\\n------n\\\\\n------n\n\\end{cases}\n\\xrightarrow[\\text{还原矩阵}]{}\n\\begin{pmatrix}\n$ &amp; a\\\\\na &amp; n\\\\\na &amp; n\\\\\na &amp; b\\\\\nb &amp; $\\\\\nn &amp; a\\\\\nn &amp; a\n\\end{pmatrix}\n\\]</span></p>\n<p>在这样的一个还原矩阵中，每一个字符对应的就是它最末尾的字符。解码的过程如下：</p>\n<ul>\n<li>从左边列的 <span class=\"math inline\">\\({\\displaystyle S}\\)</span> 开始，找到对应的字符作为下一个字符 <span class=\"math inline\">\\({\\displaystyle C_{n}}\\)</span></li>\n<li>根据 <span class=\"math inline\">\\({\\displaystyle C_{n}}\\)</span> 这个字符，在左边列找到对应的字符，其对应的字符即 <span class=\"math inline\">\\({\\displaystyle C_{n-1}}\\)</span></li>\n<li>以此类推，直到结尾</li>\n<li>如果出现了多个相同的字符，那么就从上到下按顺序找就可以了</li>\n</ul>\n<p><span class=\"math display\">\\[\n\\begin{pmatrix}\n\\color{red}{$} &amp; \\color{red}{a}\\\\\na &amp; n\\\\\na &amp; n\\\\\na &amp; b\\\\\nb &amp; $\\\\\nn &amp; a\\\\\nn &amp; a\n\\end{pmatrix}\n\\xrightarrow[\\text{\\$a}]{}\n\\begin{pmatrix}\n\\color{gray}{$} &amp; \\color{gray}{a}\\\\\n\\color{red}{a} &amp; \\color{red}{n}\\\\\na &amp; n\\\\\na &amp; b\\\\\nb &amp; $\\\\\nn &amp; a\\\\\nn &amp; a\n\\end{pmatrix}\n\\xrightarrow[\\text{\\$an}]{}\n\\begin{pmatrix}\n\\color{gray}{$} &amp; \\color{gray}{a}\\\\\n\\color{gray}{a} &amp; \\color{gray}{n}\\\\\na &amp; n\\\\\na &amp; b\\\\\nb &amp; $\\\\\n\\color{red}{n} &amp; \\color{red}{a}\\\\\nn &amp; a\n\\end{pmatrix}\n\\xrightarrow[\\text{\\$ana}]{}\n\\begin{pmatrix}\n\\color{gray}{$} &amp; \\color{gray}{a}\\\\\n\\color{gray}{a} &amp; \\color{gray}{n}\\\\\n\\color{red}{a} &amp; \\color{red}{n}\\\\\na &amp; b\\\\\nb &amp; $\\\\\n\\color{gray}{n} &amp; \\color{gray}{a}\\\\\nn &amp; a\n\\end{pmatrix}\n\\xrightarrow[\\text{\\$anan}]{}\n\\begin{pmatrix}\n\\color{gray}{$} &amp; \\color{gray}{a}\\\\\n\\color{gray}{a} &amp; \\color{gray}{n}\\\\\n\\color{gray}{a} &amp; \\color{gray}{n}\\\\\na &amp; b\\\\\nb &amp; $\\\\\n\\color{gray}{n} &amp; \\color{gray}{a}\\\\\n\\color{red}{n} &amp; \\color{red}{a}\\\\\n\\end{pmatrix}\n\\xrightarrow[\\text{\\$anana}]{}\n\\begin{pmatrix}\n\\color{gray}{$} &amp; \\color{gray}{a}\\\\\n\\color{gray}{a} &amp; \\color{gray}{n}\\\\\n\\color{gray}{a} &amp; \\color{gray}{n}\\\\\n\\color{red}{a} &amp; \\color{red}{b}\\\\\nb &amp; $\\\\\n\\color{gray}{n} &amp; \\color{gray}{a}\\\\\n\\color{gray}{n} &amp; \\color{gray}{a}\\\\\n\\end{pmatrix}\n\\xrightarrow[\\text{\\$ananab}]{}\n\\begin{pmatrix}\n\\color{gray}{$} &amp; \\color{gray}{a}\\\\\n\\color{gray}{a} &amp; \\color{gray}{n}\\\\\n\\color{gray}{a} &amp; \\color{gray}{n}\\\\\n\\color{gray}{a} &amp; \\color{gray}{b}\\\\\n\\color{red}{b} &amp; \\color{red}{$}\\\\\n\\color{gray}{n} &amp; \\color{gray}{a}\\\\\n\\color{gray}{n} &amp; \\color{gray}{a}\\\\\n\\end{pmatrix}\\\\\nS^{&#39;} = \\$ananab\\\\\nS = reverse(S^{&#39;}) \\\\= banana\\$\n\\]</span></p>\n<h3 id=\"变种\">变种</h3>\n<p>另一种方式可能更清晰，但实质上是一回事，只是做法看着不一样。在上述构建还原矩阵的过程中，我们实际已知的是最后一列的数据，那么，如果我们想办法把其他的列都构建出来，就可以得到原来的字符串了。</p>\n<p><span class=\"math display\">\\[\n\\begin{cases}\n------a\\\\\n------n\\\\\n------n\\\\\n------b\\\\\n------$\\\\\n------a\\\\\n------a\n\\end{cases}\n\\xrightarrow[\\text{想办法变成这样}]{}\n\\begin{cases}\nS_{6} = \\color{green}{$}banan\\color{red}{a}\\\\\nS_{5} = \\color{green}{a}$bana\\color{red}{n}\\\\\nS_{3} = \\color{green}{a}na$ba\\color{red}{n}\\\\\nS_{1} = \\color{green}{a}nana$\\color{red}{b}\\\\\nS_{0} = \\color{green}{b}anana\\color{red}{$}\\\\\nS_{4} = \\color{green}{n}a$ban\\color{red}{a}\\\\\nS_{2} = \\color{green}{n}ana$b\\color{red}{a}\n\\end{cases}\n\\xrightarrow[\\text{然后拿到S6就可以了}]{}\nS_{6} = \\color{green}{$}banan\\color{red}{a}\n\\]</span></p>\n<p>过程是这样的： <span class=\"math display\">\\[\n\\begin{cases}\n------a\\\\\n------n\\\\\n------n\\\\\n------b\\\\\n------$\\\\\n------a\\\\\n------a\n\\end{cases}\n\\xrightarrow[\\text{将最后一列排序，作为第一列}]{}\n\\begin{cases}\n$-----a\\\\\na-----n\\\\\na-----n\\\\\na-----b\\\\\nb-----$\\\\\nn-----a\\\\\nn-----a\n\\end{cases}\n\\]</span></p>\n<p>得到这个之后，从又到左得到<code>a$,na,na,ba,$b, an, an</code>，再将其排序作为第二列, 以此类推：</p>\n<p><span class=\"math display\">\\[\n\\begin{cases}\n------a\\\\\n------n\\\\\n------n\\\\\n------b\\\\\n------$\\\\\n------a\\\\\n------a\n\\end{cases}\n\\rightarrow\n\\begin{cases}\n$-----a\\\\\na-----n\\\\\na-----n\\\\\na-----b\\\\\nb-----$\\\\\nn-----a\\\\\nn-----a\n\\end{cases}\n\\rightarrow\n\\begin{cases}\na$\\\\\nna\\\\\nna\\\\\nba\\\\\n$b\\\\\nan\\\\\nan\n\\end{cases}\n\\xrightarrow[\\text{排序}]{}\n\\begin{cases}\n$\\color{green}{b}\\\\\na\\color{green}{$}\\\\\na\\color{green}{n}\\\\\na\\color{green}{n}\\\\\nn\\color{green}{a}\\\\\nn\\color{green}{a}\\\\\nb\\color{green}{a}\n\\end{cases}\n\\xrightarrow[\\text{得到第三列}]{}\n\\begin{cases}\n$b----a\\\\\na$----n\\\\\nan----n\\\\\nan----b\\\\\nba----$\\\\\nna----a\\\\\nna----a\n\\end{cases}\\\\\n\\rightarrow\n\\begin{cases}\na$b\\\\\nna$\\\\\nnan\\\\\nban\\\\\n$ba\\\\\nana\\\\\nana\n\\end{cases}\n\\rightarrow\n\\begin{cases}\n$b\\color{green}{a}\\\\\na$\\color{green}{b}\\\\\nan\\color{green}{a}\\\\\nan\\color{green}{a}\\\\\nba\\color{green}{n}\\\\\nna\\color{green}{$}\\\\\nna\\color{green}{n}\n\\end{cases}\n\\xrightarrow[\\text{得到第三列}]{}\n\\begin{cases}\n$ba---a\\\\\na$b---n\\\\\nana---n\\\\\nana---b\\\\\nban---$\\\\\nna$---a\\\\\nnan---a\n\\end{cases}\n\\xrightarrow[\\text{如此反复，最终得到全部列}]{}\n\\]</span></p>\n<h1 id=\"代码实现\">代码实现</h1>\n<p>看似复杂的操作，没想到用python可以写的如此简单，不过不见得一看就懂...</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a>EOL <span class=\"op\">=</span> <span class=\"st\">&#39;$&#39;</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a><span class=\"kw\">def</span> encode(source):</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>    source <span class=\"op\">=</span> source <span class=\"op\">+</span> EOL</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>    table <span class=\"op\">=</span> [source[i:] <span class=\"op\">+</span> source[:i] <span class=\"cf\">for</span> i <span class=\"kw\">in</span> <span class=\"bu\">range</span>(<span class=\"bu\">len</span>(source))]</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>    table.sort()</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\"></a>    <span class=\"cf\">return</span> <span class=\"st\">&#39;&#39;</span>.join([row[<span class=\"op\">-</span><span class=\"dv\">1</span>] <span class=\"cf\">for</span> row <span class=\"kw\">in</span> table])</span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\"></a></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\"></a><span class=\"kw\">def</span> decode(encoded):</span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\"></a>    length <span class=\"op\">=</span> <span class=\"bu\">len</span>(encoded)</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\"></a>    table <span class=\"op\">=</span> [<span class=\"st\">&#39;&#39;</span>] <span class=\"op\">*</span> length</span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\"></a></span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\"></a>    <span class=\"cf\">for</span> i <span class=\"kw\">in</span> <span class=\"bu\">range</span>(length):</span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\"></a>        table <span class=\"op\">=</span> <span class=\"bu\">sorted</span>([encoded[m] <span class=\"op\">+</span> table[m] <span class=\"cf\">for</span> m <span class=\"kw\">in</span> <span class=\"bu\">range</span>(length)])</span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\"></a>        <span class=\"bu\">print</span>(table)</span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\"></a>    s <span class=\"op\">=</span> [row <span class=\"cf\">for</span> row <span class=\"kw\">in</span> table <span class=\"cf\">if</span> row.endswith(EOL)][<span class=\"dv\">0</span>]</span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\"></a>    <span class=\"cf\">return</span> s.rstrip(EOL)</span></code></pre></div>\n<p>解码的这个循环不大好理解，打出来一看就懂了：</p>\n<pre><code>[&#39;$&#39;, &#39;a&#39;, &#39;a&#39;, &#39;a&#39;, &#39;b&#39;, &#39;n&#39;, &#39;n&#39;]\n[&#39;$b&#39;, &#39;a$&#39;, &#39;an&#39;, &#39;an&#39;, &#39;ba&#39;, &#39;na&#39;, &#39;na&#39;]\n[&#39;$ba&#39;, &#39;a$b&#39;, &#39;ana&#39;, &#39;ana&#39;, &#39;ban&#39;, &#39;na$&#39;, &#39;nan&#39;]\n[&#39;$ban&#39;, &#39;a$ba&#39;, &#39;ana$&#39;, &#39;anan&#39;, &#39;bana&#39;, &#39;na$b&#39;, &#39;nana&#39;]\n[&#39;$bana&#39;, &#39;a$ban&#39;, &#39;ana$b&#39;, &#39;anana&#39;, &#39;banan&#39;, &#39;na$ba&#39;, &#39;nana$&#39;]\n[&#39;$banan&#39;, &#39;a$bana&#39;, &#39;ana$ba&#39;, &#39;anana$&#39;, &#39;banana&#39;, &#39;na$ban&#39;, &#39;nana$b&#39;]\n[&#39;$banana&#39;, &#39;a$banan&#39;, &#39;ana$ban&#39;, &#39;anana$b&#39;, &#39;banana$&#39;, &#39;na$bana&#39;, &#39;nana$ba&#39;]</code></pre>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/Burrows-Wheeler%E5%8F%98%E6%8D%A2\" target=\"_blank\" rel=\"noopener\">维基百科-Burrows-Wheeler变换</a></li>\n<li><a href=\"https://www.cs.cmu.edu/~ckingsf/bioinfo-lectures/bwt.pdf\" target=\"_blank\" rel=\"noopener\">BWT</a></li>\n</ul>\n","categories":["Programing","Algorithm"],"tags":["BWT"]},{"title":"LaTeX(3)：使用TikZ绘制图形","url":"/tex/latex_tikz/","content":"<p><a href=\"https://www.ctan.org/pkg/pgf\" target=\"_blank\" rel=\"noopener\">PGF</a>是一个用来进行图形绘制的（底层）包，TikZ是利用这个包实现的用户友好的接口。所以通常在LaTeX中会用TikZ来进行矢量图形的绘制。</p>\n<a id=\"more\"></a>\n<h1 id=\"基本概念\">基本概念</h1>\n<h2 id=\"基本语法\">基本语法</h2>\n<p>要使用tikz进行图形绘制只需要简单引入tikz宏包，并将绘制代码包含在一个上下文中就可以了:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"bu\">\\usepackage</span>{<span class=\"ex\">tikz</span>}</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a><span class=\"kw\">\\begin</span>{<span class=\"ex\">tikzpicture</span>}</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a><span class=\"co\">% ...</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a><span class=\"kw\">\\end</span>{<span class=\"ex\">tikzpicture</span>}</span></code></pre></div>\n<p>同样如果希望把图片作为一个figure，那么再套一层:</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"bu\">\\usepackage</span>{<span class=\"ex\">graphicx</span>}</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a><span class=\"bu\">\\usepackage</span>{<span class=\"ex\">tikz</span>}</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a><span class=\"kw\">\\begin</span>{<span class=\"ex\">document</span>}</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a>    <span class=\"kw\">\\begin</span>{<span class=\"ex\">figure</span>}[h]</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a>    <span class=\"kw\">\\begin</span>{<span class=\"ex\">tikzpicture</span>}</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a>        <span class=\"fu\">\\draw</span> (0, 0) -- (1, 1);</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\"></a>    <span class=\"kw\">\\end</span>{<span class=\"ex\">tikzpicture</span>}</span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\"></a>    <span class=\"fu\">\\caption</span>{这是一条直线}</span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\"></a>    <span class=\"kw\">\\end</span>{<span class=\"ex\">figure</span>}</span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\"></a><span class=\"kw\">\\end</span>{<span class=\"ex\">document</span>}</span></code></pre></div>\n<h2 id=\"坐标系和缩放\">坐标系和缩放</h2>\n<p>默认情况下TikZ使用的是笛卡尔坐标系，即是这样：</p>\n<p><img src=\"/images/Latex-tikz-coordinates.png\" style=\"width:400px\"></p>\n<p>另外，TikZ提供了一个缩放的选项，可以用来缩放图形，所以不必要担心绝对坐标的问题：</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"kw\">\\begin</span>{<span class=\"ex\">tikzpicture</span>}[scale=0.5]</span></code></pre></div>\n<p>甚至还可以针对x轴和y轴分别设置缩放：</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a><span class=\"kw\">\\begin</span>{<span class=\"ex\">tikzpicture</span>}[xscale=0.5, yscale=0.3]</span></code></pre></div>\n<p><img src=\"/images/Latex-tikz-scale.png\" style=\"width:400px\"></p>\n<p>在TikZ中，默认的单位是厘米(cm)。如果希望改变这个值，可以这样设置：</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb5-1\"><a href=\"#cb5-1\"></a><span class=\"kw\">\\begin</span>{<span class=\"ex\">tikzpicture</span>}[x=2cm,y=1.5cm]</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\"></a></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\"></a><span class=\"co\">% 或者</span></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\"></a><span class=\"kw\">\\begin</span>{<span class=\"ex\">tikzpicture</span>}[x={(2cm,0cm)},y={(0cm,1.5cm)}]</span></code></pre></div>\n<h1 id=\"图形绘制\">图形绘制</h1>\n<h2 id=\"直线\">直线</h2>\n<p>绘制直线：</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb6-1\"><a href=\"#cb6-1\"></a><span class=\"fu\">\\draw</span> (0, 0) -- (1, 1);</span></code></pre></div>\n<p>绘制折线：</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb7-1\"><a href=\"#cb7-1\"></a><span class=\"fu\">\\draw</span> (0, 0) -- (1, 1) -- (2, 2) -- (1, 0) -- (0, 3);</span></code></pre></div>\n<p>绘制背景网格:</p>\n<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb8-1\"><a href=\"#cb8-1\"></a><span class=\"fu\">\\draw</span>[help lines] (0,0) grid (3,3);</span></code></pre></div>\n<p><img src=\"/images/Latex-tikz-lines.png\" style=\"width:400px\"></p>\n<h3 id=\"箭头\">箭头</h3>\n<p>如果希望绘制箭头也十分方便：</p>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb9-1\"><a href=\"#cb9-1\"></a><span class=\"fu\">\\draw</span> [-&gt;] (0,0) -- (2,0);        <span class=\"co\">%→</span></span>\n<span id=\"cb9-2\"><a href=\"#cb9-2\"></a><span class=\"fu\">\\draw</span> [&lt;-] (0, -0.5) -- (2,-0.5); <span class=\"co\">%←</span></span>\n<span id=\"cb9-3\"><a href=\"#cb9-3\"></a><span class=\"fu\">\\draw</span> [|-&gt;] (0,-1) -- (2,-1);     <span class=\"co\">%带尾巴的箭头</span></span>\n<span id=\"cb9-4\"><a href=\"#cb9-4\"></a><span class=\"fu\">\\draw</span> [&lt;-&gt;] (0, 0) -- (1, 1);     <span class=\"co\">%双向箭头</span></span></code></pre></div>\n<h3 id=\"线的粗细\">线的粗细</h3>\n<p>线的粗细可以用如下来表示：</p>\n<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb10-1\"><a href=\"#cb10-1\"></a><span class=\"fu\">\\draw</span> [ultra thin] (0, 1) -- (2, 1)</span></code></pre></div>\n<p>总共可用的粗细如下：</p>\n<p><img src=\"/images/Latex-line-width.png\" style=\"width:400px\"></p>\n<p>或者直接指定线的粗细，默认的单位是点:</p>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb11-1\"><a href=\"#cb11-1\"></a><span class=\"fu\">\\draw</span> [line width=12] (0,0) -- (2,0);</span>\n<span id=\"cb11-2\"><a href=\"#cb11-2\"></a><span class=\"fu\">\\draw</span> [line width=0.2cm] (4,.75) -- (5,.25);</span></code></pre></div>\n<p>除此之外另一个选项是<code>[help lines]</code>，用来绘制灰色的参考线。</p>\n<div class=\"sourceCode\" id=\"cb12\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb12-1\"><a href=\"#cb12-1\"></a><span class=\"fu\">\\draw</span> [help lines] (0, 5) -- (0, 0) -- (5, 0);</span>\n<span id=\"cb12-2\"><a href=\"#cb12-2\"></a><span class=\"fu\">\\draw</span> [line width=2pt] (0, 0) -- (5, 5);</span>\n<span id=\"cb12-3\"><a href=\"#cb12-3\"></a><span class=\"fu\">\\draw</span> [very thin] (0, 3) -- (4, 0);</span>\n<span id=\"cb12-4\"><a href=\"#cb12-4\"></a><span class=\"fu\">\\draw</span> [thin] (0, 2) -- (5, 2);</span></code></pre></div>\n<h3 id=\"样式及颜色\">样式及颜色</h3>\n<p>样式可以分为：</p>\n<ul>\n<li>虚线 <code>\\draw [dashed]</code></li>\n<li>实线 <code>\\draw [dotted]</code></li>\n</ul>\n<p>颜色有很多直接可以用的颜色表示，类似css一样：</p>\n<blockquote>\n<p>red, green, blue, cyan, magenta, yellow, black, gray, darkgray, lightgray,brown, lime, olive, orange, pink, purple, teal, violetand white</p>\n</blockquote>\n<p>一个较为完整的例子:</p>\n<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb13-1\"><a href=\"#cb13-1\"></a><span class=\"kw\">\\begin</span>{<span class=\"ex\">tikzpicture</span>}</span>\n<span id=\"cb13-2\"><a href=\"#cb13-2\"></a>    <span class=\"fu\">\\draw</span> [help lines] (0, 5) -- (0, 0) -- (5, 0) node [right=3]{Nice sample!};</span>\n<span id=\"cb13-3\"><a href=\"#cb13-3\"></a>    <span class=\"fu\">\\draw</span> [dashed, red, line width=2pt] (0, 0) -- (5, 5);</span>\n<span id=\"cb13-4\"><a href=\"#cb13-4\"></a>    <span class=\"fu\">\\draw</span> [blue, very thin] (0, 3) -- (4, 0);</span>\n<span id=\"cb13-5\"><a href=\"#cb13-5\"></a>    <span class=\"fu\">\\draw</span> [dotted, thin] (0, 2) -- (5, 2);</span>\n<span id=\"cb13-6\"><a href=\"#cb13-6\"></a><span class=\"kw\">\\end</span>{<span class=\"ex\">tikzpicture</span>}</span></code></pre></div>\n<h2 id=\"几何图形\">几何图形</h2>\n<h3 id=\"矩形\">矩形</h3>\n<div class=\"sourceCode\" id=\"cb14\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb14-1\"><a href=\"#cb14-1\"></a><span class=\"fu\">\\draw</span> [blue] (0,0) rectangle (1.5, 1);</span></code></pre></div>\n<h3 id=\"网格\">网格</h3>\n<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb15-1\"><a href=\"#cb15-1\"></a><span class=\"fu\">\\draw</span> [blue] (0,0) grid (1.5, 1);</span></code></pre></div>\n<h3 id=\"圆\">圆</h3>\n<div class=\"sourceCode\" id=\"cb16\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb16-1\"><a href=\"#cb16-1\"></a><span class=\"fu\">\\draw</span> [red, ultra thick] (3, 0.5) circle [radius=0.5];</span></code></pre></div>\n<h3 id=\"弧线\">弧线</h3>\n<div class=\"sourceCode\" id=\"cb17\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb17-1\"><a href=\"#cb17-1\"></a><span class=\"fu\">\\draw</span> [gray, ultra thick] (6,0) arc [radius=1, start angle=45, end angle= 120];</span></code></pre></div>\n<p>这个弧线的表示方法比较有意思，代表从(6, 0)出发，半径为1，初始角度为45°，当变成120°的时候停止。另一种方法：</p>\n<div class=\"sourceCode\" id=\"cb18\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb18-1\"><a href=\"#cb18-1\"></a><span class=\"fu\">\\draw</span>[very thick] (0,0) to [out=90,in=195] (2,1.5);</span></code></pre></div>\n<p>表示从(0,0)开始， 到(2, 1.5)这个点，起始角度为90°，到达的角度为195°。</p>\n<p>感觉很难控制这个....</p>\n<h3 id=\"圆角折线\">圆角折线</h3>\n<p>加多一个<code>rounded corners</code>就可以把折线变成圆角的了：</p>\n<div class=\"sourceCode\" id=\"cb19\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb19-1\"><a href=\"#cb19-1\"></a><span class=\"fu\">\\draw</span> [&lt;-&gt;, rounded corners, thick, purple] (0,2) -- (0,0) -- (3,0);</span></code></pre></div>\n<ul>\n<li><a href=\"https://www.latex-tutorial.com/tutorials/tikz/\" target=\"_blank\" rel=\"noopener\">Draw pictures in LaTeX - With tikz/pgf</a></li>\n<li><a href=\"http://cremeronline.com/LaTeX/minimaltikz.pdf\" target=\"_blank\" rel=\"noopener\">A very minimal introduction to TikZ∗</a></li>\n</ul>\n","categories":["TeX"],"tags":["LaTeX","TikZ"]},{"title":"LaTeX(2)：插入图片","url":"/tex/latex_images/","content":"<p>在LaTeX中插入图片有些类似于Markdown中的方式。 <a id=\"more\"></a></p>\n<h1 id=\"figure和图片\">Figure和图片</h1>\n<p>可以使用Figure的方式插入图片：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"bu\">\\usepackage</span>{<span class=\"ex\">graphicx</span>} <span class=\"co\">% 需要导入graphicx包</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a><span class=\"kw\">\\begin</span>{<span class=\"ex\">figure</span>}[h!]</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>    <span class=\"bu\">\\includegraphics</span>[width=<span class=\"fu\">\\linewidth</span>]{<span class=\"ex\">src/1.jpg</span>}</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>    <span class=\"fu\">\\caption</span>{冠状病毒的示意图}</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>    <span class=\"kw\">\\label</span>{<span class=\"ex\">fig:virus</span>}</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a><span class=\"kw\">\\end</span>{<span class=\"ex\">figure</span>}</span></code></pre></div>\n<p>这样生成的效果如图所示： <img src=\"/images/Latex-image-figure.png\" style=\"width:400px\"></p>\n<p>值得注意的是，在LaTeX中，图片和表格等是浮动元素，Tex会自动帮你找个地方放着。据说这样做的原因是因为它希望你专注在写作内容上面，等你完成了内容再回头来调整格式。因为没有这种经验，所以不确定这样是否是最好的方式，不过我们可能更习惯直接放在我们想放的位置上，所以这里是必须的：</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a>begin{figure}[h]</span></code></pre></div>\n<p>这里后面有一个<code>h!</code>，有这样一些可用的参数：</p>\n<ul>\n<li><span class=\"math inline\">\\(h\\)</span>ere: 就放在这里</li>\n<li><span class=\"math inline\">\\(t\\)</span>op： 放在页面顶部</li>\n<li><span class=\"math inline\">\\(b\\)</span>ottom: 页面底部</li>\n<li><span class=\"math inline\">\\(p\\)</span>age: 放在单独的页面</li>\n<li><span class=\"math inline\">\\(!\\)</span>(Override)：强制放在指定的位置</li>\n</ul>\n<p>虽然我们已经用了<code>h!</code>来强制将图片放在页面的位置，但是很有可能页面余下的空间并不足以放入这张图片，这个时候，这个选项会失效。如果依然确定要将图片放入到下面，可以引入<code>float</code>包，使用<code>H</code>选项：</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"bu\">\\usepackage</span>{<span class=\"ex\">float</span>}</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\"></a><span class=\"kw\">\\begin</span>{<span class=\"ex\">figure</span>}[H]</span></code></pre></div>\n<p>就像下面这样：</p>\n<p><img src=\"/images/Latex-image-float-H.png\" style=\"width:400px\"></p>\n<h1 id=\"多张图片排版\">多张图片排版</h1>\n<p>如果要将多张图片排版到一起，可以有多种方法。</p>\n<h2 id=\"使用subfig包\">使用<code>subfig</code>包</h2>\n<p><a href=\"https://ctan.org/pkg/subfig\" target=\"_blank\" rel=\"noopener\">subfig</a>是一个可以支持嵌套Figure或者表格的包，这个包是<code>subfigure</code>包的替代品，后者已经被弃用了。</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a><span class=\"bu\">\\usepackage</span>{<span class=\"ex\">subfig</span>}</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\"></a></span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\"></a><span class=\"kw\">\\begin</span>{<span class=\"ex\">figure</span>}</span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\"></a>    <span class=\"fu\">\\centering</span></span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\"></a>    <span class=\"fu\">\\subfloat</span>[信息锅]{</span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\"></a>        <span class=\"bu\">\\includegraphics</span>[width=0.4<span class=\"fu\">\\linewidth</span>, height=80pt]{<span class=\"ex\">src/3.jpg</span>}</span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\"></a>    }</span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\"></a>    <span class=\"fu\">\\subfloat</span>[硬气功]{</span>\n<span id=\"cb4-9\"><a href=\"#cb4-9\"></a>        <span class=\"bu\">\\includegraphics</span>[width=0.4<span class=\"fu\">\\linewidth</span>, height=80pt]{<span class=\"ex\">src/4.jpg</span>}</span>\n<span id=\"cb4-10\"><a href=\"#cb4-10\"></a>    }</span>\n<span id=\"cb4-11\"><a href=\"#cb4-11\"></a>    <span class=\"fu\">\\caption</span>{两种气功流派}</span>\n<span id=\"cb4-12\"><a href=\"#cb4-12\"></a>    <span class=\"kw\">\\label</span>{<span class=\"ex\">fig:qg</span>}</span>\n<span id=\"cb4-13\"><a href=\"#cb4-13\"></a><span class=\"kw\">\\end</span>{<span class=\"ex\">figure</span>}</span></code></pre></div>\n<p>这样排版出来的效果如下：</p>\n<p><img src=\"/images/Latex-subfig.png\" style=\"width:400px\"></p>\n<h2 id=\"使用subfloat包\">使用<code>subfloat</code>包</h2>\n<p><a href=\"www.ctan.org/pkg/subfloat\">subfloat</a>是另一个包，用法如下：</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb5-1\"><a href=\"#cb5-1\"></a><span class=\"kw\">\\begin</span>{<span class=\"ex\">subfigures</span>}</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\"></a><span class=\"kw\">\\begin</span>{<span class=\"ex\">figure</span>}</span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\"></a>    <span class=\"fu\">\\centering</span></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\"></a>    <span class=\"fu\">\\fbox</span>{</span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\"></a>        <span class=\"bu\">\\includegraphics</span>[width=0.4<span class=\"fu\">\\linewidth</span>, height=80pt]{<span class=\"ex\">src/3.jpg</span>}</span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\"></a>    }</span>\n<span id=\"cb5-7\"><a href=\"#cb5-7\"></a>    <span class=\"fu\">\\caption</span>{信息锅}</span>\n<span id=\"cb5-8\"><a href=\"#cb5-8\"></a><span class=\"kw\">\\end</span>{<span class=\"ex\">figure</span>}</span>\n<span id=\"cb5-9\"><a href=\"#cb5-9\"></a><span class=\"kw\">\\begin</span>{<span class=\"ex\">figure</span>}</span>\n<span id=\"cb5-10\"><a href=\"#cb5-10\"></a>    <span class=\"fu\">\\centering</span></span>\n<span id=\"cb5-11\"><a href=\"#cb5-11\"></a>    <span class=\"fu\">\\fbox</span>{</span>\n<span id=\"cb5-12\"><a href=\"#cb5-12\"></a>        <span class=\"bu\">\\includegraphics</span>[width=0.4<span class=\"fu\">\\linewidth</span>, height=80pt]{<span class=\"ex\">src/4.jpg</span>}</span>\n<span id=\"cb5-13\"><a href=\"#cb5-13\"></a>    }</span>\n<span id=\"cb5-14\"><a href=\"#cb5-14\"></a>    <span class=\"fu\">\\caption</span>{硬气功}</span>\n<span id=\"cb5-15\"><a href=\"#cb5-15\"></a><span class=\"kw\">\\end</span>{<span class=\"ex\">figure</span>}</span>\n<span id=\"cb5-16\"><a href=\"#cb5-16\"></a><span class=\"kw\">\\end</span>{<span class=\"ex\">subfigures</span>}</span></code></pre></div>\n<p>这样出来的效果是这样： <img src=\"/images/Latex-subfloag.png\" style=\"width:400px\"></p>\n<p>两张图片不在一行，没有找到怎么把他们放到一起的方法，也不知道是否支持。</p>\n<h2 id=\"使用subcaption包\">使用<code>subcaption</code>包</h2>\n<p>另有使用<a href=\"http://www.ctan.org/pkg/caption\" target=\"_blank\" rel=\"noopener\">caption</a>和<a href=\"http://www.ctan.org/pkg/subcaption\" target=\"_blank\" rel=\"noopener\">subcaption</a>包结合的方式。<code>subcaption</code>包更加新一些，可能更适合选用。</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb6-1\"><a href=\"#cb6-1\"></a><span class=\"bu\">\\usepackage</span>{<span class=\"ex\">caption</span>}</span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\"></a><span class=\"bu\">\\usepackage</span>{<span class=\"ex\">subcaption</span>} </span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\"></a></span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\"></a><span class=\"kw\">\\begin</span>{<span class=\"ex\">figure</span>}</span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\"></a><span class=\"fu\">\\centering</span></span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\"></a><span class=\"fu\">\\subcaptionbox</span>{信息锅}{</span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\"></a>    <span class=\"bu\">\\includegraphics</span>[width=0.40<span class=\"fu\">\\textwidth</span>, height=80pt]{<span class=\"ex\">src/3.jpg</span>}</span>\n<span id=\"cb6-8\"><a href=\"#cb6-8\"></a>}</span>\n<span id=\"cb6-9\"><a href=\"#cb6-9\"></a><span class=\"fu\">\\hfill</span></span>\n<span id=\"cb6-10\"><a href=\"#cb6-10\"></a><span class=\"fu\">\\subcaptionbox</span>{硬气功}{</span>\n<span id=\"cb6-11\"><a href=\"#cb6-11\"></a>    <span class=\"bu\">\\includegraphics</span>[width=0.40<span class=\"fu\">\\textwidth</span>, height=80pt]{<span class=\"ex\">src/4.jpg</span>}</span>\n<span id=\"cb6-12\"><a href=\"#cb6-12\"></a>}</span>\n<span id=\"cb6-13\"><a href=\"#cb6-13\"></a><span class=\"fu\">\\caption</span>{两种气功流派}</span>\n<span id=\"cb6-14\"><a href=\"#cb6-14\"></a><span class=\"kw\">\\end</span>{<span class=\"ex\">figure</span>}</span></code></pre></div>\n<p>注意subcaption包貌似和前面两种方法中的某一种可能不兼容。效果如下： <img src=\"/images/Latex-subcaption.png\" style=\"width:400px\"></p>\n<p>如果去掉<code>\\hfill</code>之后，效果基本上和第一种差不多了。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://tex.stackexchange.com/questions/16207/image-from-includegraphics-showing-up-in-wrong-location\" target=\"_blank\" rel=\"noopener\">Image from \\includegraphics showing up in wrong location?</a></li>\n<li><a href=\"https://tex.stackexchange.com/questions/122314/figures-what-is-the-difference-between-using-subfig-or-subfigure\" target=\"_blank\" rel=\"noopener\">Figures: What is the difference between using subfig or subfigure</a></li>\n</ul>\n","categories":["TeX"],"tags":["LaTeX"]},{"title":"LaTeX(1)：章节和段落","url":"/tex/latex_sections/","content":"<p>LaTeX适用于学术论文等的写作，在这类文章中一个很重要的部分就是段落和章节了。回想起当年使用Word写作的时候调整标题是何等的痛苦，那么在LaTeX中是怎样设置段落和章节的呢？ <a id=\"more\"></a></p>\n<h1 id=\"标题\">标题</h1>\n<p>通过下面的命令可以生成一个默认的标题：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"fu\">\\title</span>{一种新型冠状病毒的防治方法}</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a><span class=\"fu\">\\author</span>{Dr. Riguz}</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a><span class=\"fu\">\\date</span>{2020-02-07}</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a><span class=\"fu\">\\maketitle</span> <span class=\"co\">% 生成标题页</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a><span class=\"fu\">\\newpage</span>   <span class=\"co\">% 分页</span></span></code></pre></div>\n<p>这样效果如下：</p>\n<p><img src=\"/images/Latex-title.png\" style=\"width:400px\"></p>\n<h1 id=\"latex段落层次\">LaTeX段落层次</h1>\n<p>LaTeX中可以分成如下的几个部分：</p>\n<ul>\n<li>section：一级标题</li>\n<li>subsection：二级标题</li>\n<li>subsubsection：三级标题</li>\n<li>paragraph：段落</li>\n<li>subpragraph：二级段落</li>\n</ul>\n<p>下面是一个例子：</p>\n<p><img src=\"/images/Latex-sections.png\" style=\"width:400px\"></p>\n<p>对应的代码如下，非常简洁：</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"kw\">\\section</span>{背景}</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a>首先简要介绍一下这个项目的背景。</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a><span class=\"kw\">\\subsection</span>{冠状病毒简介}</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a>冠状病毒是一个大型病毒家族，包括引起普通感冒的病毒以及严重急性呼吸综合征冠状病毒和中东呼吸综合征冠状病毒。这一新病毒暂时命名为2019新型冠状病毒（2019-nCoV）。</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a><span class=\"kw\">\\subsection</span>{现有的防治方法}</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a><span class=\"kw\">\\subsubsection</span>{居家隔离法}</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a>待在家里不出门。</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\"></a><span class=\"kw\">\\subsubsection</span>{自我安慰法}</span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\"></a>反正也死不了。</span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\"></a><span class=\"kw\">\\section</span>{新的防治方法}</span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\"></a>实在编不下去了：</span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\"></a><span class=\"kw\">\\paragraph</span>{气功}</span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\"></a>是一种中华民族祖传的神功。气功又可以分为两种：</span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\"></a><span class=\"kw\">\\subparagraph</span>{硬气功}</span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\"></a>可以开山断石，金钟罩铁布衫。</span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\"></a><span class=\"kw\">\\subparagraph</span>{内功}</span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\"></a>可以运行体内的真气激发一种神奇的力量运行于经络之上。</span></code></pre></div>\n<h1 id=\"生成目录\">生成目录</h1>\n<h2 id=\"目录\">目录</h2>\n<p>想要生成目录页特别简单，一个命令就可以搞定：</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"fu\">\\tableofcontents</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a><span class=\"fu\">\\newpage</span></span></code></pre></div>\n<p><img src=\"/images/Latex-contents.png\" style=\"width:400px\"></p>\n<h2 id=\"自定义级别\">自定义级别</h2>\n<p>如果在生成目录的时候，只希望生成到特定的级别，可以这样设置：</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a><span class=\"fu\">\\setcounter</span>{tocdepth}{2}</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\"></a><span class=\"fu\">\\tableofcontents</span></span></code></pre></div>\n<p>这样生成的目录就只会到<code>subsection</code>级别。当然这样设置的话会对所有的内容生效，如果只是希望对某个章节生效怎么办呢？</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb5-1\"><a href=\"#cb5-1\"></a><span class=\"fu\">\\addtocontents</span>{toc}{<span class=\"fu\">\\setcounter</span>{tocdepth}{1}}</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\"></a><span class=\"kw\">\\section</span>{背景}</span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\"></a></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\"></a><span class=\"co\">% ...</span></span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\"></a><span class=\"fu\">\\addtocontents</span>{toc}{<span class=\"fu\">\\setcounter</span>{tocdepth}{3}}</span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\"></a><span class=\"kw\">\\section</span>{新的防治方法}</span></code></pre></div>\n<p>可以像上面这样，在需要设置的章节之前设置，然后再其他地方恢复默认级别。</p>\n<h2 id=\"行距\">行距</h2>\n<p>如果希望调整行距，可以使用</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb6-1\"><a href=\"#cb6-1\"></a><span class=\"fu\">\\doublespacing</span></span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\"></a><span class=\"fu\">\\tableofcontents</span></span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\"></a><span class=\"fu\">\\newpage</span></span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\"></a><span class=\"fu\">\\singlespacing</span></span></code></pre></div>\n<p>单倍行距：</p>\n<p><img src=\"/images/Latex-singlespacing.png\" style=\"width:400px\"></p>\n<p>双倍行距：</p>\n<p><img src=\"/images/Latex-doublespacing.png\" style=\"width:400px\"></p>\n<h2 id=\"图表目录\">图表目录</h2>\n<p>另外，如果想对图表生成目录，可以采用：</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb7-1\"><a href=\"#cb7-1\"></a><span class=\"kw\">\\begin</span>{<span class=\"ex\">appendix</span>}</span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\"></a>    <span class=\"fu\">\\listoffigures</span></span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\"></a>    <span class=\"fu\">\\listoftables</span></span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\"></a><span class=\"kw\">\\end</span>{<span class=\"ex\">appendix</span>}  </span></code></pre></div>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.latex-tutorial.com/tutorials/sections/\" target=\"_blank\" rel=\"noopener\">Using LaTeX paragraphs and sections</a></li>\n<li><a href=\"http://yakeworld.myesci.com/node/1397\" target=\"_blank\" rel=\"noopener\">xelatex中文换行</a></li>\n<li><a href=\"https://www.ntg.nl/doc/biemesderfer/ltxcrib.pdf\" target=\"_blank\" rel=\"noopener\">LATEX Command Summary</a></li>\n</ul>\n","categories":["TeX"],"tags":["LaTeX"]},{"title":"Mac上的LaTeX环境搭建","url":"/tex/latex_environment/","content":"<p>一直希望能够自如的使用TeX来进行写作，但学习曲线还是比较高的，可惜断断续续一直没有能够入门。趁着这段时间疫情严重，待在家里又不想搞学习，那不如来重头开始学习一下吧。 <a id=\"more\"></a></p>\n<h1 id=\"一些相关的概念\">一些相关的概念</h1>\n<p>TeX <span class=\"math inline\">\\(/tɛx/\\)</span> 是高德纳（Donald Ervin Knuth）教授编写的排版软件，通俗来讲就是跟Word差不多的东西，但是TeX就好像是Markdown一样，跟编程语言差不多，不是那种所见即所得的。以下是一些相关的概念：</p>\n<h2 id=\"tex-engine\">TeX Engine</h2>\n<p>TeX引擎就是实际可以运行TeX的二进制程序，主要有以下几种：</p>\n<ul>\n<li>Knuth的原始 TeX，只能支持plain tex格式，<code>tex &lt;somefile&gt;</code>这样。现在最新的版本是<a href=\"ftp://ftp.cs.stanford.edu/pub/tex/tex14.tar.gz\" target=\"_blank\" rel=\"noopener\">January 12, 2014发布的版本<code>3.14159265</code></a></li>\n<li>ε-TeX: 1990s后期发布的对TeX的一组增强扩展，实际上除了原始的TeX引擎其他的引擎都已经默认支持了这些特性</li>\n<li>pdfTeX: pdfTeX包含了PDF 和DVI格式的输出，被许多TeX的发行版用作默认的TeX引擎</li>\n<li>XeTeX: 同样包含了ε-TeX并原生支持Unicode和OpenType</li>\n<li>LuaTeX: 基于pdfTeX并支持Luau脚本的TeX引擎，最初被作为pdfTeX的下一代版本但事实上形成了一个独立的分支。同样，它支持ε-TeX，使用UTF8，并能够支持嵌入Lua脚本</li>\n</ul>\n<h2 id=\"tex-格式\">TeX 格式</h2>\n<p>TeX是一个宏（macro）处理器，macro就像是编程语言中的函数一样，</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode tex\"><code class=\"sourceCode latex\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"fu\">\\def</span>\\foo{bar}</span></code></pre></div>\n<p>上面这个指令会将所有的<code>\\foo</code>替换成<code>bar</code>。基于TeX有不同的格式，实际上就是一些macro的集合，相当于提供了一些库供用户使用，主要有以下这些：</p>\n<ul>\n<li>Plain TeX：原始的TeX发行版包含的基本指令集</li>\n<li>LaTeX2e: LaTeX的最新稳定版本（最新的试验版本是LaTeX3），所有的TeX程序都支持LaTeX2e</li>\n<li>ConTex: 另一种TeX系统</li>\n</ul>\n<h2 id=\"发行版\">发行版</h2>\n<p>TeX有许多种发行版，例如：</p>\n<ul>\n<li><a href=\"https://miktex.org/\" target=\"_blank\" rel=\"noopener\">MiKTeX</a>: 支持Windows的一种发行版</li>\n<li><a href=\"http://tug.org/texlive/\" target=\"_blank\" rel=\"noopener\">TeX Live</a>: 许多Linux/Unix默认的TeX系统，也支持Windows和Mac</li>\n<li><a href=\"http://tug.org/mactex/\" target=\"_blank\" rel=\"noopener\">MacTeX</a>: TeXLive的Mac版本</li>\n</ul>\n<h2 id=\"总结\">总结</h2>\n<p>借用维基百科上的词条来总结一下吧，更加一目了然各个概念之间的区别：</p>\n<figure>\n<img src=\"/images/tex-levels.png\" alt=\"\" /><figcaption>TeX Concepts</figcaption>\n</figure>\n<h1 id=\"mac上的tex环境\">Mac上的TeX环境</h1>\n<p>Mac上推荐安装MacTeX。安装完成之后，可以看到一个TeXShop的编辑器，并可以在terminal中运行<code>tex</code>命令：</p>\n<pre><code>tex\nThis is TeX, Version 3.14159265 (TeX Live 2019) (preloaded format=tex)\n**</code></pre>\n<p>然后就是选择编辑器了，网上有不少教程，基于VSCode或者Sublime Text等的，在Mac上还有另一个选择就是Textmate了，在Textmate中安装<code>LaTeX</code>的Bundle即可，然后打开它的设置:</p>\n<p><img src=\"/images/Textmate-latex-settings.png\" style=\"width:300px\"></p>\n<p>编写完成之后，使用Command + R运行即可预览：</p>\n<p><img src=\"/images/Textmate-latex-preview.png\" style=\"width:800px\"></p>\n<p>值得注意的是，如果使用XeLaTeX要支持中文需要设置一下字体：</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode tex\"><code class=\"sourceCode latex\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"bu\">\\documentclass</span>{<span class=\"ex\">article</span>}</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a><span class=\"bu\">\\usepackage</span>{<span class=\"ex\">fontspec</span>}</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\"></a><span class=\"fu\">\\setmainfont</span>{Hiragino Sans GB}</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\"></a><span class=\"kw\">\\begin</span>{<span class=\"ex\">document</span>}</span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\"></a> Hello，中国！</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\"></a><span class=\"kw\">\\end</span>{<span class=\"ex\">document</span>}</span></code></pre></div>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/TeX#cite_note-13\" target=\"_blank\" rel=\"noopener\">TeX</a></li>\n<li><a href=\"https://tex.stackexchange.com/questions/49/what-is-the-difference-between-tex-and-latex\" target=\"_blank\" rel=\"noopener\">What is the difference between TeX and LaTeX?</a></li>\n<li><a href=\"http://tug.org/levels.html\" target=\"_blank\" rel=\"noopener\">LaTeX vs. MiKTeX: The levels of TeX</a></li>\n<li><a href=\"https://www.latex-tutorial.com/tutorials/\" target=\"_blank\" rel=\"noopener\">A simple guide to LaTeX - Step by Step</a></li>\n</ul>\n","categories":["TeX"],"tags":["LaTeX"]},{"title":"调试JDK源码","url":"/it/java/debug_jdk_source/","content":"<p>最近想要直接调试下JDK的源码却发现有些变量不能显示，像这样：</p>\n<figure>\n<img src=\"/images/Intellij-no-debuginfo.png\" alt=\"\" /><figcaption>IntelliJ</figcaption>\n</figure>\n<a id=\"more\"></a>\n<p>其原因是因为JDK中的rt.jar在release的时候没有附带调试信息。所以解决这个问题的思路是这样的：</p>\n<ul>\n<li>重新编译你想要调试的类(<code>javac -g</code>)</li>\n<li>将带调试信息的类覆盖原来的</li>\n<li>重新进行调试</li>\n</ul>\n<p>实际上，在IntelliJ中操作起来可能比较简单，可以分为以下几步：</p>\n<ul>\n<li>将jdk的源码从JDK中拷贝出来，例如/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/src.zip</li>\n<li>将源码解压，并将其中<code>java</code>,<code>javax</code>两个文件夹拷贝到一个空的Java工程中</li>\n<li>编译源码，IntelliJ默认设置编译是包含了调试信息的。编译完成之后，将其<a href=\"https://www.jetbrains.com/help/idea/packaging-a-module-into-a-jar-file.html#\" target=\"_blank\" rel=\"noopener\">导出到jar包</a>中。</li>\n<li>将导出的jar包（比如说rt_debug.jar)放入到<code>$JAVA_HOME/jre/lib/endorsed</code>文件夹下面即可。如果这个目录不存在，手动创建一下。</li>\n<li>重新进行调试即可。</li>\n</ul>\n<figure>\n<img src=\"/images/Intellij-with-debuginfo.png\" alt=\"\" /><figcaption>IntelliJ</figcaption>\n</figure>\n<p>事实上，这里利用了<code>endorsed-standards override mechanism</code>这一个JVM特性来重载了Java的类，这个特性已经在Java8中被deprecated了(<a href=\"https://www.java.com/en/download/faq/release_changes.xml\" target=\"_blank\" rel=\"noopener\">release notes for Java 8 Update 40 (8u40)</a>)，但是Java8中仍然可用。</p>\n<blockquote>\n<p>The endorsed-standards override mechanism and the extension mechanism are deprecated and may be removed in a future release. There are no runtime changes. Existing applications using the 'endorsed-standards override' or 'extension' mechanisms are recommended to migrate away from using these mechanisms.</p>\n</blockquote>\n<p>Reference:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1313922/step-through-jdk-source-code-in-intellij-idea\" target=\"_blank\" rel=\"noopener\">Step through JDK source code in IntelliJ IDEA</a></li>\n<li><a href=\"https://stackoverflow.com/questions/18255474/debug-jdk-source-cant-watch-variable-what-it-is\" target=\"_blank\" rel=\"noopener\">debug jdk source can't watch variable what it is</a></li>\n</ul>\n","categories":["Programing","Java"],"tags":["JDK1.8"]},{"title":"浅析Java中的InvokeDynamic","url":"/it/java/java_invokedynamic/","content":"<p>Java语言在被编译成class文件后，在class文件中，有专门的一个<a href=\"https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.4\" target=\"_blank\" rel=\"noopener\">“常量池”(Constant Pool)</a>区域来存储一些运行所需要的常量，包括一些写死的变量（比如定义一个字符串<code>String str = \"Hello world\"</code>以及一些符号，例如类和方法的的名称等）。在JVM(se7)规范中，有以下这些类型的常量：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"ex\">CONSTANT_Class</span>                           CONSTANT_Long            </span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a><span class=\"ex\">CONSTANT_Fieldref</span>                        CONSTANT_Double          </span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a><span class=\"ex\">CONSTANT_Methodref</span>                       CONSTANT_NameAndType     </span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a><span class=\"ex\">CONSTANT_InterfaceMethodref</span>              CONSTANT_Utf8            </span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a><span class=\"ex\">CONSTANT_String</span>                          CONSTANT_MethodHandle    </span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a><span class=\"ex\">CONSTANT_Integer</span>                         CONSTANT_MethodType      </span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a><span class=\"ex\">CONSTANT_Float</span>                           CONSTANT_InvokeDynamic       </span></code></pre></div>\n<p>大部分我们顾名思义，都可以知道是大概是干啥的，比如字符串啊，数字啊，方法名称之类的；但是可以注意到最后面一个是称之为<code>CONSTANT_InvokeDynamic</code>的常量，这个就有点陌生了。那么，这是一个什么样的常量？什么情况下会出现这个呢？</p>\n<a id=\"more\"></a>\n<h1 id=\"invokedynamic指令\"><code>invokedynamic</code>指令</h1>\n<p>在JVM规范中有说，<code>CONSTANT_InvokeDynamic</code>常量是用来给<code>invokedynamic</code>指令指定一系列的参数的，那么有必要先了解一下<code>invokedynamic</code>这个指令了。这是Java 7引入的一个新指令，也是自Java 1.0以来第一次引入新的指令。</p>\n<h2 id=\"java7之前的invoke-指令\">Java7之前的<code>invoke-</code>指令</h2>\n<p>实际上，在此之前，已经有一些列的<code>invoke</code>开头的指令了：</p>\n<ul>\n<li><code>invokevirtual</code>：用来调用类的实例方法，也就是最普遍的方式</li>\n<li><code>invokestatic</code>：用来调用静态方法</li>\n<li><code>invokeinterface</code>：用来调用通过接口调用的方法</li>\n<li><code>invokespecial</code>：用来调用一些编译时就能够确定的，包括初始化(<code>&lt;init&gt;</code>)、类的私有方法，以及父类的方法(<code>super.someMethod()</code>)</li>\n</ul>\n<p>拿一个简单的Java程序来看看是怎么回事：</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"co\">// Foo.java</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a><span class=\"kw\">public</span> <span class=\"kw\">class</span> Foo {</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a>    <span class=\"kw\">public</span> <span class=\"dt\">static</span> <span class=\"dt\">void</span> <span class=\"fu\">main</span>(<span class=\"bu\">String</span>[] args) {</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a>        <span class=\"dt\">long</span> now = <span class=\"bu\">System</span>.<span class=\"fu\">currentTimeMillis</span>();            <span class=\"co\">//静态方法调用</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a>        <span class=\"bu\">ArrayList</span>&lt;<span class=\"bu\">String</span>&gt; arrayList =  <span class=\"kw\">new</span> <span class=\"bu\">ArrayList</span>&lt;&gt;(); <span class=\"co\">//构造函数将被调用</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a>        <span class=\"bu\">List</span>&lt;<span class=\"bu\">String</span>&gt; list = arrayList;</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\"></a></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\"></a>        arrayList.<span class=\"fu\">add</span>(<span class=\"st\">&quot;hello&quot;</span>);                           <span class=\"co\">//调用类实例方法</span></span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\"></a>        list.<span class=\"fu\">add</span>(<span class=\"st\">&quot;world&quot;</span>);                                <span class=\"co\">//通过接口调用</span></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\"></a>    }</span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\"></a>}</span></code></pre></div>\n<p>通过<code>javac Foo.java &amp;&amp; javap -v Foo</code>可以查看编译后生成的class文件，里面可以找到<code>invoke</code>相关的指令调用：</p>\n<pre><code>public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=5, args_size=1\n         0: invokestatic  #2                  // Method java/lang/System.currentTimeMillis:()J\n         3: lstore_1\n         4: new           #3                  // class java/util/ArrayList\n         7: dup\n         8: invokespecial #4                  // Method java/util/ArrayList.&quot;&lt;init&gt;&quot;:()V\n        11: astore_3\n        12: aload_3\n        13: astore        4\n        15: aload_3\n        16: ldc           #5                  // String hello\n        18: invokevirtual #6                  // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z\n        21: pop\n        22: aload         4\n        24: ldc           #7                  // String world\n        26: invokeinterface #8,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n        31: pop\n        32: return</code></pre>\n<p>这样就比较好理解了，就跟我们平常调用函数一样，</p>\n<ul>\n<li><code>System.currentTimeMillis()</code>静态函数的调用生成了<code>invokestatic</code>指令，这个指令的参数是静态方法（包含类名和方法名）</li>\n<li><code>ArrayList</code>的构造方法调用生成了<code>invokespecial</code>指令，这里在<code>new</code>指令之后接着使用<code>invokespecial</code>指令来进行初始化操作</li>\n<li>通过<code>ArrayList</code>的实例方法<code>add</code>调用生成了<code>invokevirtual</code>指令</li>\n<li>而通过<code>List</code>接口的<code>add</code>方法调用生成了<code>invokeinterface</code>指令</li>\n</ul>\n<p>尽管已经有了以上的四种指令，这些指令都有一个特点，那就是不管是什么方法，是静态还是实例方法，是子类还是父类的方法，在编译的时候已经能够确定出到底会调用到哪个方法了。有没有一种可能，就是我在编译的时候不能确定，而是在运行的时候才能确定呢？</p>\n<h2 id=\"鸭子类型duck-typing\">鸭子类型（<strong><em>Duck Typing</em></strong>）</h2>\n<p>这就是所谓的<a href=\"https://zh.wikipedia.org/wiki/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B\" target=\"_blank\" rel=\"noopener\">鸭子类型</a>了，可能叫<strong><em>Duck typing</em></strong>其实更好理解一点，这个名称来源自<a href=\"https://zh.wikipedia.org/wiki/%E9%B8%AD%E5%AD%90%E6%B5%8B%E8%AF%95\" target=\"_blank\" rel=\"noopener\">鸭子测试</a>:</p>\n<blockquote>\n<p>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”</p>\n</blockquote>\n<figure>\n<img src=\"https://devopedia.org/images/article/24/2998.1514520209.jpg\" alt=\"\" /><figcaption>A humorous and apt representation of duck typing. Source: Mastracci, 2014.</figcaption>\n</figure>\n<p>我们知道，Java是一个强类型的语言，有很多的类型检查，比如你要调用某个接口，而被调用的对象没有实现这个接口那么是无法完成的。而Duck Typing正如上面这个图片形象的表示，我并不关心对象本身是个什么东西，而关心这个对象是否支持我所需要的所有属性或者方法。维基百科上的这个伪代码可以更直接的解释：</p>\n<pre><code>function calculate(a, b, c) =&gt; return (a+b)*c\n\nexample1 = calculate (1, 2, 3)\nexample2 = calculate ([1, 2, 3], [4, 5, 6], 2)\nexample3 = calculate (&#39;apples &#39;, &#39;and oranges, &#39;, 3)</code></pre>\n<p>这些对象没有使用继承或者其他的方式相互发生联系，但只要它们支持<code>+</code>和<code>*</code>这两个方法，调用就可以成功。<code>invokedyanmic</code>指令从某种程度上来说，就是为了支持<em>Duck typing</em>。</p>\n<p>看到这里可能细心的读者会注意到，咦，这东西看着好像<code>lambda</code>?</p>\n<p>没错，事实上<code>lambda</code>的确是跟<code>invokedynamic</code>有关的，但有意思的是<code>lambda</code>是直到Java 8才推出（<a href=\"https://www.jcp.org/en/jsr/detail?id=335\" target=\"_blank\" rel=\"noopener\">JSR 335: Lambda Expressions for the JavaTM Programming Language</a>)。在此之前，是无法通过<code>javac</code>编译器生成包含这个指令的class的。<code>invokedynamic</code>指令是在<a href=\"https://jcp.org/en/jsr/detail?id=292\" target=\"_blank\" rel=\"noopener\">JSR 292: Supporting Dynamically Typed Languages on the JavaTM Platform</a>中被引入的，可以注意到，原本是为了支持基于JVM的动态语言，并不是说要在Java中来做Duck typing，这样就比较合理了。</p>\n<p>当然借助于一些字节码操作框架（例如<a href=\"http://www.csg.is.titech.ac.jp/~chiba/javassist/\" target=\"_blank\" rel=\"noopener\">Javassit</a>、<a href=\"http://asm.ow2.org/\" target=\"_blank\" rel=\"noopener\">ASM</a>等，是可以手动创造出含有<code>invokedynamic</code>的class的，不过会有些麻烦。</p>\n<h2 id=\"lambda与invokedynamic\">lambda与invokedynamic</h2>\n<p>如果我们用支持<code>lambda</code>的Java 8是可以很容易的创建出一个包含<code>invokedynamic</code>常量和指令的class的，比如下面这个例子：</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb5-1\"><a href=\"#cb5-1\"></a><span class=\"kw\">import</span><span class=\"im\"> java.util.function.*;</span></span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\"></a></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\"></a><span class=\"kw\">public</span> <span class=\"kw\">class</span> Hello {</span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\"></a></span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\"></a>    <span class=\"kw\">public</span> <span class=\"dt\">static</span> <span class=\"dt\">void</span> <span class=\"fu\">main</span>(<span class=\"bu\">String</span>[] args) {</span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\"></a>        Supplier&lt;<span class=\"bu\">String</span>&gt; welcome = () -&gt; <span class=\"st\">&quot;Hello world!&quot;</span>;</span>\n<span id=\"cb5-7\"><a href=\"#cb5-7\"></a>        <span class=\"bu\">System</span>.<span class=\"fu\">out</span>.<span class=\"fu\">println</span>(welcome.<span class=\"fu\">get</span>());</span>\n<span id=\"cb5-8\"><a href=\"#cb5-8\"></a>    }</span>\n<span id=\"cb5-9\"><a href=\"#cb5-9\"></a>}</span></code></pre></div>\n<p>当查看编译后的class文件会发现有下面的部分：</p>\n<pre><code>Constant pool:\n   #1 = Methodref          #9.#20         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V\n   #2 = InvokeDynamic      #0:#26         // #0:get:()Ljava/util/function/Supplier;\n\npublic static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=2, args_size=1\n         0: invokedynamic #2,  0              // InvokeDynamic #0:get:()Ljava/util/function/Supplier;</code></pre>\n<p>一个就是在常量池中可以看到一个InvokeDynamic类型的常量，指向了<code>Supplier.get()</code>方法；另一个就是在<code>main</code>方法中对lambda的调用，被编译成<code>invokedynamic</code>指令。</p>\n<h1 id=\"invokedynamic的机制\">invokedynamic的机制</h1>\n<p>来研究一下<code>invokedyanmic</code>到底是怎么工作的吧。要了解它怎么工作的，我们先要知道编译生成的class文件中有些什么。刚我们看到，class文件中有两个部分与之相关，一个是常量池中的InvokeDyanmic信息，另一个是方法字节码中的<code>invokedynamic</code>指令调用。实际上JVM在引入这个新指令的同时，也在常量池(Constant Pool)和属性表(Attributes)中加入了与之相关的内容，也就是<code>CONSTANT_InvokeDynamic_info</code>和<code>BootstrapMethods_attribute</code>。得益于class文件的扩展性，这些改动实际上并没有改变class文件本身的结构，仅仅只是加了更多合法的选项在里边。</p>\n<h2 id=\"引导函数bootstrap-method表\">引导函数(Bootstrap method)表</h2>\n<p>在class的<code>Attributes</code>（属性表）中新加入的一个<code>BootstrapMethods_attribute</code>属性，这个属性里面会存储一些函数的相关信息，而且是和<code>CONSTANT_InvokeDynamic</code>常量一一对应的。</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode cpp\"><code class=\"sourceCode cpp\"><span id=\"cb7-1\"><a href=\"#cb7-1\"></a>BootstrapMethods_attribute {</span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\"></a>    u2 attribute_name_index;</span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\"></a>    u4 attribute_length;</span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\"></a>    u2 num_bootstrap_methods;</span>\n<span id=\"cb7-5\"><a href=\"#cb7-5\"></a>    {   u2 bootstrap_method_ref;</span>\n<span id=\"cb7-6\"><a href=\"#cb7-6\"></a>        u2 num_bootstrap_arguments;</span>\n<span id=\"cb7-7\"><a href=\"#cb7-7\"></a>        u2 bootstrap_arguments[num_bootstrap_arguments];</span>\n<span id=\"cb7-8\"><a href=\"#cb7-8\"></a>    } bootstrap_methods[num_bootstrap_methods];</span>\n<span id=\"cb7-9\"><a href=\"#cb7-9\"></a>}</span></code></pre></div>\n<p>每一个引导函数都包含几个重要的属性：</p>\n<ul>\n<li>bootstrap_method_ref: 指向一个<code>CONSTANT_MethodHandle_info</code>引用，表明实际调用的方法信息</li>\n<li>bootstrap_arguments: 对应这个函数的参数</li>\n</ul>\n<p>这个引导函数通常是这个样子：</p>\n<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb8-1\"><a href=\"#cb8-1\"></a><span class=\"dt\">static</span> CallSite <span class=\"fu\">bootstrapMethod</span>(MethodHandles.<span class=\"fu\">Lookup</span> caller, <span class=\"bu\">String</span> name, MethodType type);</span></code></pre></div>\n<p>这个函数返回一个调用点(<a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/invoke/CallSite.html\" target=\"_blank\" rel=\"noopener\">CallSite</a>)对象，这个对象包含了方法调用所需要的一切信息，用来给<code>invokedynamic</code>指令使用。</p>\n<p>在Java8的<code>java.lang.invoke.LambdaMetafactory</code>类中，对应也增加定义了两个用来支持调用lambda的引导函数：</p>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb9-1\"><a href=\"#cb9-1\"></a><span class=\"dt\">static</span> CallSite <span class=\"fu\">altMetafactory</span>(MethodHandles.<span class=\"fu\">Lookup</span> caller, <span class=\"bu\">String</span> invokedName, MethodType invokedType, </span>\n<span id=\"cb9-2\"><a href=\"#cb9-2\"></a>                               <span class=\"bu\">Object</span><span class=\"kw\">... </span>args);</span>\n<span id=\"cb9-3\"><a href=\"#cb9-3\"></a><span class=\"dt\">static</span> CallSite <span class=\"fu\">metafactory</span>(MethodHandles.<span class=\"fu\">Lookup</span> caller, <span class=\"bu\">String</span> invokedName, MethodType invokedType, </span>\n<span id=\"cb9-4\"><a href=\"#cb9-4\"></a>                            MethodType samMethodType, MethodHandle implMethod, MethodType instantiatedMethodType);</span></code></pre></div>\n<p>而在上面的例子中，这个引导函数是这样的：</p>\n<pre><code>BootstrapMethods:\n  0: #22 invokestatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n    Method arguments:\n      #23 ()Ljava/lang/Object;\n      #24 invokestatic Hello.lambda$main$0:()Ljava/lang/String;\n      #25 ()Ljava/lang/String;</code></pre>\n<h2 id=\"invokedynamic常量\">InvokeDynamic常量</h2>\n<p>InvokeDynamic常量的定义如下：</p>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode cpp\"><code class=\"sourceCode cpp\"><span id=\"cb11-1\"><a href=\"#cb11-1\"></a>CONSTANT_InvokeDynamic_info {</span>\n<span id=\"cb11-2\"><a href=\"#cb11-2\"></a>    u1 tag;</span>\n<span id=\"cb11-3\"><a href=\"#cb11-3\"></a>    u2 bootstrap_method_attr_index;</span>\n<span id=\"cb11-4\"><a href=\"#cb11-4\"></a>    u2 name_and_type_index;</span>\n<span id=\"cb11-5\"><a href=\"#cb11-5\"></a>}</span></code></pre></div>\n<p>其中<code>bootstrap_method_attr_index</code>指向一个引导函数(Bootstrap method)的序号，<code>name_and_type_index</code>则表明方法的名称和描述。在上面的例子中，仅有一个引导函数，这个<code>bootstrap_method_attr_index</code>自然就是对应到这个引导函数了。而在<code>invokedynamic</code>指令调用的地方，是这样的：</p>\n<pre><code>invokedynamic #2,  0              // InvokeDynamic #0:get:()Ljava/util/function/Supplier;</code></pre>\n<p>其中这个<code>#2</code>即常量池中的<code>InvokeDynamic</code>常量。</p>\n<h2 id=\"invokedynamic指令-1\"><code>invokedynamic</code>指令</h2>\n<p>根据<a href=\"https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.invokedynamic\" target=\"_blank\" rel=\"noopener\">JVM的规范</a>中的描述可以看到<code>invokedynamic</code>指令的格式如下：</p>\n<pre><code>invokedynamic indexbyte1 indexbyte2 0 0</code></pre>\n<p>其中前两个操作数可以通过<code>(indexbyte1 &lt;&lt; 8) | indexbyte2</code>的方式合成一个常量池中的索引值，也就是上面的<code>#2</code>，而另外两个操作数是固定的0。</p>\n<h1 id=\"labmda的jvm实现\">Labmda的JVM实现</h1>\n<p>刚才已经看到，Java中对lambda'的调用实际上通过<code>LambdaMetafactory.metafactory</code>来完成的，通过了解这个类的实现，可以一看lambda的究竟。</p>\n<figure>\n<img src=\"/images/debug_metafactory.png\" alt=\"\" /><figcaption>Debug metafactory</figcaption>\n</figure>\n<p>在这个类里面创建了一个匿名类，并通过<code>UNSAFE.ensureClassInitialized(innerClass)</code>直接加载到JVM中，没有出现在class文件中，不过通过jvm参数可以输出出来：</p>\n<div class=\"sourceCode\" id=\"cb14\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb14-1\"><a href=\"#cb14-1\"></a><span class=\"ex\">java</span> -Djdk.internal.lambda.dumpProxyClasses=/Users/hfli/Downloads/tmp Hello</span></code></pre></div>\n<p>这样会生成一个<code>Hello$$Lambda$1.class</code>的文件，反编译这个类可以看到如下的信息：</p>\n<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb15-1\"><a href=\"#cb15-1\"></a><span class=\"dt\">final</span> <span class=\"kw\">class</span> Hello$$Lambda$<span class=\"dv\">1</span> <span class=\"kw\">implements</span> Supplier {</span>\n<span id=\"cb15-2\"><a href=\"#cb15-2\"></a>    <span class=\"kw\">private</span> Hello$$Lambda$<span class=\"dv\">1</span>() {</span>\n<span id=\"cb15-3\"><a href=\"#cb15-3\"></a>    }</span>\n<span id=\"cb15-4\"><a href=\"#cb15-4\"></a></span>\n<span id=\"cb15-5\"><a href=\"#cb15-5\"></a>    <span class=\"at\">@Hidden</span></span>\n<span id=\"cb15-6\"><a href=\"#cb15-6\"></a>    <span class=\"kw\">public</span> <span class=\"bu\">Object</span> <span class=\"fu\">get</span>() {</span>\n<span id=\"cb15-7\"><a href=\"#cb15-7\"></a>        <span class=\"kw\">return</span> Hello.<span class=\"fu\">lambda</span>$main$<span class=\"dv\">0</span>();</span>\n<span id=\"cb15-8\"><a href=\"#cb15-8\"></a>    }</span>\n<span id=\"cb15-9\"><a href=\"#cb15-9\"></a>}</span></code></pre></div>\n<p>这里实际是包装了一下<code>Supplier</code>接口，而具体调用的<code>Hello.lambda$main$0()</code>方法，可以在<code>Hello.class</code>文件中看到（需要使用<code>javap -p</code>选项输出私有方法):</p>\n<pre><code>private static java.lang.String lambda$main$0();\n    descriptor: ()Ljava/lang/String;\n    flags: ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC\n    Code:\n      stack=1, locals=0, args_size=0\n         0: ldc           #7                  // String Hello world!\n         2: areturn\n      LineNumberTable:\n        line 6: 0</code></pre>\n<p>所以大致是这个样子的过程：</p>\n<ul>\n<li>调用lambda时，首先通过找到对应的引导方法（也就是<code>metafactory()</code>)，开始执行</li>\n<li>JVM生成一个匿名类<code>Hello$$Lambda$1</code>，这个类中包含了lambda的实际实现</li>\n<li>创建一个CallSite，绑定到一个MethodHandle指向这个匿名类的实现<code>Hello$$Lambda$1.get()</code>。这里引导方法就调用完成了</li>\n<li>这个MethodHandle指向的方法被执行，调用到<code>Hello.lambda$main$0()</code>关联的字节码，得到最终的结果</li>\n</ul>\n<p>值得注意的是，引导方法只需要执行一次，如果一个lambda执行了多次，那么只有第一次会去调用引导方法生成CallSite，以后都可以直接拿来使用了。</p>\n<h1 id=\"结语\">结语</h1>\n<p>通过上面的描述，相信大家对<code>invokedynamic</code>有了一个粗略的了解，但要真正深入去了解的话，还是有很多东西需要去了解和研究的。虽然<code>invokedynamic</code>指令很强大，给了JVM的开发者很大的自由度，但实际上对于Java程序员来说，并没有太多可以操控的东西。如同上面提到的Duck Typing，在C#中可以这样：</p>\n<div class=\"sourceCode\" id=\"cb17\"><pre class=\"sourceCode c#\"><code class=\"sourceCode cs\"><span id=\"cb17-1\"><a href=\"#cb17-1\"></a>Object obj = ...; <span class=\"co\">// no static type available </span></span>\n<span id=\"cb17-2\"><a href=\"#cb17-2\"></a>dynamic duck = obj;</span>\n<span id=\"cb17-3\"><a href=\"#cb17-3\"></a>duck.<span class=\"fu\">quack</span>();     <span class=\"co\">// or any method. no compiler checking.</span></span></code></pre></div>\n<p>可能我们永远也没法使用Java来完成同样的任务，也许有一部分人会比较失望，但本身这是一把双刃剑，我还是倾向<a href=\"http://www.yinwang.org/blog-cn/2016/01/18/java\" target=\"_blank\" rel=\"noopener\">给Java说句公道话</a>。而借助于JVM平台，我们实际上有了越来越多的选择，Scala, Kotlin，Groovy等等。可以说从某个方面来讲，正是Java决策者对于每一个决策的慎重，才造就了今天Java程序员不愁饭吃的局面。</p>\n<blockquote>\n<p>\"When you have 9 million programmers using your language and out of which 1 million programmers know where you live you have to decide things differently.\" ——<a href=\"https://www.youtube.com/watch?v=1OpAgZvYXLQ&amp;t=1993s\" target=\"_blank\" rel=\"noopener\">Venkat Subramaniam</a></p>\n</blockquote>\n<p>参考文章：</p>\n<ul>\n<li><a href=\"https://www.infoq.com/articles/Invokedynamic-Javas-secret-weapon/\" target=\"_blank\" rel=\"noopener\">Invokedynamic - Java’s Secret Weapon</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6638735/whats-invokedynamic-and-how-do-i-use-it\" target=\"_blank\" rel=\"noopener\">What's invokedynamic and how do I use it?</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B\" target=\"_blank\" rel=\"noopener\">Duck Typing - Wiki</a></li>\n<li><a href=\"https://devopedia.org/duck-typing\" target=\"_blank\" rel=\"noopener\">Duck Typing</a></li>\n<li><a href=\"http://blog.headius.com/2008/09/first-taste-of-invokedynamic.html\" target=\"_blank\" rel=\"noopener\">A First Taste of InvokeDynamic</a></li>\n<li><a href=\"https://www.javacodegeeks.com/2012/02/java-7-complete-invokedynamic-example.html\" target=\"_blank\" rel=\"noopener\">Java 7: A complete invokedynamic example</a></li>\n<li><a href=\"https://my.oschina.net/lt0314/blog/3146028\" target=\"_blank\" rel=\"noopener\">你不知道Lambda的秘密和陷阱</a></li>\n<li><a href=\"http://wiki.jvmlangsummit.com/images/9/93/2011_Forax.pdf\" target=\"_blank\" rel=\"noopener\">JSR 292 Cookbook</a></li>\n<li><a href=\"https://www.jianshu.com/p/d74e92f93752\" target=\"_blank\" rel=\"noopener\">理解 invokedynamic</a></li>\n</ul>\n<p>邮件阅读体验不佳，如需更好体验可以移步 <a href=\"https://riguz.com/it/java/java_invokedynamic/\">在线版本</a></p>\n","categories":["Programing","Java"],"tags":["JVM"]},{"title":"使用Vagrant来管理Virtualbox","url":"/it/devops/introduction_to_vagrant/","content":"<p>一直以来我用Virtualbox都是手动创建虚拟机，然后安装操作系统，虽然这个过程本身并不复杂但是也要重复操作和花费时间。通过Vagrant可以像使用Docker一样，编写脚本来管理虚拟机的配置，还可以通过公共的镜像仓库来获取一些别人已经构建好了的镜像。</p>\n<a id=\"more\"></a>\n<h1 id=\"创建新的虚拟机\">创建新的虚拟机</h1>\n<p>通过Vagrant有两种方法来创建新的虚拟机：</p>\n<ul>\n<li>使用vagrant命令生成一个Vagrantfile</li>\n<li>手动编写Vagrantfile</li>\n</ul>\n<p>例如，创建一个ubuntu的镜像，使用<a href=\"https://app.vagrantup.com/ubuntu/boxes/trusty64\" target=\"_blank\" rel=\"noopener\">ubuntu/trusty64</a>这个镜像，可以首先通过如下的命令在当前文件夹下生成一个Vagrantfile：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"ex\">vagrant</span> init ubuntu/trusty64</span></code></pre></div>\n<p>生成的Vagrantfile如下：</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"ex\">Vagrant.configure</span>(<span class=\"st\">&quot;2&quot;</span>) <span class=\"kw\">do</span> <span class=\"kw\">|</span><span class=\"ex\">config</span><span class=\"kw\">|</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a>  <span class=\"ex\">config.vm.box</span> = <span class=\"st\">&quot;ubuntu/trusty64&quot;</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a><span class=\"ex\">end</span></span></code></pre></div>\n<p>Vagrantfile就相当于Dockerfile，可以定义虚拟机的一些配置，除此之外还可以定义一些其他的参数。然后，要启动它可以这样：</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"ex\">vagrant</span> up</span></code></pre></div>\n<p>值得注意的是，截止目前，最新的Virtualbox6.1是不被Vagrant支持的，只能使用6.0.x版本。创建完成之后就可以在Virtualbox的控制页面看到这个虚拟机了。</p>\n<figure>\n<img src=\"/images/Virtualbox.png\" alt=\"\" /><figcaption>Virtualbox</figcaption>\n</figure>\n<h1 id=\"解决下载很慢的问题\">解决下载很慢的问题</h1>\n<p>有时候</p>\n","categories":["Programing","Docker"],"tags":["Virtualbox","Vagrant"]},{"title":"Flutter性能优化实践","url":"/it/mobile/flutter_isolate/","content":"<p>我的加密软件有一个登录页面，需要用户输入主密码然后验证密码之后才能进入。因为密码转换(Key transform)过程中用到了Argon2算法，而这个算法没有原生的dart实现，所以必须要通过插件的形式来完成，为此我还专门做了一个插件<a href=\"https://pub.dev/packages/encryptions\" target=\"_blank\" rel=\"noopener\">encryptions</a>。调用插件得到秘钥这个过程大概要花个1~4秒钟，最近在安卓真机上测试发现，这个过程中我的进度条竟然出现了卡顿，也就是说本来应该转圈圈的，结果一开始就卡住不动了，那我还需要这个加载动画干嘛呢？为此研究了一番，如何来解决这个问题。 <a id=\"more\"></a></p>\n<h1 id=\"背景\">背景</h1>\n<p>先还是大致介绍一下我的场景。如图所示：</p>\n<figure>\n<img src=\"/images/login_blocked.gif\" alt=\"\" /><figcaption>Blocked Login UI</figcaption>\n</figure>\n<p>点击完成之后，期待的情况应该是显示圈圈转动的，但很明显这个地方卡住了。代码实现是是采用的mobx作状态管理，然后使用插件调用的argon2的原生c代码。页面的部分如下：</p>\n<pre class=\"dart\"><code>children: &lt;Widget&gt;[\n  _profileImage(),\n  Observer(\n    builder: (_) {\n      return _userStore.isBusy ? _progressBar() : _input(context);\n    },\n  )\n],</code></pre>\n<p>然后是登录事件的处理代码:</p>\n<pre class=\"dart\"><code>@action\nFuture&lt;bool&gt; login(ProtectedValue masterPassword) async {\n  setBusy();\n  bool success = false;\n  try {\n    final PasswordCredential credential =\n        await _loginService.checkUserCredential(masterPassword);\n    _errorMessage = null;\n    _userCredential = credential;\n    success = true;\n  } catch (_) {\n    _userCredential = null;\n    _errorMessage = &quot;密码验证失败&quot;;\n  }\n  setIdle();\n  return success;\n}</code></pre>\n<h1 id=\"定位问题\">定位问题</h1>\n<h2 id=\"使用flutter-profile工具\">使用flutter profile工具</h2>\n<p>这就让我犯迷糊了，不是用了future么，async/await这么厉害来着，为毛会卡住呢？因为本身我是dart和flutter的初学者，不清楚一些细节，所以一开始怀疑的是，在点击登录之后设置<code>busy</code>状态的这一个步骤没有生效导致的。因为本身用的是mobx框架来处理的，很自然就开始怀疑是不是这个玩意有bug？或者说是我的用法有些问题？然而搜索了很久也没有找到相关的问题，一度有些不知所措。</p>\n<p>所以首先想搞清楚的是，到底是什么操作导致了卡顿呢？这时候想到flutter可能有性能分析的工具，能不能帮助定位到具体的代码行呢？于是在Profile模式下运行程序，这是相关的信息：</p>\n<figure>\n<img src=\"/images/login_blocked_overlay.gif\" alt=\"\" /><figcaption>Performance overlay</figcaption>\n</figure>\n<p>然后还有dev tools中的对应信息：</p>\n<figure>\n<img src=\"/images/dart_devtools.png\" alt=\"\" /><figcaption>Dart dev tools</figcaption>\n</figure>\n<p>很可惜从这个分析结果中我没有能找到对我有帮助的信息，唯一只能说确定的确会卡顿...</p>\n<h2 id=\"换个思路继续试\">换个思路继续试</h2>\n<p>因为从这条路感觉已经走不通了，所以决定从其他的地方入手继续查。我注意到在登录的时候，偶尔会出现这样的日志：</p>\n<pre><code>I/Choreographer(15562): Skipped 107 frames!  The application may be doing too much work on its main thread.</code></pre>\n<p>这说明啥？说明的确是卡了....这时候我开始怀疑，如果在登录这个事件里面做的事情很多的情况下，即便我们用了async/await，是不是也会卡顿呢？为了屏蔽掉其他条件的干扰，我们需要将登陆事件变得简单一些：</p>\n<pre class=\"dart\"><code>oid onPasswordSubmitted(BuildContext context, String password) async {\n  print(&#39;login with: ${password}&#39;);\n  for(int i = 0; i &lt; 100000; i++) {\n  }\n}</code></pre>\n<p>果然发现这样UI一样会卡住，甚至卡的更厉害了，根本连进度圈都出不来了。从这个结果来看，说明async/await并不能保证不会block住UI，顺着这个思路朝下找，于是就找到问题的根本原因了。</p>\n<h1 id=\"让事件在单独的线程中运行\">让事件在单独的线程中运行</h1>\n<h2 id=\"flutter线程模型\">Flutter线程模型</h2>\n<p>原来dart跟JavaScript一样是一个单线程的模型，也就是是说，async/await里面的方法并不是在多个线程中取执行的，而是通过事件机制，在单线程中完成的。那么就很容易解释UI卡顿的场景了，UI更新和事件代码是交替执行的，如果其中事件执行的部分花费了较长时间，UI就没办法去更新，所以界面就会卡在那里，也就是日志里面所说的<code>Skipped 107 frames!  The application may be doing too much work on its main thread.</code>了。</p>\n<figure>\n<img src=\"https://cdn.jsdelivr.net/gh/flutterchina/flutter-in-action/docs/imgs/2-12.png\" alt=\"\" /><figcaption>Dart event model</figcaption>\n</figure>\n<p>从dart的文档中可以了解到，dart内部有两个队列：</p>\n<ul>\n<li>event queue： 包含所有的外部事件例如IO、点击、绘制等</li>\n<li>microtask queue： 微任务通常来自于dart内部或者手动插入<code>Future.microtask(…)</code></li>\n</ul>\n<p>microstask队列的优先级是要高于事件队列的。这里我们的登录事件和UI更新都同在事件队列中，很显然是因为我们的登录事件耗时太长从而掉帧了，那么解决的方案也就是，可不可以在新的线程中执行我们的事件呢？</p>\n<h2 id=\"isolate机制\">Isolate机制</h2>\n<p>研究了一下发现在dart中不叫线程，如果想达到这种目的需要使用一个称之为<code>Isolate</code>的东西，大致相当于新开一个线程来处理。要使用Isolate有两种办法：</p>\n<ul>\n<li>使用<code>compute</code>方法</li>\n<li>使用<code>Isolate.spawn</code>（更低级的操作）</li>\n</ul>\n<p>下面是一个例子：</p>\n<pre class=\"dart\"><code>Future&lt;List&lt;Photo&gt;&gt; fetchPhotos(http.Client client) async {\n  final response =\n      await client.get(&#39;https://jsonplaceholder.typicode.com/photos&#39;);\n\n  // Use the compute function to run parsePhotos in a separate isolate.\n  return compute(parsePhotos, response.body);\n}</code></pre>\n<h2 id=\"compute方法\">Compute方法</h2>\n<p>看样子使用Isolate看似就像在Java中新建一个线程一样，然后就可以在线程中运行代码了。那我们直接把登录事件的处理挪进去不就得了么？然而实际情况是，这玩意并不是十分好用，有着诸多（恶心）的限制。先来看一下最简单直接的<code>compute</code>方法：</p>\n<pre class=\"dart\"><code>typedef ComputeCallback&lt;Q, R&gt; = FutureOr&lt;R&gt; Function(Q message);</code></pre>\n<p>这个方法有两个参数，一个是callback（相当于java中的Runnable，就是你要执行的方法)，另一个是message，相当于是参数。这些参数有着如下的限制：</p>\n<ul>\n<li>callback必须是顶级的方法或者<code>static</code>方法，不能是类的实例方法或者是闭包</li>\n<li>只有一个参数，那么我的方法需要传多个参数怎么办？</li>\n</ul>\n<p>这就有些尴尬了，不仅要求是静态方法，还限制了参数，而我们的事件处理中有很多的依赖项，这可咋放进去呢？那么很可能只能用另一种方式了。</p>\n<h2 id=\"isolate.spawn\">Isolate.spawn</h2>\n<p>这个就显得更为麻烦了，大致的用法是这样的：</p>\n<pre class=\"dart\"><code>\nvar ourFirstReceivePort = new ReceivePort();             // 需要一个ReceivePort来接收消息\nawait Isolate.spawn(echo, ourFirstReceivePort.sendPort); // 创建一个Isolate\nvar echoPort = await ourFirstReceivePort.first;          // 等待执行完成并接收返回值\n\n// 在Isolate中运行的代码需要将返回值通过sendPort发送过来\nsendPort.send(...);</code></pre>\n<p>这个<code>spawn</code>方法如下：</p>\n<pre class=\"dart\"><code>external static Future&lt;Isolate&gt; spawn&lt;T&gt;(\n      void entryPoint(T message), T message,\n      {bool paused: false,\n      bool errorsAreFatal,\n      SendPort onExit,\n      SendPort onError,\n      @Since(&quot;2.3&quot;) String debugName});</code></pre>\n<p>同样有着如下的限制：</p>\n<ul>\n<li>两个参数，一个entryPoint，另一个是这个entryPoint方法的唯一参数（也就是message)</li>\n<li>entryPoint方法必须是顶级方法或者静态方法</li>\n<li>message参数必须是基本类型、SendPort或者只包含这两者的list或者map。</li>\n</ul>\n<p>这样就更加有些尴尬了，如果我们希望调用一个实例方法怎么办呢？我的登录过程中的一个关键步骤是调用argon2，这个方法我希望能在单独的线程之中调用：</p>\n<pre class=\"dart\"><code>class Argon2Kdf implements Kdf {\n  @override\n  Future&lt;Uint8List&gt; derive(Uint8List password, Uint8List salt) async {\n    Argon2 argon2 = new Argon2();\n    return await argon2.argon2i(password, salt) as Uint8List;\n  }\n}</code></pre>\n<p>这个方法本身是一个实例方法，既然我们只能用顶级方法和实例方法，而且Argon2这个类也没有什么依赖，也罢，那就创建一个好了，没有问题，现在问题来了，我们需要的两个参数是password和salt，这个参数类型不是基本类型，不支持呢，咋办呢？</p>\n<h2 id=\"isolate中通信\">Isolate中通信</h2>\n<p>原来isolate不像Java的线程一样可以使用共享内存，而是想actor模型一样，只能通过消息进行通信。那么，我们需要将参数转换为支持的基本类型，通过SendPort发送过去：</p>\n<pre class=\"dart\"><code>class Argon2Kdf implements Kdf {\n  static final Argon2 argon2 = Argon2(iterations: 2);\n\n  static void argon2Call(SendPort replyPort) async {\n    final receivePort = ReceivePort();\n    replyPort.send(receivePort.sendPort);\n    final List&lt;dynamic&gt; params = await receivePort.first;\n    final SendPort reportPort1 = params[0];\n\n    final String passwordHex = params[1];\n    final String saltHex = params[2];\n    final Uint8List password = hex.decode(passwordHex) as Uint8List;\n    final Uint8List salt = hex.decode(saltHex) as Uint8List;\n\n    final Uint8List result = await argon2.argon2i(password, salt) as Uint8List;\n\n    reportPort1.send(hex.encode(result));\n  }\n\n  @override\n  Future&lt;Uint8List&gt; derive(Uint8List password, Uint8List salt) async {\n    final ReceivePort response = ReceivePort();\n    final isolate = await FlutterIsolate.spawn(argon2Call, response.sendPort);\n    final SendPort sendPort = await response.first;\n    final ReceivePort response1 = ReceivePort();\n    sendPort.send([response1.sendPort, hex.encode(password), hex.encode(salt)]);\n    final String result = await response1.first;\n\n    isolate.kill();\n\n    return hex.decode(result);\n  }\n}</code></pre>\n<p>这里有两点需要注意：</p>\n<ul>\n<li>调用<code>await response.first</code>之后这个SendPort就自动解除订阅了，不能用来接收其他消息了</li>\n<li>Isolate.spawn不支持运行插件代码，所以用FlutterIsolate这个库来实现，而使用方法是一致的</li>\n</ul>\n<p>如果直接使用<code>Isolate.spawn</code>会有如下的报错信息:</p>\n<pre><code>E/flutter (18071): [ERROR:flutter/runtime/dart_isolate.cc(808)] Unhandled exception:\nE/flutter (18071): error: native function &#39;Window_sendPlatformMessage&#39; (4 arguments) cannot be found</code></pre>\n<p>这样最终的效果就是:</p>\n<figure>\n<img src=\"/images/login_unblocked.gif\" alt=\"\" /><figcaption>Login unblocked</figcaption>\n</figure>\n<ul>\n<li><a href=\"https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a\" target=\"_blank\" rel=\"noopener\">Dart asynchronous programming: Isolates and event loops</a></li>\n<li><a href=\"https://flutter.dev/docs/cookbook/networking/background-parsing#4-move-this-work-to-a-separate-isolate\" target=\"_blank\" rel=\"noopener\">Move this work to a separate isolate</a></li>\n<li><a href=\"https://pub.dev/packages/flutter_isolate\" target=\"_blank\" rel=\"noopener\">flutter_isolate</a></li>\n<li><a href=\"https://alvinalexander.com/dart/dart-isolates-example\" target=\"_blank\" rel=\"noopener\">A Dart Isolates example (Actors in Dart)</a></li>\n<li><a href=\"https://github.com/flutter/flutter/issues/26413\" target=\"_blank\" rel=\"noopener\">'Window_sendPlatformMessage' (4 arguments) cannot be found</a></li>\n<li><a href=\"https://stackoverflow.com/questions/54127158/flutter-window-sendplatformmessage-4-arguments-cannot-be-found\" target=\"_blank\" rel=\"noopener\">Flutter - 'Window_sendPlatformMessage' (4 arguments) cannot be found</a></li>\n<li><a href=\"https://github.com/dart-lang/sdk/issues/35962\" target=\"_blank\" rel=\"noopener\">Cannot send regular Dart Instance to Isolate spawned with spawnUri</a></li>\n<li><a href=\"https://github.com/flutter/flutter/issues/34993\" target=\"_blank\" rel=\"noopener\">Plugins crash with \"Methods marked with @UiThread must be executed on the main thread.\"</a></li>\n<li><a href=\"https://book.flutterchina.club/chapter2/thread_model_and_error_report.html\" target=\"_blank\" rel=\"noopener\">Dart单线程模型</a></li>\n</ul>\n","categories":["Programing","Android"],"tags":["Flutter","Swift","Thread","Java","Dart"]},{"title":"Rust(2) Ownership","url":"/it/rust/rust_lang_2_ownership/","content":"<p>传统的C语言需要开发人员手动管理内存，而像Java、Go这样的语言是通过垃圾回收机制自动进行内存管理。但通常垃圾回收机制本身较为复杂且需要不定期的进行（也就是说实际当内存不在需要的时候并不一定能得到及时的释放）。而rust语言采取的所有权机制（Ownership）是它区别于其他语言的一个重要特征，它被用来进行高效安全的内存管理。</p>\n<a id=\"more\"></a>\n<h1 id=\"ownership概念\">Ownership概念</h1>\n<p>在rust中，内存是由一个所有权管理系统进行管理的，它会使用一些由编译器在编译时生成的规则。这个内存管理系统的好处在于，不会像JVM stop-the-world一样暂停应用程序或者使得应用程序在运行的时候变慢。那么到底怎么样去定义ownership呢？有如下的一套规则：</p>\n<ul>\n<li>rust中每一个值都有一个变量作为与其对应的owner</li>\n<li>一个值在同一时间有且仅有一个owner</li>\n<li>当owner离开作用域的时候，值所在的空间会被释放(调用对象的<code>drop</code>方法)</li>\n</ul>\n<p>这和C++的析构函数如出一辙，称之为<em>Resource Acquisition Is Initialization (RAII)</em></p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a><span class=\"op\">{</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>    <span class=\"kw\">let</span> s = <span class=\"dt\">String</span>::from(<span class=\"st\">&quot;hello&quot;</span>); <span class=\"co\">// s is valid from this point forward</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>    <span class=\"co\">// do stuff with s</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a><span class=\"op\">}</span>                                  <span class=\"co\">// 程序走到这里会调用 drop 方法释放掉内存</span></span></code></pre></div>\n<h1 id=\"作用域转移move\">作用域转移(Move)</h1>\n<p>上面说到，当对象离开作用域的时候，会调用<code>drop</code>函数来释放掉占用的内存，那么，如果遇到下面的情况呢？</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"kw\">let</span> s1 = <span class=\"dt\">String</span>::from(<span class=\"st\">&quot;hello&quot;</span>);</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a><span class=\"kw\">let</span> s2 = s1;</span></code></pre></div>\n<p>字符串在内存中实际上是分为了两部分，</p>\n<figure>\n<img src=\"/images/rust_string_mm.svg\" alt=\"\" /><figcaption>Rust String copy</figcaption>\n</figure>\n<p>其中，左边的值存放在栈上，是固定的长度的，另外存了一个内存地址指向实际的内容，而这部分内容也就是右边的部分，是存放在堆上面的。当我们将s2赋值给s1的时候，实际上并没有进行深拷贝，也就是说堆上的数据仍旧是那个，只是将s2的指针指向了这一部分内存。那么现在存在一个问题就是，s1和s2离开作用域的时候，都会去调用<code>drop</code>释放这部分内存，这部分内存会被释放两次，显然这是不对的。为了解决这一个问题，rust中当将一个变量赋值给另一个变量的时候，会发生作用域转移，旧的对象不再有效，而释放内存这个操作，会由转移后的对象来承担这个职责。所以，一旦作用域转移后，就不能再使用这个对象了：</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a> --&gt; test.rs:<span class=\"dv\">5</span>:<span class=\"dv\">9</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a>  |</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\"></a><span class=\"dv\">5</span> |     <span class=\"kw\">let</span> s1 = s;</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\"></a>  |         ^^ help: consider prefixing with an underscore: `_s1`</span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\"></a>  |</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\"></a>  = note: `<span class=\"at\">#[</span>warn<span class=\"at\">(</span>unused_variables<span class=\"at\">)]</span>` on by <span class=\"kw\">default</span></span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\"></a></span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\"></a>error<span class=\"op\">[</span>E0382<span class=\"op\">]</span>: borrow of moved value: `s`</span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\"></a> --&gt; test.rs:<span class=\"dv\">6</span>:<span class=\"dv\">20</span></span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\"></a>  |</span>\n<span id=\"cb3-11\"><a href=\"#cb3-11\"></a><span class=\"dv\">4</span> |     <span class=\"kw\">let</span> s = <span class=\"dt\">String</span>::from(<span class=\"st\">&quot;hello&quot;</span>);</span>\n<span id=\"cb3-12\"><a href=\"#cb3-12\"></a>  |         - <span class=\"kw\">move</span> occurs because `s` has <span class=\"kw\">type</span> `std::string::String`, which does not implement the `Copy` trait</span>\n<span id=\"cb3-13\"><a href=\"#cb3-13\"></a>5 |     let s1 = s;</span>\n<span id=\"cb3-14\"><a href=\"#cb3-14\"></a>  |              - value moved here</span>\n<span id=\"cb3-15\"><a href=\"#cb3-15\"></a><span class=\"dv\">6</span> |     <span class=\"pp\">println!</span>(<span class=\"st\">&quot;{}&quot;</span>, s);</span>\n<span id=\"cb3-16\"><a href=\"#cb3-16\"></a>  |                    ^ value borrowed here after <span class=\"kw\">move</span></span>\n<span id=\"cb3-17\"><a href=\"#cb3-17\"></a></span>\n<span id=\"cb3-18\"><a href=\"#cb3-18\"></a>error: aborting due to previous error</span></code></pre></div>\n<h2 id=\"使用clone进行深拷贝\">使用<code>clone</code>进行深拷贝</h2>\n<p>因为默认就是浅拷贝，所以拷贝操作可以认为是很轻量级的，对性能没有什么影响。但如果的确需要深拷贝呢？那么应该使用<code>clone</code>方法，这跟其他语言差不多。</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a><span class=\"kw\">let</span> s = <span class=\"dt\">String</span>::from(<span class=\"st\">&quot;hello&quot;</span>);</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\"></a><span class=\"kw\">let</span> s1 = s.clone();            <span class=\"co\">// 进行深拷贝操作</span></span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\"></a><span class=\"pp\">println!</span>(<span class=\"st\">&quot;{}</span><span class=\"sc\">\\n</span><span class=\"st\">{}&quot;</span>, s, s1);     <span class=\"co\">// 这样s作用域并没有被转移，仍然可用</span></span></code></pre></div>\n<h2 id=\"简单对象的深拷贝\">简单对象的深拷贝</h2>\n<p>对于简单的基本类型而言，实际上拷贝之后，也并没有发生作用域转移，这点值得注意。</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb5-1\"><a href=\"#cb5-1\"></a><span class=\"kw\">let</span> x = <span class=\"dv\">3.14</span>;</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\"></a><span class=\"kw\">let</span> y = x;                   <span class=\"co\">// 没问题，拷贝之后x即失效</span></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\"></a><span class=\"pp\">println!</span>(<span class=\"st\">&quot;x={} y={}&quot;</span>, x, y);</span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\"></a></span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\"></a><span class=\"kw\">let</span> x = <span class=\"dt\">String</span>::from(<span class=\"st\">&quot;hello&quot;</span>);</span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\"></a><span class=\"kw\">let</span> y = x;</span>\n<span id=\"cb5-7\"><a href=\"#cb5-7\"></a><span class=\"pp\">println!</span>(<span class=\"st\">&quot;x={} y={}&quot;</span>, x, y); <span class=\"co\">// 不可以，因为x已经invalid了</span></span></code></pre></div>\n<p>原因是对于这些对象的拷贝完全发生在栈上，rust认为采取上面的作用域转移的策略对它们没有任何价值，所以这样设计。</p>\n<h2 id=\"自定义对象的深拷贝\">自定义对象的深拷贝</h2>\n<p>实质上刚才所说的简单对象复制后没有发生作用域转移的深层原因是因为它们实现了一个特殊的接口<code>Copy</code>，rust中有这些对象实现了这个接口：</p>\n<ul>\n<li>基本类型，包括数值类型、布尔、浮点数、字符类型</li>\n<li>只包含实现了<code>Copy</code>接口的元组</li>\n</ul>\n<p>对于我们自己的对象，也可以实现<code>Copy</code>接口，从而使得拷贝之后，作用域不会转移。如下：</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb6-1\"><a href=\"#cb6-1\"></a><span class=\"at\">#[</span>derive<span class=\"at\">(</span><span class=\"bu\">Debug</span><span class=\"at\">,</span> <span class=\"bu\">Copy</span><span class=\"at\">,</span> <span class=\"bu\">Clone</span><span class=\"at\">)]</span></span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\"></a><span class=\"kw\">struct</span> Point <span class=\"op\">{</span></span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\"></a>    x: <span class=\"dt\">i32</span>,</span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\"></a>    y: <span class=\"dt\">i32</span>,</span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\"></a><span class=\"op\">}</span></span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\"></a></span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\"></a><span class=\"kw\">fn</span> main() <span class=\"op\">{</span></span>\n<span id=\"cb6-8\"><a href=\"#cb6-8\"></a>    <span class=\"kw\">let</span> p1 = Point <span class=\"op\">{</span> x: <span class=\"dv\">10</span>, y: <span class=\"dv\">10</span> <span class=\"op\">}</span>;</span>\n<span id=\"cb6-9\"><a href=\"#cb6-9\"></a>    <span class=\"kw\">let</span> _p2 = p1;</span>\n<span id=\"cb6-10\"><a href=\"#cb6-10\"></a>    <span class=\"pp\">println!</span>(<span class=\"st\">&quot;p1:{:?}&quot;</span>, p1); <span class=\"co\">// 没问题，因为Point继承了Copy接口</span></span>\n<span id=\"cb6-11\"><a href=\"#cb6-11\"></a><span class=\"op\">}</span></span></code></pre></div>\n<h2 id=\"方法传参和返回值也会发生作用域转移\">方法传参和返回值也会发生作用域转移</h2>\n<p>如同拷贝一样，将变量传递给函数同样会发生作用域转移，例如：</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb7-1\"><a href=\"#cb7-1\"></a><span class=\"kw\">fn</span> output(<span class=\"dt\">str</span>: <span class=\"dt\">String</span>) <span class=\"op\">{</span></span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\"></a>    <span class=\"pp\">println!</span>(<span class=\"st\">&quot;=&gt;{}&quot;</span>, <span class=\"dt\">str</span>);</span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\"></a><span class=\"op\">}</span></span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\"></a></span>\n<span id=\"cb7-5\"><a href=\"#cb7-5\"></a><span class=\"kw\">fn</span> main() <span class=\"op\">{</span></span>\n<span id=\"cb7-6\"><a href=\"#cb7-6\"></a>    <span class=\"kw\">let</span> x = <span class=\"dt\">String</span>::from(<span class=\"st\">&quot;hello&quot;</span>);</span>\n<span id=\"cb7-7\"><a href=\"#cb7-7\"></a>    output(x);</span>\n<span id=\"cb7-8\"><a href=\"#cb7-8\"></a>    <span class=\"pp\">println!</span>(<span class=\"st\">&quot;x={}&quot;</span>, x);     <span class=\"co\">// 不可以，因为x作用域已经转移了</span></span>\n<span id=\"cb7-9\"><a href=\"#cb7-9\"></a><span class=\"op\">}</span></span></code></pre></div>\n<p>上述的Copy规则同样适用于通过方法调用发生的作用域转移。同样，如果一个函数有返回值，那么通过返回值会更改Ownership。现在可以注意到，一旦一个变量传给了某个函数调用之后，那么这个变量就被转移了，如果我们希望多次使用这个变量，岂不是很麻烦？唯一的办法就是再将它从返回值返回回来，像这样：</p>\n<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb8-1\"><a href=\"#cb8-1\"></a><span class=\"kw\">fn</span> output(<span class=\"dt\">str</span>: <span class=\"dt\">String</span>) -&gt; <span class=\"dt\">String</span> <span class=\"op\">{</span></span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\"></a>    <span class=\"pp\">println!</span>(<span class=\"st\">&quot;=&gt;{}&quot;</span>, <span class=\"dt\">str</span>);</span>\n<span id=\"cb8-3\"><a href=\"#cb8-3\"></a>    <span class=\"dt\">str</span></span>\n<span id=\"cb8-4\"><a href=\"#cb8-4\"></a><span class=\"op\">}</span></span>\n<span id=\"cb8-5\"><a href=\"#cb8-5\"></a></span>\n<span id=\"cb8-6\"><a href=\"#cb8-6\"></a><span class=\"kw\">fn</span> generate() -&gt; <span class=\"dt\">String</span> <span class=\"op\">{</span></span>\n<span id=\"cb8-7\"><a href=\"#cb8-7\"></a>    <span class=\"dt\">String</span>::from(<span class=\"st\">&quot;hello world!&quot;</span>)</span>\n<span id=\"cb8-8\"><a href=\"#cb8-8\"></a><span class=\"op\">}</span></span>\n<span id=\"cb8-9\"><a href=\"#cb8-9\"></a></span>\n<span id=\"cb8-10\"><a href=\"#cb8-10\"></a><span class=\"kw\">fn</span> main() <span class=\"op\">{</span></span>\n<span id=\"cb8-11\"><a href=\"#cb8-11\"></a>    <span class=\"kw\">let</span> x = generate();</span>\n<span id=\"cb8-12\"><a href=\"#cb8-12\"></a>    <span class=\"kw\">let</span> x = output(x);         <span class=\"co\">// 通过返回值再把x传出来，重新获得所有权</span></span>\n<span id=\"cb8-13\"><a href=\"#cb8-13\"></a>    <span class=\"pp\">println!</span>(<span class=\"st\">&quot;x={}&quot;</span>, x);       <span class=\"co\">// 不可以，因为x作用域已经转移了</span></span>\n<span id=\"cb8-14\"><a href=\"#cb8-14\"></a><span class=\"op\">}</span></span></code></pre></div>\n<p>那么如果我们函数本身也有一个返回值怎么办？虽然我们理论上也可以通过元组的方式来实现，但是代码会变得很奇怪，所以并不是真正的解决方法。</p>\n<h1 id=\"引用reference\">引用(Reference)</h1>\n<p>解决上述问题的一个办法就是，变量引用。如果是一个变量引用的话，那么就不会夺取该变量的所有权，如下：</p>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb9-1\"><a href=\"#cb9-1\"></a><span class=\"kw\">fn</span> output(<span class=\"dt\">str</span>: &amp;<span class=\"dt\">String</span>) <span class=\"op\">{</span></span>\n<span id=\"cb9-2\"><a href=\"#cb9-2\"></a>    <span class=\"pp\">println!</span>(<span class=\"st\">&quot;=&gt;{}&quot;</span>, <span class=\"dt\">str</span>);</span>\n<span id=\"cb9-3\"><a href=\"#cb9-3\"></a><span class=\"op\">}</span></span>\n<span id=\"cb9-4\"><a href=\"#cb9-4\"></a></span>\n<span id=\"cb9-5\"><a href=\"#cb9-5\"></a><span class=\"kw\">fn</span> main() <span class=\"op\">{</span></span>\n<span id=\"cb9-6\"><a href=\"#cb9-6\"></a>    <span class=\"kw\">let</span> x = generate();</span>\n<span id=\"cb9-7\"><a href=\"#cb9-7\"></a>    output(&amp;x);                <span class=\"co\">// 传递x的引用，这样就不会夺取所有权了</span></span>\n<span id=\"cb9-8\"><a href=\"#cb9-8\"></a>    <span class=\"pp\">println!</span>(<span class=\"st\">&quot;x={}&quot;</span>, x);       <span class=\"co\">// 可以，因为x作用域未发生转移</span></span>\n<span id=\"cb9-9\"><a href=\"#cb9-9\"></a><span class=\"op\">}</span></span></code></pre></div>\n<p>是不是很像c++? 😅要创建引用也很简单，加一个<code>&amp;</code>就可以了。</p>\n<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb10-1\"><a href=\"#cb10-1\"></a><span class=\"kw\">let</span> x = <span class=\"dt\">String</span>::from(<span class=\"st\">&quot;hello world&quot;</span>);</span>\n<span id=\"cb10-2\"><a href=\"#cb10-2\"></a><span class=\"kw\">let</span> y: &amp;<span class=\"dt\">String</span> = &amp;x;</span>\n<span id=\"cb10-3\"><a href=\"#cb10-3\"></a><span class=\"pp\">println!</span>(<span class=\"st\">&quot;x={} y={}&quot;</span>, x, y);   <span class=\"co\">// 没问题，y是一个引用，并不会夺取所有权</span></span></code></pre></div>\n<h1 id=\"借用borrowing\">借用(Borrowing)</h1>\n<p>引用变量作为函数的参数，称之为借用(borrowing)。所谓有借有还，再借不难，借的东西迟早都是要还回去的。如果你对借用的东西做了改变，怎么办呢？比如这样：</p>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb11-1\"><a href=\"#cb11-1\"></a><span class=\"dv\">12</span> | <span class=\"kw\">fn</span> output(<span class=\"dt\">str</span>: &amp;<span class=\"dt\">String</span>) <span class=\"op\">{</span></span>\n<span id=\"cb11-2\"><a href=\"#cb11-2\"></a>   |                ------- help: consider changing this to be a mutable reference: `&amp;<span class=\"kw\">mut</span> <span class=\"pp\">std::string::</span>String`</span>\n<span id=\"cb11-3\"><a href=\"#cb11-3\"></a><span class=\"dv\">13</span> |     <span class=\"dt\">str</span>.push_str(<span class=\"st\">&quot;world!&quot;</span>);</span>\n<span id=\"cb11-4\"><a href=\"#cb11-4\"></a>   |     ^^^ `str` is a `&amp;` reference, so the data it refers to cannot be borrowed <span class=\"kw\">as</span> mutable</span></code></pre></div>\n<p>不用担心，借用的对象默认就是不可变的，所以编译器会检测出来，不允许这样操作。如果的确需要改变怎么办呢？对于这种情况，可以使用<code>&amp;mut</code>创建可变的引用，当然前提是这个变量本身也要是可变的才行，否则编译器也会报错。</p>\n<div class=\"sourceCode\" id=\"cb12\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb12-1\"><a href=\"#cb12-1\"></a><span class=\"kw\">fn</span> output(<span class=\"dt\">str</span>: &amp;<span class=\"kw\">mut</span> <span class=\"dt\">String</span>) <span class=\"op\">{</span></span>\n<span id=\"cb12-2\"><a href=\"#cb12-2\"></a>    <span class=\"dt\">str</span>.push_str(<span class=\"st\">&quot;world!&quot;</span>);</span>\n<span id=\"cb12-3\"><a href=\"#cb12-3\"></a>    <span class=\"pp\">println!</span>(<span class=\"st\">&quot;=&gt;{}&quot;</span>, <span class=\"dt\">str</span>);</span>\n<span id=\"cb12-4\"><a href=\"#cb12-4\"></a><span class=\"op\">}</span></span>\n<span id=\"cb12-5\"><a href=\"#cb12-5\"></a></span>\n<span id=\"cb12-6\"><a href=\"#cb12-6\"></a><span class=\"kw\">fn</span> main() <span class=\"op\">{</span></span>\n<span id=\"cb12-7\"><a href=\"#cb12-7\"></a>    <span class=\"kw\">let</span> <span class=\"kw\">mut</span> x = <span class=\"dt\">String</span>::from(<span class=\"st\">&quot;hello world&quot;</span>);</span>\n<span id=\"cb12-8\"><a href=\"#cb12-8\"></a>    output(&amp;<span class=\"kw\">mut</span> x);</span>\n<span id=\"cb12-9\"><a href=\"#cb12-9\"></a><span class=\"op\">}</span></span></code></pre></div>\n<p>可变引用有一个限制就是，在同样的作用域里面至多可以有一个变量的可变引用，这样做的好处是在编译时就避免了数据竞争。rust中有以下的限制：</p>\n<ul>\n<li>在同一个scope中，最多有一个变量的可变引用</li>\n<li>可变引用和不可变引用不能同时存在。这里决定是否同时存在的条件是，在可变引用之后的语句是否有不可变引用被使用。</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb13-1\"><a href=\"#cb13-1\"></a><span class=\"kw\">let</span> <span class=\"kw\">mut</span> s = <span class=\"dt\">String</span>::from(<span class=\"st\">&quot;hello&quot;</span>);</span>\n<span id=\"cb13-2\"><a href=\"#cb13-2\"></a></span>\n<span id=\"cb13-3\"><a href=\"#cb13-3\"></a><span class=\"kw\">let</span> r1 = &amp;s; <span class=\"co\">// no problem</span></span>\n<span id=\"cb13-4\"><a href=\"#cb13-4\"></a><span class=\"kw\">let</span> r2 = &amp;s; <span class=\"co\">// no problem</span></span>\n<span id=\"cb13-5\"><a href=\"#cb13-5\"></a><span class=\"pp\">println!</span>(<span class=\"st\">&quot;{} and {}&quot;</span>, r1, r2);</span>\n<span id=\"cb13-6\"><a href=\"#cb13-6\"></a><span class=\"co\">// r1 and r2 are no longer used after this point</span></span>\n<span id=\"cb13-7\"><a href=\"#cb13-7\"></a></span>\n<span id=\"cb13-8\"><a href=\"#cb13-8\"></a><span class=\"kw\">let</span> r3 = &amp;<span class=\"kw\">mut</span> s; <span class=\"co\">// no problem</span></span>\n<span id=\"cb13-9\"><a href=\"#cb13-9\"></a><span class=\"co\">// 如果在这个地方之后还有使用r1和r2的地方，那么编译会报错</span></span>\n<span id=\"cb13-10\"><a href=\"#cb13-10\"></a><span class=\"co\">// println!(&quot;{} and {}&quot;, r1, r2);</span></span>\n<span id=\"cb13-11\"><a href=\"#cb13-11\"></a><span class=\"pp\">println!</span>(<span class=\"st\">&quot;{}&quot;</span>, r3);</span></code></pre></div>\n","categories":["Programing","Rust"]},{"title":"Java中的时间","url":"/it/java/java_datetime/","content":"<p>你如果以为，Java中谈到时间仅仅就意味着<code>java.util.Date</code>那就大错特错了，Java中的时间其实可以说五花八门，Java8发布后又增加了一些新的用来表示日期和时间的类，那么我们在构建应用程序的时候到底应该用哪个类来呢？彼此之间又有什么区别？</p>\n<a id=\"more\"></a>\n<h1 id=\"关于时间的表示\">关于时间的表示</h1>\n<p>通常由于文化和地区的不同，世界上各个地方的人们对于时间的表达方式都不尽相同，比如在中国以前用农历和十二时辰来表示，而在西方是二十四小时制（巧合的是正好一个时辰能对应上两个小时，据称与”高合成数“有关）。那么在计算机领域，在表示时间的时候也有不同的表示方法，比较常见的有：</p>\n<ul>\n<li>通过计算当前时间到Jan 01 1970(Unix Epoch)这一天（准确的说是00：00）经过的秒数来表示，例如 <code>1573090869</code>。</li>\n<li>比较直接的方法就是直接以时分秒的形式表示当地时间，同时将当地的时区加进去，例如 <code>2001-07-04T12:08:56.235-07:00</code></li>\n</ul>\n<h1 id=\"java中的时间类\">Java中的时间类</h1>\n<p>抛开时间戳不谈，在Java中专门用来表示时间的其他类有：</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Class</th>\n<th style=\"text-align: left;\">Since</th>\n<th style=\"text-align: left;\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">java.util.Date</td>\n<td style=\"text-align: left;\">JDK1.0</td>\n<td style=\"text-align: left;\">日期+时间</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">java.util.Calendar</td>\n<td style=\"text-align: left;\">JDK1.1</td>\n<td style=\"text-align: left;\"></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">java.sql.Date</td>\n<td style=\"text-align: left;\"></td>\n<td style=\"text-align: left;\">只包含日期</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">java.sql.Time</td>\n<td style=\"text-align: left;\"></td>\n<td style=\"text-align: left;\">只包含时间</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">java.sql.Timestamp</td>\n<td style=\"text-align: left;\"></td>\n<td style=\"text-align: left;\"></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">java.time.Instant</td>\n<td style=\"text-align: left;\">JDK1.8</td>\n<td style=\"text-align: left;\"></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">java.time.LocalTime</td>\n<td style=\"text-align: left;\">JDK1.8</td>\n<td style=\"text-align: left;\"></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">java.time.LocalDate</td>\n<td style=\"text-align: left;\">JDK1.8</td>\n<td style=\"text-align: left;\"></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">java.time.OffsetTime</td>\n<td style=\"text-align: left;\">JDK1.8</td>\n<td style=\"text-align: left;\"></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">java.time.OffsetDateTime</td>\n<td style=\"text-align: left;\">JDK1.8</td>\n<td style=\"text-align: left;\"></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">java.time.ZonedDateTime</td>\n<td style=\"text-align: left;\">JDK1.8</td>\n<td style=\"text-align: left;\"></td>\n</tr>\n</tbody>\n</table>\n<p>在Java8之前，我们通常用<code>java.util.Date</code>来表示时间，虽然没啥需求实现不了的，但有着以下的问题：</p>\n<ul>\n<li>时间类不统一，<code>java.util</code>和<code>java.sql</code>包中都有关于时间的类，而时间格式化的又在<code>java.text</code>包中，有点乱的很</li>\n<li>所有时间的类都是mutable的，非线程安全</li>\n</ul>\n<p>所以Java8开始对时间进行了修改，使用起来将更加方便。通常来讲，对于需要处理时区问题的系统，<code>OffsetDateTime</code>是一个较好的选择，即包含了时间信息，又包含了时区的信息，可以得到准确的时间表述。官方文档中也建议使用：</p>\n<blockquote>\n<p>It is intended that ZonedDateTime or Instant is used to model data in simpler applications. This class may be used when modeling date-time concepts in more detail, or when communicating to a database or in a network protocol.</p>\n</blockquote>\n<p>在处理类似时间转换的时候，可以借助<code>ZonedDateTime</code>来实现。例如有一个<code>yyyyMMddHHmmss</code>格式的时间，但该时间是<code>CST</code>时间，这个时间有如下的特点：</p>\n<ul>\n<li>在夏季时间相当于utc+5</li>\n<li>在冬季相当于utc+6</li>\n</ul>\n<p>而每年会有一个时间点去切换这个夏季时间和冬季时间（称之为day-saving)，而且不是一个固定的日期（大致相当于按照第几个星期几来算的），要想把这个时间转换为标准的时间描述，可以采取这样的方式:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a>LocalDateTime localDateTime = LocalDateTime.<span class=\"fu\">parse</span>(</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a>    <span class=\"st\">&quot;20191010095425&quot;</span>, DateTimeFormatter.<span class=\"fu\">ofPattern</span>(<span class=\"st\">&quot;yyyyMMddHHmmss&quot;</span>));</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>ZonedDateTime zonedDateTime = ZonedDateTime.<span class=\"fu\">of</span>(</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>    localDateTime, <span class=\"bu\">TimeZone</span>.<span class=\"fu\">getTimeZone</span>(<span class=\"st\">&quot;CST&quot;</span>));</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>OffsetDateTime result = zonedDateTime</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>    .<span class=\"fu\">toOffsetDateTime</span>()</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a>    .<span class=\"fu\">withOffsetSameInstant</span>(ZoneOffset.<span class=\"fu\">UTC</span>);</span></code></pre></div>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/30234594/whats-the-difference-between-java-8-zoneddatetime-and-offsetdatetime\" target=\"_blank\" rel=\"noopener\">What's the difference between java 8 ZonedDateTime and OffsetDateTime?</a></li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/OffsetDateTime.html\" target=\"_blank\" rel=\"noopener\">OffsetDateTime</a></li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/ZonedDateTime.html\" target=\"_blank\" rel=\"noopener\">ZonedDateTime</a></li>\n</ul>\n","categories":["Programing","Java"]},{"title":"理解Java并发(2)：ThreadPoolExecutor解析","url":"/it/java/java_thread_pool_executor/","content":"<p>使用多线程技术可以有效的利用CPU时间，在同一个时间内完成更多的任务，但同时值得注意的是，线程创建本身也是有开销的，线程池使得我们可以重复的利用已经存在的线程，从而节省这一部分的开销，提高程序的效率。</p>\n<a id=\"more\"></a>\n<h1 id=\"线程数的限制\">线程数的限制</h1>\n<p>首先一个问题是，我们在创建新的线程的时候，是不是线程越多就越好呢？实际上是不可能无限的创建新的线程的，总会有个限制，那么问题是这个限制是多大，或者说取决于什么呢？</p>\n<h2 id=\"操作系统的最大线程数\">操作系统的最大线程数</h2>\n<p>首先希望搞清楚的一个问题就是，到底我们可以创建多少个线程呢？在linux上，可以通过以下的方式查看系统的最大线程数限制：</p>\n<pre><code># cat /proc/sys/kernel/threads-max\n15734\n# ulimit -v\nunlimited</code></pre>\n<p>据说是按照这个公式计算出来的:</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a>max_threads = mempages / (<span class=\"dv\">8</span> * THREAD_SIZE / PAGE_SIZE);</span></code></pre></div>\n<p>在windows上也比较类似，总结来说就是，每个系统的最大线程数都不尽相同，不仅与系统有关还与内存大小以及用户的设置有关系。</p>\n<h2 id=\"jvm限制\">JVM限制</h2>\n<p>JVM本身貌似没有对线程数进行限制，但同样不能无限制的创建线程否则会出现<code>java.lang.OutOfMemoryError: unable to create new native thread</code>。在JVM中有以下的一些参数可能会影响能创建的线程数：</p>\n<ul>\n<li>-Xms 设置堆的最小值</li>\n<li>-Xmx 设置堆的最大值</li>\n<li>-Xss 设置每个线程的stack大小</li>\n</ul>\n<p>因为一个机器上的内存是一定的，所以如果<code>-Xss</code>设置的越大，单个线程所占用的栈空间越大，那么能创建的线程数就越少。一个比较有趣的事实是，能创建的最大线程数是跟<code>-Xmx</code>的值负相关的，即你设置的堆越大，反而能创建的最大线程数越少！这是别人的测试结果：</p>\n<pre><code>2 mb --&gt; 5744 threads\n4 mb --&gt; 5743 threads\n...\n768 mb --&gt; 3388 threads\n1024 mb --&gt; 2583 threads</code></pre>\n<p>原因就是堆空间越大，那么机器上剩下的内存就越少，即可以用来分配给线程栈上的内存就越少，所以会出现这样的结果。</p>\n<h1 id=\"线程池\">线程池</h1>\n<p>在Java中线程的启动和停止是有开销的。这个开销主要包括：</p>\n<ul>\n<li>为线程开辟栈空间（例如OpenJDK6在Linux上会使用<code>pthread_create</code>来创建线程，内部使用<code>mmap</code>分配内存)</li>\n<li>通过操作系统的调用来创建和注册本地线程</li>\n<li>保存线程的相关信息（JVM/native thread descriptors)到JVM中</li>\n</ul>\n<p>根据网上的测试来看，通常使用线程池可以获得大幅的性能提升（亲测至少15倍）。而使用线程池相当于重用了已有的线程，避免了这部分开销。当任务越多越频繁的情况下，这部分开销越不可小觑。</p>\n<h2 id=\"threadpoolexecutor\">ThreadPoolExecutor</h2>\n<p>ThreadPoolExecutor 是一个利用线程池技术实现的多任务处理器，它的申明如下：</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a><span class=\"kw\">public</span> <span class=\"bu\">ThreadPoolExecutor</span>(<span class=\"dt\">int</span> corePoolSize,</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\"></a>                            <span class=\"dt\">int</span> maximumPoolSize,</span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\"></a>                            <span class=\"dt\">long</span> keepAliveTime,</span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\"></a>                            <span class=\"bu\">TimeUnit</span> unit,</span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\"></a>                            <span class=\"bu\">BlockingQueue</span>&lt;<span class=\"bu\">Runnable</span>&gt; workQueue) {</span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\"></a>    <span class=\"kw\">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\"></a>            <span class=\"bu\">Executors</span>.<span class=\"fu\">defaultThreadFactory</span>(), defaultHandler);</span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\"></a>}</span></code></pre></div>\n<p>乍一看有很多个参数，那么该如何去配置呢？</p>\n<h3 id=\"corepoolsize-maximumpoolsize\">CorePoolSize / MaximumPoolSize</h3>\n<p>线程池会根据这两个参数去管理池中的线程。当一个新的任务提交的时候，会遵循如下的规则：</p>\n<ul>\n<li>如果池中线程数小于corePoolSize，哪怕有空闲的线程也会创建一个新的线程来</li>\n<li>当吃中线程数超过corePoolSize但是小于MaximumPoolSize的时候，只有当workQueue满的时候才会创建新的线程</li>\n</ul>\n<p>所以当corePoolSize和MaximumPoolSize一样的时候，实际上就是一个固定大小的线程池，相当于使用<code>Executors.newFixedThreadPool</code>:</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb5-1\"><a href=\"#cb5-1\"></a><span class=\"kw\">public</span> <span class=\"dt\">static</span> <span class=\"bu\">ExecutorService</span> <span class=\"fu\">newFixedThreadPool</span>(<span class=\"dt\">int</span> nThreads) {</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\"></a>    <span class=\"kw\">return</span> <span class=\"kw\">new</span> <span class=\"bu\">ThreadPoolExecutor</span>(nThreads, nThreads,</span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\"></a>                                  <span class=\"dv\">0L</span>, <span class=\"bu\">TimeUnit</span>.<span class=\"fu\">MILLISECONDS</span>,</span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\"></a>                                  <span class=\"kw\">new</span> <span class=\"bu\">LinkedBlockingQueue</span>&lt;<span class=\"bu\">Runnable</span>&gt;());</span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\"></a>}</span></code></pre></div>\n<p>池中的线程默认只要当提交了新任务的时候才会创建，如果希望提前创建线程可以使用<code>prestartCoreThread</code>或者<code>prestartAllCoreThreads</code>。</p>\n<h3 id=\"keep-alive-时间\">Keep-alive 时间</h3>\n<p>当池中的线程数多余corePoolSize的时候，超出部分的线程会在空闲一段时间之后被终止掉，这个时间就是keepAliveTime。如果设置为0那么一旦超出部分运行结束之后就会被终止掉，反之如果设置为<code>Long.MAX_VALUE</code>那么空闲线程就会一直存活。</p>\n<p>默认情况下，只有超出corePoolSize的线程才会受到这个存活时间的影响，如果希望对于核心线程也能超时终止，那么可以使用<code>allowCoreThreadTimeOut</code>来控制。</p>\n<h3 id=\"workqueue\">workQueue</h3>\n<p>工作队列用来持有提交的任务。规则如下：</p>\n<ul>\n<li>如果当前池中的线程少于corePoolSize，则创建新的线程</li>\n<li>如果大于corePoolSize，则倾向于将任务加入到workQueue中</li>\n<li>如果无法将任务加入到队列中，则会创建新的线程，直到池中的线程数达到maximumPoolSize</li>\n<li>如果超过maximumPoolSize，那么将会拒绝提交的任务</li>\n</ul>\n<p>对于队列的选择也可以使用不同的策略：</p>\n<ul>\n<li>使用<code>SynchronousQueue</code>可以直接将任务从队列转手到线程池，这个参数要配合将maximumPoolSize设置为无限大来配合使用。因为这个朝这个队列中插入一条数据将会阻塞一直到它被消费，也就是说读写操作要配套，实际上就是进行了一个数据交换，根本没有在队列中实际存储任务。如果maximumPoolSize太小可能会导致任务被拒绝。</li>\n<li>使用无界的队列例如<code>LinkedBlockingQueue</code>，那么一旦线程超过corePoolSize的时候新线程都会被加入到队列中，也就是说maximumPoolSize根本不会生效了。</li>\n<li>使用有界队列例如<code>ArrayBlockingQueue</code>，超过队列数的新任务将创建新的线程。那么这时候队列大小和线程数上限需要权衡配合。</li>\n</ul>\n<p>References:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/344203/maximum-number-of-threads-per-process-in-linux\" target=\"_blank\" rel=\"noopener\">Maximum number of threads per process in Linux?</a></li>\n<li><a href=\"https://eknowledger.wordpress.com/2012/05/01/max-number-of-threads-per-windows-process/\" target=\"_blank\" rel=\"noopener\">Max Number of Threads Per Windows Process</a></li>\n<li><a href=\"http://baddotrobot.com/blog/2009/02/26/less-is-more/\" target=\"_blank\" rel=\"noopener\">Less is More</a></li>\n<li><a href=\"https://stackoverflow.com/questions/5483047/why-is-creating-a-thread-said-to-be-expensive\" target=\"_blank\" rel=\"noopener\">Why is creating a Thread said to be expensive?</a></li>\n</ul>\n","categories":["Programing","Java"]},{"title":"理解Java并发(1)：基本机制","url":"/it/java/java_cocurrent_basics/","content":"<p>线程是操作系统中进行运算调度的最小单位，它是一个单一顺序的控制流，不论是对于单核还是多核的CPU，都能比较有效的提高程序的吞吐率。在Java中，创建一个线程的唯一方法是创建一个<code>Thread</code>类的实例，并调用<code>start()</code>方法以启动该线程。然而当多个线程同时执行时，如何保证线程之间是按照我们期待的方式在运行呢？Java提供了多种机制来保证多个线程之间的交互。 <a id=\"more\"></a></p>\n<h1 id=\"同步synchronization与监视器monitor机制\">同步(Synchronization)与监视器(Monitor)机制</h1>\n<p>显而易见最基本最常见的和多线程有关的就是同步<code>synchronized</code>关键字了，它底层是使用Monitor实现的。那么究竟什么是<code>Monitor</code>呢？根据JavaSE Specification的描述，在Java中，每一个对象都有一个与之关联的monitor，允许线程可以去<code>lock</code>或者<code>unlock</code>这个monitor。实际上：</p>\n<ul>\n<li><code>monitor</code>是独立于Java语言之上的一个概念（\b没想到还有另外一个名字<code>管程</code>），保证在运行线程之前获取互斥锁</li>\n<li>在Java中，任何对象(<code>java.lang.Object</code>)都可以允许作为一个monitor，所以会有<code>wait</code>、<code>notify</code>之类的方法</li>\n</ul>\n<p><code>synchronized</code>可以作用于代码块或者方法上。如果作用在代码块上，它会尝试去lock这个对象的monitor，如果不成功将会等待直到lock成功。而当执行完毕后，无论是否出现异常，都将会释放这个锁。</p>\n<p>如果作用在方法上，唯一的区别在于，如果是实例方法，那么将使用这个实例作为monitor，也就是<code>this</code>；如果是静态方法，那么使用的是所在类的<code>Class</code>对象。</p>\n<h1 id=\"waitnotify\">Wait/Notify</h1>\n<p>每一个Object都包含一个等待线程的集合(Wait set)。当对象创建的时候，这个队列是空的，当调用<code>Object.wait()</code>、<code>Object.nofity()</code>以及<code>Object.nofityAll()</code>方法的时候，会自动添加或者移除队列中的线程。或者当线程的中断状态发生改变的时候，也会引起变化。</p>\n<h2 id=\"wait\">Wait</h2>\n<p>调用<code>wait</code>方法将使当前线程休眠直到另一个线程通过<code>notify</code>或者<code>notifyAll</code>来唤醒。当前线程必须持有该对象的锁，调用<code>wait</code>后即释放锁。当线程被唤醒时，需要重新取得锁并继续执行。然而，线程被唤醒有可能是因为“虚假唤醒”（spurious wakeups）导致，所以通常都需要将<code>wait</code>检测的逻辑包括在一个loop中：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"kw\">synchronized</span> (obj) {</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a>    <span class=\"kw\">while</span> (&lt;condition does not hold&gt;)</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>        obj.<span class=\"fu\">wait</span>();</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>    <span class=\"co\">// Perform action appropriate to condition</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>}</span></code></pre></div>\n<p>所谓虚假唤醒就是说，本来不该唤醒的时候唤醒了。究其原因是在操作系统层面就性能和正确性做出了权衡，放弃了正确性而选择让程序自己去处理。</p>\n<blockquote>\n<p>Spurious wakeups may sound strange, but on some multiprocessor systems, making condition wakeup completely predictable might substantially slow all condition variable operations.</p>\n</blockquote>\n<h2 id=\"notify\">Notify</h2>\n<p>调用<code>notify</code>将唤醒一个正在等待持有该对象锁的线程，如果有多个对象在等待的话，将会随机唤醒其中的一个。</p>\n<p>被唤醒的线程必须等到当前线程释放锁之后，才能开始执行；也就是说<code>notify</code>执行完之后，并不会立即释放锁，而是需要等到同步块执行完。</p>\n<p>如果调用<code>notifyAll</code>的话，所有等待的线程将被唤醒，但同一时间有且仅有一个线程能取到锁并继续执行。</p>\n<h2 id=\"interruption\">Interruption</h2>\n<p>当调用<code>Thread.interrupt</code>时，线程的中断状态呗设置为true。如果该线程在某个对象的waitSet中，则将会被从等待队列中移除，并在取得锁之后抛出<code>InterruptedException</code>。实际上，如果线程正在执行的是一些底层的blocking函数例如<code>Thread.sleep()</code>, <code>Thread.join()</code>, 或者 <code>Object.wait()</code>的时候，那么线程将抛出<code>InterruptedException</code>，并且<code>interrupted</code>状态会被清除；否则只会将<code>interrupted</code>状态设置为<code>true</code>。</p>\n<p>如果一个处于等待队列中的线程同时收到中断和通知，那么可能的行为是：</p>\n<ul>\n<li>先收到通知，正常唤醒。这时候，<code>Thread.interrupted</code>将为<code>true</code>，</li>\n<li>抛出<code>InterruptedException</code>并退出</li>\n</ul>\n<p>同样，如果有多个线程处于对象m的等待队列中，然后另一个线程执行<code>m.notify</code>，那么可能：</p>\n<ul>\n<li>至少有一个线程正常退出wait</li>\n<li>所有处于等待队列中的线程抛出<code>InterruptedException</code>而退出</li>\n</ul>\n<p>需要注意的是，当一个线程中断了另一个线程的时候，被中断的线程并不是需要立即停止执行，程序可以选择在停止之前做一些清理工作之类的。通常如果捕获了<code>InterruptedException</code>只需要重新抛出即可，有些时候不能重新抛出的时候，需要将当前线程标记为<code>interrupted</code>使得上层堆栈的程序可以选择处理，</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"kw\">try</span> {</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a>    <span class=\"kw\">while</span> (<span class=\"kw\">true</span>) {</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a>        Task task = queue.<span class=\"fu\">take</span>(<span class=\"dv\">10</span>, <span class=\"bu\">TimeUnit</span>.<span class=\"fu\">SECONDS</span>);</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a>        task.<span class=\"fu\">execute</span>();</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a>    }</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a>}<span class=\"kw\">catch</span> (<span class=\"bu\">InterruptedException</span> e) { </span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a>    <span class=\"bu\">Thread</span>.<span class=\"fu\">currentThread</span>().<span class=\"fu\">interrupt</span>();</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\"></a>}</span></code></pre></div>\n<h1 id=\"线程的生命周期\">线程的生命周期</h1>\n<p>每一个线程有一个生命周期，包含多个状态：</p>\n<ul>\n<li>New: 线程创建还未开始执行，线程创建完之后即为此状态</li>\n<li>Runnable: 在JVM中正在执行的状态。当线程start之后，即变为runnable状态</li>\n<li>Blocked: 线程等待获取锁而被阻塞</li>\n<li>Waiting: 线程等待其他线程</li>\n<li>Timed Waiting: 有超时的等待</li>\n<li>Terminated: 线程已被退出</li>\n</ul>\n<figure>\n<img src=\"https://www.baeldung.com/wp-content/uploads/2018/02/Life_cycle_of_a_Thread_in_Java.jpg\" alt=\"\" /><figcaption>Life cycle of a thread</figcaption>\n</figure>\n<h1 id=\"sleep-yield\">Sleep / Yield</h1>\n<p>当调用线程的<code>sleep</code>方法将导致线程暂时停止执行，值得注意的是并不会释放锁。而当线程的<code>yield</code>方法被调用时，意味着通知CPU当前线程可以“暂缓”执行的，实际很少使用。</p>\n<blockquote>\n<p>It is rarely appropriate to use this method. It may be useful for debugging or testing purposes, where it may help to reproduce bugs due to race conditions.</p>\n</blockquote>\n<h1 id=\"context-switching\">Context switching</h1>\n<p>在多线程中，CPU会为每个线程分配时间片区执行，即执行当前线程的一部分操作之后，操作系统需要从当前线程切换到其他线程中去。通常在下列的情况下会出现context switching:</p>\n<ul>\n<li>多任务处理（即多个线程正常执行）</li>\n<li>中断，</li>\n</ul>\n<p>那么在这个切换的过程中，会发生一些什么事情呢？</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html\" target=\"_blank\" rel=\"noopener\">Chapter 17. Threads and Locks</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3362303/whats-a-monitor-in-java\" target=\"_blank\" rel=\"noopener\">What's a monitor in Java?</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E7%9B%A3%E8%A6%96%E5%99%A8_(%E7%A8%8B%E5%BA%8F%E5%90%8C%E6%AD%A5%E5%8C%96)\" target=\"_blank\" rel=\"noopener\">管程</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1050592/do-spurious-wakeups-in-java-actually-happen\" target=\"_blank\" rel=\"noopener\">Do spurious wakeups in Java actually happen?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/8594591/why-does-pthread-cond-wait-have-spurious-wakeups\" target=\"_blank\" rel=\"noopener\">Why does pthread_cond_wait have spurious wakeups?</a></li>\n<li><a href=\"https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html\" target=\"_blank\" rel=\"noopener\">Dealing with InterruptedException</a></li>\n<li><a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/Thread.State.html\" target=\"_blank\" rel=\"noopener\">Enum Thread.State</a></li>\n<li><a href=\"https://www.baeldung.com/java-thread-lifecycle\" target=\"_blank\" rel=\"noopener\">Life Cycle of a Thread in Java</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Context_switch\" target=\"_blank\" rel=\"noopener\">Context switch</a></li>\n<li><a href=\"https://blog.tsunanet.net/2010/11/how-long-does-it-take-to-make-context.html\" target=\"_blank\" rel=\"noopener\">How long does it take to make a context switch?</a></li>\n</ul>\n","categories":["Programing","Java"]},{"title":"Rust(1) 基本语法","url":"/it/rust/rust_lang_1_basic/","content":"<p>使用rust语言编写hello world再容易不过了：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"kw\">fn</span> main() <span class=\"op\">{</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a>    <span class=\"pp\">println!</span>(<span class=\"st\">&quot;Hello world!&quot;</span>);</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a><span class=\"op\">}</span></span></code></pre></div>\n<p>然后利用rustc编译器编译即可:</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"ex\">rustc</span> hell.rs -o hello.out <span class=\"kw\">&amp;&amp;</span> <span class=\"ex\">./hello.out</span></span></code></pre></div>\n<a id=\"more\"></a>\n<h1 id=\"可变mutable与不可变immutable\">可变(mutable)与不可变(immutable)</h1>\n<p>rust程序默认的变量是不可变的，类似Scala这种函数式编程的语言，鼓励用户使用immutable的变量。当然如果你非想要使用可变的对象也是支持的：</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"kw\">let</span> i = <span class=\"dv\">32</span>; <span class=\"co\">// immutable</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a><span class=\"kw\">let</span> <span class=\"kw\">mut</span> i = <span class=\"dv\">32</span>;</span></code></pre></div>\n<p>编译器会检查是否对不可变对象重新赋值:</p>\n<pre><code>  |\n4 |     let i = 10;\n  |         -\n  |         |\n  |         first assignment to `i`\n  |         help: make this binding mutable: `mut i`\n...\n7 |     i = 99;\n  |     ^^^^^^ cannot assign twice to immutable variable</code></pre>\n<p>那么，对于简单类型直接赋值会有问题，如果是复杂类型，如何呢？比如我们用一个不可变的字符串，然后去调用它的函数改变值，会发生生么情况呢？</p>\n<pre><code>--&gt; test.rs:5:5\n  |\n4 |     let s = String::from(&quot;hello&quot;);\n  |         - help: consider changing this to be mutable: `mut s`\n5 |     s.push_str(&quot; world!!!&quot;);\n  |     ^ cannot borrow as mutable\n</code></pre>\n<p>结果表明，rust依然保持对象是不可变的。看了一下这个方法的定义，有些蹊跷：</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb6-1\"><a href=\"#cb6-1\"></a><span class=\"kw\">pub</span> <span class=\"kw\">fn</span> push_str(&amp;<span class=\"kw\">mut</span> <span class=\"kw\">self</span>, string: &amp;<span class=\"dt\">str</span>) <span class=\"op\">{</span></span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\"></a>    <span class=\"kw\">self</span>.vec.extend_from_slice(string.as_bytes())</span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\"></a><span class=\"op\">}</span></span></code></pre></div>\n<p>具体怎么做到的，我们后面再来研究。</p>\n<h1 id=\"基本类型\">基本类型</h1>\n<p>rust跟大多数编译型语言一样是静态类型(statically typed)的语言，即所有的变量的类型在程序编译的时候就是已知的。在rust语言中，有着如下的基本类型：</p>\n<h2 id=\"标量类型scalar-types\">标量类型(Scalar types)</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">类型</th>\n<th style=\"text-align: center;\">长度</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">bool</td>\n<td style=\"text-align: center;\">1</td>\n<td>true/ false</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">char</td>\n<td style=\"text-align: center;\">4</td>\n<td>并不等同于Unicode</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">i8/u8</td>\n<td style=\"text-align: center;\">8</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">i16/u16</td>\n<td style=\"text-align: center;\">16</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">i32/u32</td>\n<td style=\"text-align: center;\">32</td>\n<td>i32是默认类型，通常拥有最快的速度</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">i64/u64</td>\n<td style=\"text-align: center;\">64</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">i128/u128</td>\n<td style=\"text-align: center;\">128</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">isize/usize</td>\n<td style=\"text-align: center;\">arch</td>\n<td>取决于机器架构，在32位机器上位32位，64位上位64位</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">f32</td>\n<td style=\"text-align: center;\">32</td>\n<td>浮点数使用IEEE-754标准</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">f64</td>\n<td style=\"text-align: center;\">64</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb7-1\"><a href=\"#cb7-1\"></a><span class=\"kw\">let</span> f = <span class=\"cn\">true</span>;</span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\"></a><span class=\"kw\">let</span> sum:<span class=\"dt\">i32</span> = <span class=\"dv\">100</span>;</span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\"></a><span class=\"kw\">let</span> heart_eyed_cat = <span class=\"ch\">&#39;😻&#39;</span>;</span></code></pre></div>\n<h2 id=\"复合类型compound-types\">复合类型(Compound types)</h2>\n<p>复合类型分为元组（Tuple）和数组。元组可以用来将不同类型的解构组合到一起：</p>\n<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb8-1\"><a href=\"#cb8-1\"></a><span class=\"kw\">let</span> t: (<span class=\"dt\">i32</span>, <span class=\"dt\">bool</span>) = (<span class=\"dv\">100</span>, <span class=\"cn\">false</span>);</span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\"></a></span>\n<span id=\"cb8-3\"><a href=\"#cb8-3\"></a><span class=\"kw\">let</span> (x, y) = t; <span class=\"co\">// 解构元组</span></span>\n<span id=\"cb8-4\"><a href=\"#cb8-4\"></a><span class=\"kw\">let</span> x = t.<span class=\"dv\">0</span>;    <span class=\"co\">// 或者通过序号访问</span></span></code></pre></div>\n<p>数组的与元组的区别在于数组中包含的都是同一种数据类型的值。</p>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb9-1\"><a href=\"#cb9-1\"></a><span class=\"kw\">let</span> a = <span class=\"op\">[</span><span class=\"dv\">1</span>, <span class=\"dv\">2</span>, <span class=\"dv\">3</span><span class=\"op\">]</span>;</span>\n<span id=\"cb9-2\"><a href=\"#cb9-2\"></a><span class=\"kw\">let</span> a: <span class=\"op\">[</span><span class=\"dt\">i32</span>; <span class=\"dv\">5</span><span class=\"op\">]</span> = <span class=\"op\">[</span><span class=\"dv\">1</span>, <span class=\"dv\">2</span>, <span class=\"dv\">3</span>, <span class=\"dv\">4</span>, <span class=\"dv\">5</span><span class=\"op\">]</span>; <span class=\"co\">// 显示声明一个数组</span></span>\n<span id=\"cb9-3\"><a href=\"#cb9-3\"></a><span class=\"kw\">let</span> b = <span class=\"op\">[</span><span class=\"dv\">10</span>; <span class=\"dv\">5</span><span class=\"op\">]</span>;                   <span class=\"co\">// 声明初始值为10、长度为5的数组</span></span></code></pre></div>\n<p>值得注意的是，在rust中元组和数组都是固定长度的，一旦声明以后就不可以更改。如果非要可变长度的集合，那么可以考虑使用标准库中的<code>vector</code>。并且数组中的元素也是不可以更改的，如果尝试去更改一个不可变的对象编译时会出错：</p>\n<pre><code>6 |     let b = [100; 5];\n  |         - help: consider changing this to be mutable: `mut b`\n7 |     b[1] = 1024;\n  |     ^^^^^^^^^^^ cannot assign</code></pre>\n<p>这和一些其他的语言(例如Java中的final)是有区别的。</p>\n<p>数组中如果如果声明的长度和和实际值的长度不一样会怎样呢？rust在编译时就会出错：</p>\n<pre><code> --&gt; hell.rs:11:23\n   |\n11 |     let a: [i32; 3] = [1];\n   |                       ^^^ expected an array with a fixed size of 3 elements, found one with 1 element</code></pre>\n<p>另外，rust程序会在运行时对数组的边界进行检查，如果越界访问数组将抛出错误而结束程序，而不是返回一个错误的内存。</p>\n<h1 id=\"方法\">方法</h1>\n<p>在rust中定义一个方法使用<code>fn</code>关键字定义：</p>\n<div class=\"sourceCode\" id=\"cb12\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb12-1\"><a href=\"#cb12-1\"></a><span class=\"kw\">fn</span> foo(i: <span class=\"dt\">i32</span>, j: <span class=\"dt\">i32</span>) <span class=\"op\">{</span></span>\n<span id=\"cb12-2\"><a href=\"#cb12-2\"></a>    <span class=\"kw\">let</span> sum = i + j</span>\n<span id=\"cb12-3\"><a href=\"#cb12-3\"></a><span class=\"op\">}</span></span>\n<span id=\"cb12-4\"><a href=\"#cb12-4\"></a></span>\n<span id=\"cb12-5\"><a href=\"#cb12-5\"></a><span class=\"co\">// 带有返回值的方法</span></span>\n<span id=\"cb12-6\"><a href=\"#cb12-6\"></a><span class=\"kw\">fn</span> sum(i: <span class=\"dt\">i32</span>, j: <span class=\"dt\">i32</span>) -&gt; <span class=\"dt\">i32</span> <span class=\"op\">{</span></span>\n<span id=\"cb12-7\"><a href=\"#cb12-7\"></a>    i + j</span>\n<span id=\"cb12-8\"><a href=\"#cb12-8\"></a><span class=\"op\">}</span></span></code></pre></div>\n<p>在rust中方法是第一类值，意味着你可以这样操作：</p>\n<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb13-1\"><a href=\"#cb13-1\"></a><span class=\"kw\">let</span> fn_s  = sum;</span>\n<span id=\"cb13-2\"><a href=\"#cb13-2\"></a><span class=\"kw\">let</span> s = fn_s(i, j);</span></code></pre></div>\n<p>另外，方法中包含在大括号中的语句块，被称作是表达式(expression)，可以这样用：</p>\n<div class=\"sourceCode\" id=\"cb14\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb14-1\"><a href=\"#cb14-1\"></a><span class=\"kw\">let</span> a = <span class=\"op\">{</span></span>\n<span id=\"cb14-2\"><a href=\"#cb14-2\"></a>   e + <span class=\"dv\">10</span></span>\n<span id=\"cb14-3\"><a href=\"#cb14-3\"></a><span class=\"op\">}</span>;</span>\n<span id=\"cb14-4\"><a href=\"#cb14-4\"></a><span class=\"pp\">println!</span>(<span class=\"st\">&quot;{}&quot;</span>, a);</span></code></pre></div>\n<h1 id=\"流程控制\">流程控制</h1>\n<h2 id=\"if语句\">if语句</h2>\n<p>rust的if语句和其他语言基本类似，稍微有一点区别：</p>\n<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb15-1\"><a href=\"#cb15-1\"></a><span class=\"kw\">if</span> e % <span class=\"dv\">2</span> == <span class=\"dv\">0</span> <span class=\"op\">{</span>        <span class=\"co\">// if条件后面不用写小括号</span></span>\n<span id=\"cb15-2\"><a href=\"#cb15-2\"></a>    <span class=\"pp\">println!</span>(<span class=\"st\">&quot;{}&quot;</span>, e);</span>\n<span id=\"cb15-3\"><a href=\"#cb15-3\"></a><span class=\"op\">}</span> <span class=\"kw\">else</span> <span class=\"kw\">if</span> e % <span class=\"dv\">3</span> == <span class=\"dv\">0</span> <span class=\"op\">{</span> <span class=\"co\">// 但是后面的语句块必须包含在大括号之中，哪怕只有一行</span></span>\n<span id=\"cb15-4\"><a href=\"#cb15-4\"></a>    <span class=\"pp\">println!</span>(<span class=\"st\">&quot;{} % 3 ==0&quot;</span>, e);</span>\n<span id=\"cb15-5\"><a href=\"#cb15-5\"></a><span class=\"op\">}</span> <span class=\"kw\">else</span> <span class=\"op\">{</span></span>\n<span id=\"cb15-6\"><a href=\"#cb15-6\"></a>    <span class=\"pp\">println!</span>(<span class=\"st\">&quot;:p&quot;</span>);</span>\n<span id=\"cb15-7\"><a href=\"#cb15-7\"></a><span class=\"op\">}</span></span></code></pre></div>\n<h2 id=\"条件赋值\">条件赋值</h2>\n<p>因为if语句本身是一个表达式，所以可以把if和let联合在一起来使用，也就是条件赋值：</p>\n<div class=\"sourceCode\" id=\"cb16\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb16-1\"><a href=\"#cb16-1\"></a><span class=\"kw\">let</span> a = <span class=\"kw\">if</span> condition <span class=\"op\">{</span></span>\n<span id=\"cb16-2\"><a href=\"#cb16-2\"></a>    <span class=\"dv\">5</span></span>\n<span id=\"cb16-3\"><a href=\"#cb16-3\"></a><span class=\"op\">}</span> <span class=\"kw\">else</span> <span class=\"op\">{</span></span>\n<span id=\"cb16-4\"><a href=\"#cb16-4\"></a>    <span class=\"dv\">6</span></span>\n<span id=\"cb16-5\"><a href=\"#cb16-5\"></a><span class=\"op\">}</span>;</span></code></pre></div>\n<p>当然前提是不同的分支下的语句要是一样的类型，否则编译器会检测出错误。</p>\n<h2 id=\"循环\">循环</h2>\n<p>rust的<code>loop</code>关键字支持创建一个循环:</p>\n<div class=\"sourceCode\" id=\"cb17\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb17-1\"><a href=\"#cb17-1\"></a><span class=\"kw\">let</span> <span class=\"kw\">mut</span> i = <span class=\"dv\">0</span>;</span>\n<span id=\"cb17-2\"><a href=\"#cb17-2\"></a><span class=\"kw\">loop</span> <span class=\"op\">{</span></span>\n<span id=\"cb17-3\"><a href=\"#cb17-3\"></a>    i += <span class=\"dv\">1</span>;</span>\n<span id=\"cb17-4\"><a href=\"#cb17-4\"></a>    <span class=\"pp\">println!</span>(<span class=\"st\">&quot;-&gt;{}&quot;</span>, i);</span>\n<span id=\"cb17-5\"><a href=\"#cb17-5\"></a><span class=\"op\">}</span></span></code></pre></div>\n<p>基本上这就是一个死循环了。不知道为啥要定义这样一个奇葩的关键字。索性我们可以像其他编程语言一样<code>break</code>。值得注意的是，跟条件赋值一样，loop语句也是可以和let一起来赋值的，像下面这样：</p>\n<div class=\"sourceCode\" id=\"cb18\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb18-1\"><a href=\"#cb18-1\"></a><span class=\"kw\">let</span> s = <span class=\"kw\">loop</span> <span class=\"op\">{</span></span>\n<span id=\"cb18-2\"><a href=\"#cb18-2\"></a>    i += <span class=\"dv\">1</span>;</span>\n<span id=\"cb18-3\"><a href=\"#cb18-3\"></a>    <span class=\"pp\">println!</span>(<span class=\"st\">&quot;-&gt;{}&quot;</span>, i);</span>\n<span id=\"cb18-4\"><a href=\"#cb18-4\"></a>    <span class=\"kw\">if</span>(i &gt; <span class=\"dv\">100</span>) <span class=\"op\">{</span></span>\n<span id=\"cb18-5\"><a href=\"#cb18-5\"></a>        <span class=\"kw\">break</span> i;</span>\n<span id=\"cb18-6\"><a href=\"#cb18-6\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb18-7\"><a href=\"#cb18-7\"></a><span class=\"op\">}</span>;</span>\n<span id=\"cb18-8\"><a href=\"#cb18-8\"></a><span class=\"pp\">println!</span>(<span class=\"st\">&quot;s = {}&quot;</span>, s); <span class=\"co\">// s = 101</span></span></code></pre></div>\n<p>除了这个<code>loop</code>外，也可以“正常的”像其他语言一样，使用<code>while</code>和<code>for</code>进行条件循环：</p>\n<div class=\"sourceCode\" id=\"cb19\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb19-1\"><a href=\"#cb19-1\"></a><span class=\"kw\">while</span> i &lt; <span class=\"dv\">1000</span> <span class=\"op\">{</span>    <span class=\"co\">// 不用写小括号</span></span>\n<span id=\"cb19-2\"><a href=\"#cb19-2\"></a>    i += <span class=\"dv\">1</span>;</span>\n<span id=\"cb19-3\"><a href=\"#cb19-3\"></a><span class=\"op\">}</span></span>\n<span id=\"cb19-4\"><a href=\"#cb19-4\"></a></span>\n<span id=\"cb19-5\"><a href=\"#cb19-5\"></a><span class=\"kw\">for</span> e <span class=\"kw\">in</span> a.iter() <span class=\"op\">{</span> <span class=\"co\">// 使用for循环遍历数组</span></span>\n<span id=\"cb19-6\"><a href=\"#cb19-6\"></a>    <span class=\"pp\">println!</span>(<span class=\"st\">&quot;{}&quot;</span>, e); </span>\n<span id=\"cb19-7\"><a href=\"#cb19-7\"></a><span class=\"op\">}</span></span>\n<span id=\"cb19-8\"><a href=\"#cb19-8\"></a></span>\n<span id=\"cb19-9\"><a href=\"#cb19-9\"></a><span class=\"co\">// for i in (1..10).rev()</span></span>\n<span id=\"cb19-10\"><a href=\"#cb19-10\"></a><span class=\"co\">// 使用rev()反转顺序</span></span>\n<span id=\"cb19-11\"><a href=\"#cb19-11\"></a><span class=\"kw\">for</span> i <span class=\"kw\">in</span> (<span class=\"dv\">1</span>..<span class=\"dv\">10</span>) <span class=\"op\">{</span></span>\n<span id=\"cb19-12\"><a href=\"#cb19-12\"></a>    <span class=\"pp\">println!</span>(<span class=\"st\">&quot;{}&quot;</span>, i);</span>\n<span id=\"cb19-13\"><a href=\"#cb19-13\"></a><span class=\"op\">}</span></span></code></pre></div>\n<h1 id=\"rust语言的一些惯例\">rust语言的一些惯例</h1>\n<h2 id=\"命名方式\">命名方式</h2>\n<p>rust中推荐使用蛇形命名(snake case)来作为方法和变量的命名方式，所有的标识符都是小写且使用下划线分隔，例如：</p>\n<div class=\"sourceCode\" id=\"cb20\"><pre class=\"sourceCode rust\"><code class=\"sourceCode rust\"><span id=\"cb20-1\"><a href=\"#cb20-1\"></a><span class=\"kw\">let</span> foo_bar = <span class=\"dv\">1</span>;</span>\n<span id=\"cb20-2\"><a href=\"#cb20-2\"></a></span>\n<span id=\"cb20-3\"><a href=\"#cb20-3\"></a><span class=\"kw\">fn</span> print_info() <span class=\"op\">{</span></span>\n<span id=\"cb20-4\"><a href=\"#cb20-4\"></a></span>\n<span id=\"cb20-5\"><a href=\"#cb20-5\"></a><span class=\"op\">}</span></span></code></pre></div>\n","categories":["Programing","Rust"]},{"title":"C++中的NRVO","url":"/it/c/nrvo_in_cplusplus/","content":"<p>对于C++这种需要精细管理对象的语言来说有时候真是比较复杂，一个看似简单的问题一直在困惑着我：到底可不可以在方法中返回局部变量呢？ <a id=\"more\"></a></p>\n<h1 id=\"可以返回临时变量\">可以返回临时变量</h1>\n<p>答案是肯定的，如果我们在一个方法中返回了临时变量，这个临时变量实际上是在栈里面的，当执行完方法后栈就销毁了，那么为什么我们还可以这样做呢？来看一个例子：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode cpp\"><code class=\"sourceCode cpp\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"pp\">#include </span><span class=\"im\">&lt;iostream&gt;</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a><span class=\"kw\">using</span> <span class=\"kw\">namespace</span> std;</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a><span class=\"kw\">class</span> Value {</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>    <span class=\"kw\">public</span>:</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>        Value(<span class=\"dt\">int</span> _m):m(_m) { <span class=\"bu\">std::</span>cout &lt;&lt; <span class=\"st\">&quot;test constructor&quot;</span> &lt;&lt; m &lt;&lt; <span class=\"bu\">std::</span>endl; }</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a>        Value(<span class=\"at\">const</span> Value&amp; t) { </span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\"></a>            <span class=\"bu\">std::</span>cout &lt;&lt; <span class=\"st\">&quot;test copy constructor&quot;</span> &lt;&lt; m &lt;&lt; <span class=\"bu\">std::</span>endl; </span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\"></a>            <span class=\"kw\">this</span>-&gt;m = t.m;</span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\"></a>        }</span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\"></a>        ~Value() { <span class=\"bu\">std::</span>cout &lt;&lt; <span class=\"st\">&quot;test destructor&quot;</span> &lt;&lt; m &lt;&lt; <span class=\"bu\">std::</span>endl; }</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\"></a>        <span class=\"dt\">void</span> print() { <span class=\"bu\">std::</span>cout &lt;&lt; <span class=\"st\">&quot;m:&quot;</span> &lt;&lt; m &lt;&lt; <span class=\"bu\">std::</span>endl; }</span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\"></a>    <span class=\"kw\">private</span>:</span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\"></a>        <span class=\"dt\">int</span> m;</span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\"></a>};</span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\"></a></span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\"></a><span class=\"kw\">class</span> Producer {</span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\"></a><span class=\"kw\">public</span>:</span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\"></a>    Value produce(<span class=\"dt\">int</span> i) {</span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\"></a>        Value t(i);</span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\"></a>        <span class=\"cf\">return</span> t;</span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\"></a>    }</span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\"></a>};</span>\n<span id=\"cb1-24\"><a href=\"#cb1-24\"></a></span>\n<span id=\"cb1-25\"><a href=\"#cb1-25\"></a><span class=\"dt\">int</span> main(<span class=\"dt\">int</span> argc, <span class=\"dt\">char</span>* argv[]) {</span>\n<span id=\"cb1-26\"><a href=\"#cb1-26\"></a>    <span class=\"bu\">std::</span>cout &lt;&lt; <span class=\"st\">&quot;Hello world!&quot;</span> &lt;&lt; <span class=\"bu\">std::</span>endl;</span>\n<span id=\"cb1-27\"><a href=\"#cb1-27\"></a>    Producer p;</span>\n<span id=\"cb1-28\"><a href=\"#cb1-28\"></a>    Value t = p.produce(<span class=\"dv\">100</span>);</span>\n<span id=\"cb1-29\"><a href=\"#cb1-29\"></a>    t.print();</span>\n<span id=\"cb1-30\"><a href=\"#cb1-30\"></a>    <span class=\"cf\">return</span> <span class=\"dv\">1</span>;</span>\n<span id=\"cb1-31\"><a href=\"#cb1-31\"></a>}</span></code></pre></div>\n<p>执行的结果是：</p>\n<pre><code>Hello world!\ntest constructor100\nm:100\ntest destructor100</code></pre>\n<p>结果证明这样做其实是可以取到我们定义的值的，这么做可行的原因是，实际上，编译器会帮我们把临时变量拷贝一份出来，所以即便栈销毁了，我们也能够拿到新的值。</p>\n<h1 id=\"不要返回临时变量的引用\">不要返回临时变量的引用</h1>\n<p>那么，如果我们返回临时变量的引用呢？</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode cpp\"><code class=\"sourceCode cpp\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"kw\">class</span> Producer {</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a><span class=\"kw\">public</span>:</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\"></a>    Value* produce(<span class=\"dt\">int</span> i){</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\"></a>        Value t(i);</span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\"></a>        <span class=\"cf\">return</span> &amp;t;</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\"></a>    }</span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\"></a>};</span></code></pre></div>\n<p>这样做得到的结果是不对的：</p>\n<pre><code>test.cpp:21:17: warning: address of stack memory associated with local variable &#39;t&#39; returned [-Wreturn-stack-address]\n        return &amp;t;\n                ^\n1 warning generated.\nHello world!\ntest constructor100\ntest destructor100\nm:-327065280</code></pre>\n<p>编译器会有一个警告，尽管我们仍旧可以运行我们的代码，但是实际上我们得到的值是不对的。</p>\n<h1 id=\"nrvo机制\">NRVO机制</h1>\n<p>那么，既然我们返回临时对象的值，实际上会得到一个拷贝的对象，那么如果我们有拷贝构造函数，是不是应该被调用呢？</p>\n<p>然而在前面的例子中，拷贝构造函数并没有被调用到，这又是为什么呢？答案就是因为NRVO(Return Value Optimization)。这是c++11中的特性。我们首先可以尝试禁用掉这个特性，看看会发生什么。</p>\n<pre><code>hfli@CNhfli ~ $ g++ -fno-elide-constructors test.cpp\nhfli@CNhfli ~ $ ./a.out\nHello world!\ntest constructor100\ntest copy constructor0\ntest destructor100\ntest copy constructor0\ntest destructor100\nm:100\ntest destructor100</code></pre>\n<p>可以看出，拷贝构造函数调用了两次，第一次是在produce函数中返回的时候，第二次是我们在给变量赋值的时候。</p>\n","categories":["Programing","C++"],"tags":["NRVO"]},{"title":"使用TDD开发SpringBoot应用","url":"/it/java/tdd_in_sprintboot/","content":"<p>虽然觉得TDD没什么卵用，但实际工作中还是必须要使用TDD，这不最近就做了一个使用TDD的方式开发SpringBoot的例子。</p>\n<a id=\"more\"></a>\n<p>下面阐述一下如何开发一个RestFul的GET请求，从数据库中读取数据并返回。</p>\n<h1 id=\"创建integration-test\">创建Integration Test</h1>\n<p>第一步可以从IntegrationTest开始，即模拟真实发送一个HTTP请求，然后检验返回的Response。简单起见，第一步只校验状态值：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"at\">@RunWith</span>(SpringRunner.<span class=\"fu\">class</span>)</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a><span class=\"at\">@SpringBootTest</span>(webEnvironment = WebEnvironment.<span class=\"fu\">RANDOM_PORT</span>)</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a><span class=\"kw\">public</span> <span class=\"kw\">class</span> IntegrationTest {</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>  <span class=\"at\">@Autowired</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>  <span class=\"kw\">private</span> TestRestTemplate testClient;</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\"></a>  <span class=\"at\">@Test</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\"></a>  <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">should_get_computer_list_when_call_list_computer_api</span>() {</span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\"></a>    ResponseEntity&lt;<span class=\"bu\">List</span>&lt;ComputerDto&gt;&gt; response = testClient.<span class=\"fu\">exchange</span>(</span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\"></a>        <span class=\"st\">&quot;/computers&quot;</span>,</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\"></a>        HttpMethod.<span class=\"fu\">GET</span>,</span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\"></a>        <span class=\"kw\">null</span>,</span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\"></a>        <span class=\"kw\">new</span> ParameterizedTypeReference&lt;<span class=\"bu\">List</span>&lt;ComputerDto&gt;&gt;() {</span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\"></a>        });</span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\"></a>    <span class=\"fu\">assertEquals</span>(HttpStatus.<span class=\"fu\">OK</span>, response.<span class=\"fu\">getStatusCode</span>());</span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\"></a>  }</span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\"></a>}</span></code></pre></div>\n<p>这里特意使用WebEnvironment.RANDOM_PORT以使得Spring启动一个接近真实的Server，来测试我们的请求。当然这个测试会挂了，因为Controller都还没写呢。所以下一个先来创建Controller，但是呢，TDD通常从测试开始写起，所以来测试Controller吧。</p>\n<h1 id=\"controller-test\">Controller Test</h1>\n<p>测试Controller就是单元测试了，不需要测试其他的组件（比如service什么的)。</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"at\">@RunWith</span>(SpringRunner.<span class=\"fu\">class</span>)</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a><span class=\"at\">@WebMvcTest</span>(controllers = ComputerController.<span class=\"fu\">class</span>)</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a><span class=\"kw\">public</span> <span class=\"kw\">class</span> ComputerControllerTest {</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a>  <span class=\"at\">@Autowired</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a>  <span class=\"kw\">private</span> MockMvc mockMvc;</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\"></a>  <span class=\"at\">@Test</span></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\"></a>  <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">should_get_a_list_when_get_computers</span>() <span class=\"kw\">throws</span> <span class=\"bu\">Exception</span> {</span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\"></a>    mockMvc.<span class=\"fu\">perform</span>(MockMvcRequestBuilders.<span class=\"fu\">get</span>(<span class=\"st\">&quot;/computers&quot;</span>))</span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\"></a>        .<span class=\"fu\">andExpect</span>(<span class=\"fu\">status</span>().<span class=\"fu\">isOk</span>());</span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\"></a>  }</span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\"></a>}</span></code></pre></div>\n<p>然后就是需要创建一个Controller，让测试可以过：</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"at\">@RestController</span>(<span class=\"st\">&quot;/computers&quot;</span>)</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a><span class=\"kw\">public</span> <span class=\"kw\">class</span> ComputerController {</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\"></a></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\"></a>  <span class=\"at\">@GetMapping</span></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\"></a>  <span class=\"kw\">public</span> <span class=\"bu\">List</span>&lt;ComputerDto&gt; <span class=\"fu\">getComputers</span>() {</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\"></a>    <span class=\"kw\">return</span> <span class=\"kw\">null</span>;</span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\"></a>  }</span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\"></a>}</span></code></pre></div>\n<p>到这里基本上集成测试也可以过了。所以你可以先commit一次了。然后，当然我们不能把逻辑放到Controller里面啊，我们需要一个Service来处理业务逻辑。这个Service又会从数据库中读取数据。在用到Repository之前，我们可能需要先改一下我们的controller测试，因为到目前为止并没有校验实际的字段，只是校验了返回状态码，现在可以开始校验了：</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a>  <span class=\"at\">@MockBean</span></span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\"></a>  <span class=\"kw\">private</span> ComputerService computerService;</span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\"></a></span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\"></a>  <span class=\"at\">@Test</span></span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\"></a>  <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">should_get_a_list_when_get_computers</span>() <span class=\"kw\">throws</span> <span class=\"bu\">Exception</span> {</span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\"></a>    <span class=\"fu\">given</span>(computerService.<span class=\"fu\">getComputers</span>())</span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\"></a>        .<span class=\"fu\">willReturn</span>(</span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\"></a>            <span class=\"bu\">Collections</span>.<span class=\"fu\">singletonList</span>(</span>\n<span id=\"cb4-9\"><a href=\"#cb4-9\"></a>                <span class=\"kw\">new</span> <span class=\"fu\">ComputerDto</span>(<span class=\"dv\">1</span>, <span class=\"st\">&quot;MacBook 2015&quot;</span>, <span class=\"st\">&quot;Haifeng Li&quot;</span>, <span class=\"st\">&quot;2019-09-10&quot;</span>)</span>\n<span id=\"cb4-10\"><a href=\"#cb4-10\"></a>            ));</span>\n<span id=\"cb4-11\"><a href=\"#cb4-11\"></a>    mockMvc.<span class=\"fu\">perform</span>(MockMvcRequestBuilders.<span class=\"fu\">get</span>(<span class=\"st\">&quot;/computers&quot;</span>))</span>\n<span id=\"cb4-12\"><a href=\"#cb4-12\"></a>        .<span class=\"fu\">andExpect</span>(<span class=\"fu\">status</span>().<span class=\"fu\">isOk</span>())</span>\n<span id=\"cb4-13\"><a href=\"#cb4-13\"></a>        .<span class=\"fu\">andExpect</span>(<span class=\"fu\">jsonPath</span>(<span class=\"st\">&quot;$&quot;</span>, <span class=\"fu\">hasSize</span>(<span class=\"dv\">1</span>)))</span>\n<span id=\"cb4-14\"><a href=\"#cb4-14\"></a>        .<span class=\"fu\">andExpect</span>(<span class=\"fu\">jsonPath</span>(<span class=\"st\">&quot;$[0].id&quot;</span>).<span class=\"fu\">value</span>(<span class=\"dv\">1</span>))</span>\n<span id=\"cb4-15\"><a href=\"#cb4-15\"></a>        .<span class=\"fu\">andExpect</span>(<span class=\"fu\">jsonPath</span>(<span class=\"st\">&quot;$[0].type&quot;</span>).<span class=\"fu\">value</span>(<span class=\"st\">&quot;MacBook 2015&quot;</span>))</span>\n<span id=\"cb4-16\"><a href=\"#cb4-16\"></a>        .<span class=\"fu\">andExpect</span>(<span class=\"fu\">jsonPath</span>(<span class=\"st\">&quot;$[0].owner&quot;</span>).<span class=\"fu\">value</span>(<span class=\"st\">&quot;Haifeng Li&quot;</span>))</span>\n<span id=\"cb4-17\"><a href=\"#cb4-17\"></a>        .<span class=\"fu\">andExpect</span>(<span class=\"fu\">jsonPath</span>(<span class=\"st\">&quot;$[0].createTime&quot;</span>).<span class=\"fu\">value</span>(<span class=\"st\">&quot;2019-09-10&quot;</span>))</span>\n<span id=\"cb4-18\"><a href=\"#cb4-18\"></a>        .<span class=\"fu\">andDo</span>(<span class=\"fu\">print</span>());</span>\n<span id=\"cb4-19\"><a href=\"#cb4-19\"></a>  }</span></code></pre></div>\n<p>这里我们把Service给Mock掉，因此可以控制它的行为，实际的Service就一个空函数就可以了。</p>\n<h1 id=\"service\">Service</h1>\n<p>这时候，可以考虑实现Service了，因为Service需要读取数据库，所以Service需要引入一个Repository来查询数据库，我们可以Mock掉Repository，来测service的逻辑：</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb5-1\"><a href=\"#cb5-1\"></a><span class=\"at\">@RunWith</span>(MockitoJUnitRunner.<span class=\"fu\">class</span>)</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\"></a><span class=\"kw\">public</span> <span class=\"kw\">class</span> ComputerServiceTest {</span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\"></a></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\"></a>  <span class=\"at\">@Mock</span></span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\"></a>  <span class=\"kw\">private</span> ComputerRepository computerRepository;</span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\"></a></span>\n<span id=\"cb5-7\"><a href=\"#cb5-7\"></a>  <span class=\"at\">@InjectMocks</span></span>\n<span id=\"cb5-8\"><a href=\"#cb5-8\"></a>  <span class=\"kw\">private</span> ComputerService computerService;</span>\n<span id=\"cb5-9\"><a href=\"#cb5-9\"></a></span>\n<span id=\"cb5-10\"><a href=\"#cb5-10\"></a>  <span class=\"at\">@Test</span></span>\n<span id=\"cb5-11\"><a href=\"#cb5-11\"></a>  <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">should_return_computer_list_when_get_all_computers</span>() <span class=\"kw\">throws</span> <span class=\"bu\">ParseException</span> {</span>\n<span id=\"cb5-12\"><a href=\"#cb5-12\"></a>    ComputerEntity stored = <span class=\"kw\">new</span> <span class=\"fu\">ComputerEntity</span>(<span class=\"dv\">1</span>,</span>\n<span id=\"cb5-13\"><a href=\"#cb5-13\"></a>        <span class=\"st\">&quot;MacBook 2015&quot;</span>,</span>\n<span id=\"cb5-14\"><a href=\"#cb5-14\"></a>        <span class=\"st\">&quot;Haifeng Li&quot;</span>,</span>\n<span id=\"cb5-15\"><a href=\"#cb5-15\"></a>        <span class=\"kw\">new</span> <span class=\"bu\">SimpleDateFormat</span>(<span class=\"st\">&quot;dd/MM/yyyy&quot;</span>).<span class=\"fu\">parse</span>(<span class=\"st\">&quot;01/09/2019&quot;</span>));</span>\n<span id=\"cb5-16\"><a href=\"#cb5-16\"></a>    <span class=\"fu\">given</span>(computerRepository.<span class=\"fu\">findAll</span>()).<span class=\"fu\">willReturn</span>(<span class=\"bu\">Collections</span>.<span class=\"fu\">singletonList</span>(stored));</span>\n<span id=\"cb5-17\"><a href=\"#cb5-17\"></a></span>\n<span id=\"cb5-18\"><a href=\"#cb5-18\"></a>    <span class=\"bu\">List</span>&lt;ComputerDto&gt; computers = computerService.<span class=\"fu\">getComputers</span>();</span>\n<span id=\"cb5-19\"><a href=\"#cb5-19\"></a></span>\n<span id=\"cb5-20\"><a href=\"#cb5-20\"></a>    <span class=\"fu\">assertEquals</span>(<span class=\"dv\">1</span>, computers.<span class=\"fu\">size</span>());</span>\n<span id=\"cb5-21\"><a href=\"#cb5-21\"></a>    <span class=\"fu\">assertEquals</span>(<span class=\"dv\">1</span>, computers.<span class=\"fu\">get</span>(<span class=\"dv\">0</span>).<span class=\"fu\">getId</span>());</span>\n<span id=\"cb5-22\"><a href=\"#cb5-22\"></a>    <span class=\"fu\">assertEquals</span>(<span class=\"st\">&quot;MacBook 2015&quot;</span>, computers.<span class=\"fu\">get</span>(<span class=\"dv\">0</span>).<span class=\"fu\">getType</span>());</span>\n<span id=\"cb5-23\"><a href=\"#cb5-23\"></a>    <span class=\"fu\">assertEquals</span>(<span class=\"st\">&quot;Haifeng Li&quot;</span>, computers.<span class=\"fu\">get</span>(<span class=\"dv\">0</span>).<span class=\"fu\">getOwner</span>());</span>\n<span id=\"cb5-24\"><a href=\"#cb5-24\"></a>    <span class=\"fu\">assertEquals</span>(<span class=\"st\">&quot;2019-09-01&quot;</span>, computers.<span class=\"fu\">get</span>(<span class=\"dv\">0</span>).<span class=\"fu\">getCreateTime</span>());</span>\n<span id=\"cb5-25\"><a href=\"#cb5-25\"></a>  }</span>\n<span id=\"cb5-26\"><a href=\"#cb5-26\"></a>}</span></code></pre></div>\n<p>同样Repository里面也就一个空函数就行了，但是这时候得把Service 的逻辑写完，让测试可以通过，这样Service的任务就完成了，其他测试也全部都可以通过。</p>\n<h1 id=\"repository\">Repository</h1>\n<p>最后一步就是来实现Repository了，这里需要使用DataJpaTest，用内存数据库进行测试：</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb6-1\"><a href=\"#cb6-1\"></a><span class=\"at\">@RunWith</span>(SpringRunner.<span class=\"fu\">class</span>)</span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\"></a><span class=\"at\">@DataJpaTest</span></span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\"></a><span class=\"kw\">public</span> <span class=\"kw\">class</span> ComputerRepositoryTest {</span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\"></a></span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\"></a>  <span class=\"at\">@Autowired</span></span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\"></a>  <span class=\"kw\">private</span> TestEntityManager entityManager;</span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\"></a></span>\n<span id=\"cb6-8\"><a href=\"#cb6-8\"></a>  <span class=\"at\">@Autowired</span></span>\n<span id=\"cb6-9\"><a href=\"#cb6-9\"></a>  <span class=\"kw\">private</span> ComputerRepository computerRepository;</span>\n<span id=\"cb6-10\"><a href=\"#cb6-10\"></a></span>\n<span id=\"cb6-11\"><a href=\"#cb6-11\"></a>  <span class=\"at\">@Before</span></span>\n<span id=\"cb6-12\"><a href=\"#cb6-12\"></a>  <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">prepareData</span>() <span class=\"kw\">throws</span> <span class=\"bu\">ParseException</span> {</span>\n<span id=\"cb6-13\"><a href=\"#cb6-13\"></a>    entityManager.<span class=\"fu\">persistAndFlush</span>(<span class=\"kw\">new</span> <span class=\"fu\">ComputerEntity</span>(<span class=\"dv\">1</span>,</span>\n<span id=\"cb6-14\"><a href=\"#cb6-14\"></a>        <span class=\"st\">&quot;MacBook 2015&quot;</span>,</span>\n<span id=\"cb6-15\"><a href=\"#cb6-15\"></a>        <span class=\"st\">&quot;Haifeng Li&quot;</span>,</span>\n<span id=\"cb6-16\"><a href=\"#cb6-16\"></a>        <span class=\"kw\">new</span> <span class=\"bu\">SimpleDateFormat</span>(<span class=\"st\">&quot;dd/MM/yyyy&quot;</span>).<span class=\"fu\">parse</span>(<span class=\"st\">&quot;01/09/2019&quot;</span>))</span>\n<span id=\"cb6-17\"><a href=\"#cb6-17\"></a>    );</span>\n<span id=\"cb6-18\"><a href=\"#cb6-18\"></a>    entityManager.<span class=\"fu\">persistAndFlush</span>(<span class=\"kw\">new</span> <span class=\"fu\">ComputerEntity</span>(<span class=\"dv\">2</span>,</span>\n<span id=\"cb6-19\"><a href=\"#cb6-19\"></a>        <span class=\"st\">&quot;Desktop&quot;</span>,</span>\n<span id=\"cb6-20\"><a href=\"#cb6-20\"></a>        <span class=\"kw\">null</span>,</span>\n<span id=\"cb6-21\"><a href=\"#cb6-21\"></a>        <span class=\"kw\">new</span> <span class=\"bu\">SimpleDateFormat</span>(<span class=\"st\">&quot;dd/MM/yyyy&quot;</span>).<span class=\"fu\">parse</span>(<span class=\"st\">&quot;02/09/2019&quot;</span>))</span>\n<span id=\"cb6-22\"><a href=\"#cb6-22\"></a>    );</span>\n<span id=\"cb6-23\"><a href=\"#cb6-23\"></a>  }</span>\n<span id=\"cb6-24\"><a href=\"#cb6-24\"></a></span>\n<span id=\"cb6-25\"><a href=\"#cb6-25\"></a>  <span class=\"at\">@Test</span></span>\n<span id=\"cb6-26\"><a href=\"#cb6-26\"></a>  <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">should_return_all_records_in_db_when_find_all</span>() {</span>\n<span id=\"cb6-27\"><a href=\"#cb6-27\"></a>    <span class=\"bu\">List</span>&lt;ComputerEntity&gt; entities = computerRepository.<span class=\"fu\">findAll</span>();</span>\n<span id=\"cb6-28\"><a href=\"#cb6-28\"></a>    <span class=\"fu\">assertEquals</span>(<span class=\"dv\">2</span>, entities.<span class=\"fu\">size</span>());</span>\n<span id=\"cb6-29\"><a href=\"#cb6-29\"></a>  }</span>\n<span id=\"cb6-30\"><a href=\"#cb6-30\"></a>}</span></code></pre></div>\n<p>因为Spring JPA你只需要写一堆interface，测试这里的逻辑还是十分有必要的。所以到这一步为止，基本上程序的功能就已经实现了，唯一需要做的就是改一下配置来连接到真是的数据库。整个代码可以在我的<a href=\"https://github.com/soleverlee/computer-inventory.git\" target=\"_blank\" rel=\"noopener\">Github</a>上面找到。</p>\n","categories":["Programing","Java"],"tags":["SpringBoot"]},{"title":"IEEE 754浮点数转换","url":"/it/c/ieee754_floating_point_conversions/","content":"<p>一个小数的二进制是怎么样的呢？我们先看看一个二进制的小数怎么转换成十进制： <span class=\"math display\">\\[\n\\begin{aligned} \n11101.01011_{10} &amp;= 1 \\times 2^{4} + 1 \\times 2^{3} + 1 \\times 2^{2} + 0 \\times 2^{1} + 1 \\times 2^{0} + 0 \\times 2^{-1} + 1 \\times 2^{-2} + 1 \\times 2^{-3} + 1 \\times 2^{-4} + 1 \\times 2^{-5} \\\\\n  &amp;= 16 + 8 + 4 + 0 + 1 + 0 + \\frac{1}{2} + 0 + \\frac{1}{16} + \\frac{1}{32} \\\\\n  &amp;= 29.34375\n\\end{aligned}\n\\]</span> <a id=\"more\"></a></p>\n<h1 id=\"ieee-754\">IEEE 754</h1>\n<p><a href=\"https://en.wikipedia.org/wiki/IEEE_754\" target=\"_blank\" rel=\"noopener\">IEEE 754</a> 标准中规定了浮点数在计算机中的表示方法，主要就是单精度(float)和双精度(double):</p>\n<pre><code>              S Exp      Fraction\nSingle(32bit) ▯▮▮▮▮▮▮▮▮▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯\nDouble(64bit) ▯▮▮▮▮▮▮▮▮▮▮▮▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯</code></pre>\n<p>其计算公式为： <span class=\"math display\">\\[\nx = (-1)^{S}\\times(1+ Fraction)\\times 2^{(Exponent-Bias)}\n\\]</span> 其中，Bias为<a href=\"https://zh.wikipedia.org/wiki/IEEE_754#%E6%8C%87%E6%95%B8%E5%81%8F%E7%A7%BB%E5%80%BC\" target=\"_blank\" rel=\"noopener\">指数偏移值</a>，是一个固定值，即<span class=\"math inline\">\\(Bias=2^{e-1} - 1\\)</span> 其中e为指数部分的比特长度。</p>\n<ul>\n<li>单精度<span class=\"math inline\">\\(Bias = 2^{7} - 1 = 127\\)</span></li>\n<li>双精度<span class=\"math inline\">\\(Bias = 2^{10} -1 = 1023\\)</span></li>\n</ul>\n<p>举个例子，刚才我们算出来的小数可以这样表示：</p>\n<p><span class=\"math display\">\\[\n\\begin{aligned} \n29.34375 &amp;= 11101.01011 = 11101.01011_{2} \\times 2^{0} \\\\\n    &amp;= 1.110101011_{2} \\times 2^{4} \\\\\n    &amp;= (-1)^{0} \\times (1 + 0.110101011_{2}) \\times 2^{131 - 127} \\\\\n    &amp;= (-1)^{0} \\times (1 + 0.110101011_{2}) \\times 2^{10000011_{2} - 127} \\\\\n    &amp;= (-1)^{0} \\times (1 + 0.110101011_{2}) \\times 2^{1027 - 1023} \\\\\n    &amp;= (-1)^{0} \\times (1 + 0.110101011_{2}) \\times 2^{10000000011_{2} - 127} \\\\\n\\end{aligned}\n\\]</span></p>\n<p>因此在计算机中，表示为：</p>\n<pre><code>Float:\n▯▮▮▮▮▮▮▮▮▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯\n010000011110101011..............\n\nDouble:\n▯▮▮▮▮▮▮▮▮▮▮▮▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯\n010000000011110101011...........................................</code></pre>\n<p>不足的部分补上0，即：<span class=\"math inline\">\\(0100000111101010110000000000000_{2}=41eac000{16}\\)</span></p>\n<p>除了正常的浮点数外，还有几个比较特殊的：</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Description</th>\n<th style=\"text-align: left;\">Float(32bit)</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">Zero</td>\n<td style=\"text-align: left;\">0 00000000 00000000000000000000000</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">Negative Zero</td>\n<td style=\"text-align: left;\">1 00000000 00000000000000000000000</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">Infinity</td>\n<td style=\"text-align: left;\">0 11111111 00000000000000000000000</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">Negative Infinity</td>\n<td style=\"text-align: left;\">1 11111111 00000000000000000000000</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">Not a Number (NaN)</td>\n<td style=\"text-align: left;\">0 11111111 00001000000000100001000</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"十进制与二进制转换\">十进制与二进制转换</h1>\n<p>计算方式为，将小数的整数部分与2取余倒序排列；将小数部分与2取整正序排列。例如，将3.14转换为float:</p>\n<ul>\n<li>首先将整数部分直接转换为二进制 <span class=\"math inline\">\\(3_{10} = 11_{2}\\)</span>\n<ul>\n<li><span class=\"math inline\">\\(3\\mod2 = \\fbox{1}\\)</span></li>\n<li><span class=\"math inline\">\\(1\\mod2 = \\fbox{1}\\)</span></li>\n</ul></li>\n<li>小数部分为0.14，不断乘以2后取整数部分，然后用小数继续乘以2直到值为1\n<ul>\n<li><span class=\"math inline\">\\(0.14 \\times 2 = \\fbox{0}.28\\)</span></li>\n<li><span class=\"math inline\">\\(0.28 \\times 2 = \\fbox{0}.56\\)</span></li>\n<li><span class=\"math inline\">\\(0.56 \\times 2 = \\fbox{1}.12\\)</span></li>\n<li><span class=\"math inline\">\\(0.12 \\times 2 = \\fbox{0}.24\\)</span></li>\n<li><span class=\"math inline\">\\(0.24 \\times 2 = \\fbox{0}.48\\)</span></li>\n<li><span class=\"math inline\">\\(0.48 \\times 2 = \\fbox{0}.96\\)</span></li>\n<li><span class=\"math inline\">\\(0.96 \\times 2 = \\fbox{1}.92\\)</span></li>\n<li><span class=\"math inline\">\\(0.92 \\times 2 = \\fbox{1}.84\\)</span></li>\n<li>.....</li>\n<li>重复以上步骤，得到<span class=\"math inline\">\\(0.14_{10}=0.001000111101011100001010001111010..._{2}\\)</span></li>\n</ul></li>\n</ul>\n<h1 id=\"舍入操作\">舍入操作</h1>\n<p>对于尾数多余精度的情况，需要舍去多余的部分，但不是按照四舍五入的方式，而是按照”向偶舍入“的方式，意思就是，如果多余的部分大于0.5(<span class=\"math inline\">\\(0.5_{10} = 0.1_{2})\\)</span>则最低位进1；如果小于0.5则舍去；如果正好是等于0.5则根据最低位判断，如果最低位是1则进位，否则舍去。这样按照统计学来看，对于一个小数有相同的机会进位或者被舍去。</p>\n<p>例如对于上例中的3.14，我们可以得到：</p>\n<p><span class=\"math display\">\\[\n\\begin{aligned} \n3.14 &amp;= 11.001000111101011100001010001111010..._{2} \\\\\n    &amp;= 1.1001000111101011100001010001111010..._{2} \\times 2^{1} \\\\\n    &amp;= (-1)^{0} + (1 + 0.1001000111101011100001010001111010..._{2}) \\times 2^{128 - 127} \\\\\n    &amp;= (-1)^{0} + (1 + 0.10010001111010111000010{\\color{blue}{10001111010...}}_{2}) \\times 2^{10000000_{2} - 127} \\\\\n    &amp;\\approx (-1)^{0} + (1 + 0.1001000111101011100001{\\color{red}1}_{2}) \\times 2^{10000000_{2} - 127}\n\\end{aligned}\n\\]</span></p>\n<p>因此3.14的float表示为：</p>\n<pre><code>▯▮▮▮▮▮▮▮▮▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯▯\n01000000010010001111010111000011</code></pre>\n<h1 id=\"还原\">还原</h1>\n<p>那么，对于一个存储在磁盘上的浮点数，我们怎么将它加载到内存中来？对于C来说，实际也是采用的IEEE754标准(float, double)，所以实际上浮点数在内存中的表示是一致的，直接转换即可：</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode cpp\"><code class=\"sourceCode cpp\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a><span class=\"kw\">struct</span> ConstantFloat {</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\"></a>        <span class=\"at\">mutable</span> u4 bytes;</span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\"></a>        <span class=\"dt\">float</span> &amp;getValue() <span class=\"at\">const</span> {</span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\"></a>            <span class=\"cf\">return</span> *<span class=\"kw\">reinterpret_cast</span>&lt;<span class=\"dt\">float</span> *&gt;(&amp;bytes);</span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\"></a>        }</span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\"></a>    };</span></code></pre></div>\n<p>参考：</p>\n<ul>\n<li><a href=\"http://sandbox.mc.edu/~bennet/cs110/flt/dtof.html\" target=\"_blank\" rel=\"noopener\">Decimal to Floating-Point Conversions</a></li>\n<li><a href=\"http://cs.boisestate.edu/~alark/cs354/lectures/ieee754.pdf\" target=\"_blank\" rel=\"noopener\">IEEE 754 FLOATING POINT REPRESENTATION</a></li>\n<li><a href=\"https://www.h-schmidt.net/FloatConverter/IEEE754.html\" target=\"_blank\" rel=\"noopener\">IEEE-754 Floating Point Converter</a></li>\n<li><a href=\"https://www.rapidtables.com/convert/number/binary-to-decimal.html\" target=\"_blank\" rel=\"noopener\">Binary to Decimal converter</a></li>\n<li><a href=\"https://www.jianshu.com/p/e5d72d764f2f\" target=\"_blank\" rel=\"noopener\">IEEE754表示浮点数</a></li>\n<li><a href=\"http://www.binaryconvert.com/result_double.html?decimal=050057046051052051055053\" target=\"_blank\" rel=\"noopener\">Online Binary-Decimal Converter</a></li>\n</ul>\n","categories":["Programing","C++"],"tags":["IEEE 754"]},{"title":"浅谈CDC在微服务中的应用","url":"/it/arch/cdc_in_microservices/","content":"<p>CDC(Change Data Capture)是一种通过监测数据变更（变更包括新增、修改、删除等）而对变更的数据进行进一步处理的一种设计模式，通常应用在数据仓库以及和数据库密切相关的一些应用上，比如数据同步、备份、审计、ETL等。实际上，早在二十多年前，CDC就已经用来将应用系统的数据变更实时发送到数据仓库，进一步转换后传递到数据分析系统<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\" role=\"doc-noteref\"><sup>1</sup></a>，这样能够在极小地影响生产的情况下，有效而及时地将数据传递到消费方。而在微服务架构逐渐流行的今天，这种古老的技术是否能够焕发新的生机？</p>\n<p><img src=\"/images/cdc_flow.png\" alt=\"CDC Flow in SQL Server\" /> <a id=\"more\"></a></p>\n<h1 id=\"cdc实现原理\">CDC实现原理</h1>\n<p>在说CDC在微服务中的应用之前，我们有必要先了解一下CDC的基本原理。关键也许就在如何监测数据的变更。拿MySQL来说，我们知道MySQL中有binlog(binary log)可以记录用户对数据库进行的修改事件<a href=\"#fn2\" class=\"footnote-ref\" id=\"fnref2\" role=\"doc-noteref\"><sup>2</sup></a>，顺理成章，一个最简单高效的CDC实现就可以利用binlog来完成。当然现在已经有很多<a href=\"https://github.com/wushujames/mysql-cdc-projects/wiki\" target=\"_blank\" rel=\"noopener\">开源的MySQL CDC实现</a>，开箱即用。使用binlog并不是唯一的途径，至少对于MySQL而言，甚至利用数据库触发器也能完成类似的功能，但从效率上以及对数据库影响的层面来看可能就相形见绌了。</p>\n<p>通常而言，CDC捕获到数据库的变更之后，会将变更事件发布到消息队列中供消费者消费，例如<a href=\"https://debezium.io/docs/tutorial/#what_is_debezium\" target=\"_blank\" rel=\"noopener\">Debezium</a>，将MySQL（也支持PostgreSQL、Mongo等）的变更持久化到Kafka中，我们通过订阅Kafaka中的事件，来实现我们需要的功能。</p>\n<h1 id=\"微服务解耦\">微服务解耦</h1>\n<p>我们刚才已经了解到，通过CDC，我们可以把数据库的变更转变为各个“事件”，从而可以只关心这些事件来处理。对于传统的大型单体应用，我们可以通过这种方式来进行解耦，从而拆分出微服务出来。同样，如果已经是微服务架构，有时候也可以运用CDC来简化服务间的调用。</p>\n<p>举个例子，我们在奔驰OTR中有这样的场景：</p>\n<ul>\n<li>系统中会创建客户服务的预约，预约将分配给一个用户去处理</li>\n<li>这些预约可能是用户手动创建的，也可能是通过第三方系统发送过来的</li>\n<li>当系统中创建了预约、或者预约修改后，相关的用户会收到通知信息</li>\n</ul>\n<p>很容易我们可以拆分出预约、通知两个服务出来，为了实现通知的功能，如果采用直接的做法，我们在通知的服务中定义了一个接口是给某用户发送通知，这样我们在所有预约创建、修改的地方都需要进行相应的逻辑判断，并调用这个接口来发送通知。而实际上，我们有好几处地方都在创建或者修改预约信息，当这些业务代码需要修改的时候，我们都需要关心通知的部分是否需要作出修改。虽然我们很小心的在维护这部分代码，但还是很容易会漏掉一些地方的通知逻辑，或者出现业务上不一致的情况。</p>\n<p>试想如果我们利用CDC的方式，不是直接显示的在预约变更的地方调用通知接口，而是监控预约表的变化，然后有一个地方统一的进行处理并发送通知，这样可以极大的降低业务代码的复杂度。同时要考虑的是，这样不再是一个同步的操作，这个延时对于业务场景是否能接受。在我们这个案例中，消息发送（通过第三方平台）本身就已经是一个异步调用了，业务上并没有发生变化，是可以考虑的。</p>\n<h1 id=\"data-replication\">Data replication</h1>\n<p>Martin Fowler在他关于Event-Driven Architecture的演讲中提到一个使用事件传递业务变更来解决跨服务的信息共享问题<a href=\"#fn3\" class=\"footnote-ref\" id=\"fnref3\" role=\"doc-noteref\"><sup>3</sup></a>。 <img src=\"/images/event_carried_state_transfer.png\" alt=\"Event carried data transfer\" /></p>\n<p>上图的架构中在Insurance Quoting服务中保存了一份customer的信息，这样当有需要查询的时候，不需要去调用customer management服务，而是直接从自己的副本中进行查询，这样做有一些好处：</p>\n<ul>\n<li>提高了查询性能，直接从数据库里面拿，省去了远程调用</li>\n<li>不用担心另外一个服务挂掉或者性能造成的影响，customer management挂了还可以用</li>\n<li>缓解了customer management的压力</li>\n</ul>\n<p>虽然好处不少，但是实现起来也不是那么容易，最大的问题就在于如何保证数据的一致（同步）：数据发生了变化，如何告诉给我们？使用CDC来完成这个操作是比较合适了。通过CDC，我们可以将依赖系统的数据（只需要处理我们关心的部分）replicate到自身系统中，来支持自身系统的业务需要。</p>\n<p>本质上，这样和MySQL的主从复制类似；好处在于，对于异构的系统，能够有较为统一的方式完成数据的同步。比如customer management存储在mysql，而我们可能使用mongodb或者postgresql，只要customer management能支持CDC，是可以很方便的将customer management的数据迁移过来。</p>\n<h1 id=\"实现cqrs\">实现CQRS</h1>\n<p>刚才提到的一个场景是消息通知，和类似的还有用户积分变更、数据统计及报表、用户行为分析等，通常这类业务对实时性要求不高，但又经常伴随着实时性要求较高的业务而发生，可以认为是一些用户行为导致的副作用。在上面的例子中，我们通过维护一个只读的customer数据库来进行查询操作，从某种意义上来讲算是读写分离了。CQRS<a href=\"#fn4\" class=\"footnote-ref\" id=\"fnref4\" role=\"doc-noteref\"><sup>4</sup></a>正是一种读写分离的策略，对于查询和写操作分别用不同的模型，来优化查询的表现。</p>\n<figure>\n<img src=\"/images/CQRS_demo.png\" alt=\"\" /><figcaption>Example of CQRS<a href=\"#fn5\" class=\"footnote-ref\" id=\"fnref5\" role=\"doc-noteref\"><sup>5</sup></a></figcaption>\n</figure>\n<p>如图所示，我们分别用两个不同的数据库来支持查询和写入的部分，将其分割开来。这样对于查询来说，是可以进行优化的，比如可以选择NoSQL来结构化视图，查询的时候不需要进行太多额外的处理，并可以考虑根据读操作和写操作不同的性能要求进行伸缩。</p>\n<p>在这样应用CQRS的架构中，CDC就可以用来将写入的事件同步到查询的数据库中，在上图中左侧的Events位置，我们不需要在业务代码中去显示地发布事件，只需要通过CDC来监测写库中的改变即可。</p>\n<h1 id=\"cdc与event-sourcing\">CDC与Event Sourcing</h1>\n<p>其实说到CRQS,通常都会和<a href=\"https://martinfowler.com/eaaDev/EventSourcing.html\" target=\"_blank\" rel=\"noopener\">Event Sourcing</a>结对出现。Event Sourcing可能是事件驱动架构的终极实现了，在这种架构的系统中，只存储客观事实也就是事件，而业务数据的状态，是通过\"播放\"事件而得到的。Event Sourcing是一种较为复杂的架构，通常DDD + EventSourcing搭配起来效果更好，但要完整的实现这样一个架构不是一件容易的事情。好在有一些开源的实现，可以供我们学习和参考。</p>\n<figure>\n<img src=\"https://raw.githubusercontent.com/eventuate-local/eventuate-local/master/i/Eventuate%20Local%20Big%20Picture.png\" alt=\"\" /><figcaption>Eventuate Local Architecture<a href=\"#fn6\" class=\"footnote-ref\" id=\"fnref6\" role=\"doc-noteref\"><sup>6</sup></a></figcaption>\n</figure>\n<p>上图是Eventuate Local的架构，这是一个CQRS+EventSourcing的开源实现。对于EventSourcing来说比较重要的是需要一个Event Store，它有几个比较重要的功能：</p>\n<ul>\n<li>将事件可靠的持久化（只能新增新的事件而不能改变已经存在的事实）</li>\n<li>根据一个ID查出一个实体上的所有有序的事件</li>\n<li>将事件广播出去（当然这不应该是Event Store的职责，我们姑且认为是一体的，不然后面不好写了）</li>\n</ul>\n<p>利用RDBMS来保存事件是比较简单的一个操作了，需要注意的是需要保证事件的强一致性，在并发情况下，同一个聚合下多个事件同时发生的时候，需要保证这些事件依然是有序的，这里可以采取乐观锁的方式实现。</p>\n<p>Eventuate中有一个CDC Service的服务，实现了Event Store同时支持了事件的发布。通过对Event表进行监测，新产生的事件被发布到Kafka中，供其他service消费，这样一个过程比较自动，不用过多担心持久化和手动进行事件发布中间有一个环节出错的情况了。</p>\n<h1 id=\"puncturing-encapsulation-with-change-data-capture\">Puncturing encapsulation with change data capture</h1>\n<p>从上面的例子中可以看到CDC是一个比较有用的设计模式，在微服务架构中大有用武之地。那为啥技术雷达要把这个列到HOLD中<a href=\"#fn7\" class=\"footnote-ref\" id=\"fnref7\" role=\"doc-noteref\"><sup>7</sup></a>？</p>\n<p>关键不在于CDC，而是打开方式不对。技术雷达中有提到:</p>\n<blockquote>\n<p>We're seeing some projects use CDC for publishing row-level change events and directly consuming these events in other services.</p>\n</blockquote>\n<p>意思是说有一些项目在实现CDC的时候，直接将底层的事件暴露出来，这个”底层“意思是指没有经过处理的、原始的、和上游系统强绑定的。举个例子，在上面的Event Store的实现中，我们很容易就能实现一个存储Event的表<a href=\"#fn8\" class=\"footnote-ref\" id=\"fnref8\" role=\"doc-noteref\"><sup>8</sup></a>：</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Column</th>\n<th style=\"text-align: left;\">Type</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">AggregateId</td>\n<td style=\"text-align: left;\">UUID</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">Type</td>\n<td style=\"text-align: left;\">Varchar</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">Content</td>\n<td style=\"text-align: left;\">Varchar</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">Version</td>\n<td style=\"text-align: left;\">Integer</td>\n</tr>\n</tbody>\n</table>\n<p>而我们是在存储Event的内容的时候，可以选择以Json的方式存储，也可能会直接序列化成二进制格式，如果我们不加修改就直接将这个表的变化广播出去，那么下游系统就会依赖于我们的存储结构了，而且需要自己进行数据加工才能得到自己想要的数据。换而言之，如果我们以后发生改变，那所有的订阅者都得跟着改，这个是一个很大的隐患，会使得服务间的集成相当脆弱。</p>\n<p>那么，更好的做法是什么呢？我觉得DDD可能是解决事件驱动架构问题的一个好的途径，通过DDD的方式，我们需要思考清楚真正业务场景中的聚合与事件，建立正确的模型，从而隔离原始的数据存储，当服务底层发生变化时，只需要修改这一层的实现即可无缝迁移。</p>\n<p>以上都是纸上谈兵，到目前为止还没有在项目中实际运用过，不清楚我司的项目是不是有使用CDC的例子？比较好奇的是技术雷达的作者们是咋知道有些项目\"use CDC for publishing row-level change events\"？</p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr />\n<ol>\n<li id=\"fn1\" role=\"doc-endnote\"><p><a href=\"https://www.oreilly.com/library/view/streaming-change-data/9781492032526/ch01.html\" target=\"_blank\" rel=\"noopener\">Streaming Change Data Capture by Itamar Ankorion, Dan Potter, Kevin Petrie</a><a href=\"#fnref1\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn2\" role=\"doc-endnote\"><p><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqlbinlog.html\" target=\"_blank\" rel=\"noopener\">mysqlbinlog — Utility for Processing Binary Log Files</a><a href=\"#fnref2\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn3\" role=\"doc-endnote\"><p><a href=\"https://www.youtube.com/watch?v=STKCRSUsyP0\" target=\"_blank\" rel=\"noopener\">GOTO 2017 • The Many Meanings of Event-Driven Architecture • Martin Fowler</a><a href=\"#fnref3\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn4\" role=\"doc-endnote\"><p><a href=\"https://martinfowler.com/bliki/CQRS.html\" target=\"_blank\" rel=\"noopener\">Command Query Responsibility Segregation</a><a href=\"#fnref4\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn5\" role=\"doc-endnote\"><p><a href=\"https://medium.com/eleven-labs/cqrs-pattern-c1d6f8517314\" target=\"_blank\" rel=\"noopener\">CQRS Pattern</a><a href=\"#fnref5\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn6\" role=\"doc-endnote\"><p><a href=\"https://github.com/eventuate-local/eventuate-local\" target=\"_blank\" rel=\"noopener\">Eventuate Local</a><a href=\"#fnref6\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn7\" role=\"doc-endnote\"><p><a href=\"https://www.thoughtworks.com/cn/radar/techniques\" target=\"_blank\" rel=\"noopener\">technology radar</a><a href=\"#fnref7\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn8\" role=\"doc-endnote\"><p><a href=\"https://cqrs.wordpress.com/documents/building-event-storage/\" target=\"_blank\" rel=\"noopener\">Building an Event Storage</a><a href=\"#fnref8\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n</ol>\n</section>\n","categories":["Programing","Distributed"],"tags":["CDC - MicroService"]},{"title":"创建一个Flutter的插件","url":"/it/mobile/create_flutter_plugin/","content":"<p>最近需要在Flutter中实现AES加解密和KDF，但搜索了一下貌似网络上没有现成的库可以用，因此尝试手写了一个Flutter的插件，实现两个功能：</p>\n<ul>\n<li>AES256/CBC/NoPadding 加解密</li>\n<li>Argon2（Argon2d) <a id=\"more\"></a></li>\n</ul>\n<h1 id=\"插件定义\">插件定义</h1>\n<h2 id=\"创建插件工程\">创建插件工程</h2>\n<p>其实貌似也可以在Flutter项目中直接调用Platform channel相关的实现，考虑到把这一部分剥离出来可以单独维护和造福后人，还是选择创建一个Plugin。首先需要创建一个插件的工程，通过如下的命令：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"ex\">flutter</span> create --org com.riguz --template=plugin encryptions</span></code></pre></div>\n<p>这样会生成一个项目，值得注意的是，这里Android会使用Java，IOS会使用Objective-C。但Objective-C对于我这种没有基础的人来说看着太麻烦了，我尝试了一些之后放弃了。于是需要切换成Swift。这里有一个小的方法可以只修改IOS的部分：</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"bu\">cd</span> encryptions</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a><span class=\"fu\">rm</span> -rf ios examples/ios</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a><span class=\"ex\">flutter</span> create -i swift --org com.riguz .</span></code></pre></div>\n<p>删除ios的目录后执行这个命令，可以重新生成ios的工程，基于swift的。</p>\n<h2 id=\"定义dart接口\">定义Dart接口</h2>\n<p>首先定义出我们要暴露的接口。举个例子，对于AES加密的函数，我们可以这样写：</p>\n<pre class=\"dart\"><code>class Encryptions {\n  static const MethodChannel _channel = const MethodChannel(&#39;encryptions&#39;);\n\n  static Future&lt;Uint8List&gt; aesEncrypt(\n      Uint8List key, Uint8List iv, Uint8List value) async {\n    return await _channel\n        .invokeMethod(&quot;aesEncrypt&quot;, {&quot;key&quot;: key, &quot;iv&quot;: iv, &quot;value&quot;: value});\n  }</code></pre>\n<p>这里有几点值得注意的：</p>\n<ul>\n<li>MethodChannel是用来调用原生接口，后面各个平台会注册同名的MethodChannel。</li>\n<li>调用原生方法通过方法名 + 参数调用，参数的对应列表参见官方文档。这里我们希望的是Java中的byte[] 类型，所以用Uint8List</li>\n<li>参数通过key-value的map传递到原生接口，原生代码通过参数名取得参数值</li>\n</ul>\n<h1 id=\"platform实现\">Platform实现</h1>\n<h2 id=\"ios\">ios</h2>\n<p>首先需要先build一下:</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a><span class=\"bu\">cd</span> encryptions/example<span class=\"kw\">;</span> <span class=\"ex\">flutter</span> build ios --no-codesign</span></code></pre></div>\n<p>在Xcode中打开项目，有一个SwiftEncryptionsPlugin的类，在这个里面实现即可：</p>\n<pre class=\"swift\"><code>public func handle(_ call: FlutterMethodCall, result: @escaping FlutterResult) {\n    let args = call.arguments as! [String: Any];\n    switch call.method {\n    case &quot;aesEncrypt&quot;, &quot;aesDecrypt&quot;:\n        let key = args[&quot;key&quot;] as! FlutterStandardTypedData;\n        let iv = args[&quot;iv&quot;] as! FlutterStandardTypedData;\n        let value = args[&quot;value&quot;] as! FlutterStandardTypedData;\n        \n        do {\n            let cipher = try handleAes(key: key.data, iv: iv.data, value: value.data, method: call.method);\n            result(cipher);\n        } catch {\n            result(nil);\n        };     \n        // ...\n    }\n}</code></pre>\n<p>因为需要使用Argon2，需要在swift中调用原生c代码，试了一些办法都不行，后来发现其实比较简单，直接在Supported Files中有一个encryptions-umbrella.h文件中加入引用，就可以直接调用了:</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb6-1\"><a href=\"#cb6-1\"></a><span class=\"er\">#import &quot;EncryptionsPlugin.h&quot;</span></span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\"></a><span class=\"er\">#import &quot;argon2.h&quot;</span></span></code></pre></div>\n<pre class=\"swift\"><code>func argon2i(password: Data, salt: Data)-&gt; Data {\n    var outputBytes  = [UInt8](repeating: 0, count: hashLength);\n    \n    password.withUnsafeBytes { passwordBytes in\n        salt.withUnsafeBytes {\n            saltBytes in\n            argon2i_hash_raw(iterations, memory, parallelism, passwordBytes, password.count, saltBytes, salt.count, &amp;outputBytes, hashLength);\n        }\n    }\n    \n    return Data(bytes: UnsafePointer&lt;UInt8&gt;(outputBytes), count: hashLength);\n}\n</code></pre>\n<h2 id=\"android\">Android</h2>\n<p>在Android Studio中打开工程（第一次打开是需要build的，<code>cd encryptions/example; flutter build apk</code>， ios也类似）。Android中实现起来会简单一点，这里只说一下如何调用c原生代码：</p>\n<p>首先在build.gradle中加入额外的步骤：</p>\n<pre class=\"groovy\"><code>externalNativeBuild {\n    cmake {\n        path &quot;src/main/cpp/CMakeLists.txt&quot;\n    }\n}</code></pre>\n<p>然后在CMakeLists.txt中指定编译步骤，我这里需要编译一个argon2的库，以及一个JNI调用的库。</p>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode cmake\"><code class=\"sourceCode cmake\"><span id=\"cb9-1\"><a href=\"#cb9-1\"></a><span class=\"kw\">add_library</span>(</span>\n<span id=\"cb9-2\"><a href=\"#cb9-2\"></a>        argon2</span>\n<span id=\"cb9-3\"><a href=\"#cb9-3\"></a>        <span class=\"ot\">SHARED</span></span>\n<span id=\"cb9-4\"><a href=\"#cb9-4\"></a></span>\n<span id=\"cb9-5\"><a href=\"#cb9-5\"></a>        argon2/src/argon2.c</span>\n<span id=\"cb9-6\"><a href=\"#cb9-6\"></a>        argon2/src/core.c</span>\n<span id=\"cb9-7\"><a href=\"#cb9-7\"></a>        argon2/src/blake2/blake2b.c</span>\n<span id=\"cb9-8\"><a href=\"#cb9-8\"></a>        argon2/src/encoding.c</span>\n<span id=\"cb9-9\"><a href=\"#cb9-9\"></a>        argon2/src/ref.c</span>\n<span id=\"cb9-10\"><a href=\"#cb9-10\"></a>        argon2/src/thread.c</span>\n<span id=\"cb9-11\"><a href=\"#cb9-11\"></a>)</span>\n<span id=\"cb9-12\"><a href=\"#cb9-12\"></a></span>\n<span id=\"cb9-13\"><a href=\"#cb9-13\"></a><span class=\"kw\">add_library</span>(</span>\n<span id=\"cb9-14\"><a href=\"#cb9-14\"></a>        argon2-binding</span>\n<span id=\"cb9-15\"><a href=\"#cb9-15\"></a>        <span class=\"ot\">SHARED</span></span>\n<span id=\"cb9-16\"><a href=\"#cb9-16\"></a></span>\n<span id=\"cb9-17\"><a href=\"#cb9-17\"></a>        argon2_binding.cpp</span>\n<span id=\"cb9-18\"><a href=\"#cb9-18\"></a>)</span>\n<span id=\"cb9-19\"><a href=\"#cb9-19\"></a></span>\n<span id=\"cb9-20\"><a href=\"#cb9-20\"></a><span class=\"kw\">target_include_directories</span>(</span>\n<span id=\"cb9-21\"><a href=\"#cb9-21\"></a>        argon2</span>\n<span id=\"cb9-22\"><a href=\"#cb9-22\"></a>        <span class=\"ot\">PRIVATE</span></span>\n<span id=\"cb9-23\"><a href=\"#cb9-23\"></a>        argon2/include</span>\n<span id=\"cb9-24\"><a href=\"#cb9-24\"></a>)</span>\n<span id=\"cb9-25\"><a href=\"#cb9-25\"></a></span>\n<span id=\"cb9-26\"><a href=\"#cb9-26\"></a><span class=\"kw\">target_include_directories</span>(</span>\n<span id=\"cb9-27\"><a href=\"#cb9-27\"></a>        argon2-binding</span>\n<span id=\"cb9-28\"><a href=\"#cb9-28\"></a>        <span class=\"ot\">PRIVATE</span></span>\n<span id=\"cb9-29\"><a href=\"#cb9-29\"></a>        argon2/include</span>\n<span id=\"cb9-30\"><a href=\"#cb9-30\"></a>)</span>\n<span id=\"cb9-31\"><a href=\"#cb9-31\"></a></span>\n<span id=\"cb9-32\"><a href=\"#cb9-32\"></a><span class=\"kw\">find_library</span>(</span>\n<span id=\"cb9-33\"><a href=\"#cb9-33\"></a>        log-lib</span>\n<span id=\"cb9-34\"><a href=\"#cb9-34\"></a>        log)</span>\n<span id=\"cb9-35\"><a href=\"#cb9-35\"></a></span>\n<span id=\"cb9-36\"><a href=\"#cb9-36\"></a></span>\n<span id=\"cb9-37\"><a href=\"#cb9-37\"></a><span class=\"kw\">target_link_libraries</span>(</span>\n<span id=\"cb9-38\"><a href=\"#cb9-38\"></a>        native-lib</span>\n<span id=\"cb9-39\"><a href=\"#cb9-39\"></a>        <span class=\"dv\">${</span>log-lib<span class=\"dv\">}</span>)</span>\n<span id=\"cb9-40\"><a href=\"#cb9-40\"></a></span>\n<span id=\"cb9-41\"><a href=\"#cb9-41\"></a><span class=\"kw\">target_link_libraries</span>(</span>\n<span id=\"cb9-42\"><a href=\"#cb9-42\"></a>        argon2-binding</span>\n<span id=\"cb9-43\"><a href=\"#cb9-43\"></a></span>\n<span id=\"cb9-44\"><a href=\"#cb9-44\"></a>        argon2</span>\n<span id=\"cb9-45\"><a href=\"#cb9-45\"></a>        <span class=\"dv\">${</span>log-lib<span class=\"dv\">}</span>)</span></code></pre></div>\n<p>然后就通过JNI调用到argon2的方法：</p>\n<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb10-1\"><a href=\"#cb10-1\"></a><span class=\"kw\">public</span> <span class=\"dt\">final</span> <span class=\"kw\">class</span> Argon2 {</span>\n<span id=\"cb10-2\"><a href=\"#cb10-2\"></a>    <span class=\"dt\">static</span> {</span>\n<span id=\"cb10-3\"><a href=\"#cb10-3\"></a>        <span class=\"bu\">System</span>.<span class=\"fu\">loadLibrary</span>(<span class=\"st\">&quot;argon2-binding&quot;</span>);</span>\n<span id=\"cb10-4\"><a href=\"#cb10-4\"></a>    }</span>\n<span id=\"cb10-5\"><a href=\"#cb10-5\"></a>    </span>\n<span id=\"cb10-6\"><a href=\"#cb10-6\"></a>    <span class=\"co\">// ...</span></span>\n<span id=\"cb10-7\"><a href=\"#cb10-7\"></a></span>\n<span id=\"cb10-8\"><a href=\"#cb10-8\"></a>    <span class=\"kw\">private</span> <span class=\"kw\">native</span> <span class=\"dt\">byte</span>[] <span class=\"fu\">argon2iInternal</span>(<span class=\"dt\">int</span> iterations, <span class=\"dt\">int</span> memory, <span class=\"dt\">int</span> parallelism, <span class=\"dt\">final</span> <span class=\"dt\">byte</span>[] password, <span class=\"dt\">final</span> <span class=\"dt\">byte</span>[] salt, <span class=\"dt\">int</span> hashLength);</span>\n<span id=\"cb10-9\"><a href=\"#cb10-9\"></a></span>\n<span id=\"cb10-10\"><a href=\"#cb10-10\"></a>    <span class=\"kw\">private</span> <span class=\"kw\">native</span> <span class=\"dt\">byte</span>[] <span class=\"fu\">argon2dInternal</span>(<span class=\"dt\">int</span> iterations, <span class=\"dt\">int</span> memory, <span class=\"dt\">int</span> parallelism, <span class=\"dt\">final</span> <span class=\"dt\">byte</span>[] password, <span class=\"dt\">final</span> <span class=\"dt\">byte</span>[] salt, <span class=\"dt\">int</span> hashLength);</span>\n<span id=\"cb10-11\"><a href=\"#cb10-11\"></a>}</span></code></pre></div>\n<p>详细的代码不再累述。</p>\n<h1 id=\"example\">Example</h1>\n<p>在example工程中，用dart调用一下这些接口，然后可以分别在Xcode和Android Studio中运行起来，看一下不同平台是否都支持。不清楚是否有自动化的测试方法。</p>\n<figure>\n<img src=\"/images/encryptions_example.jpeg\" alt=\"\" /><figcaption>example</figcaption>\n</figure>\n<p>如果想了解更多，<a href=\"https://github.com/soleverlee/encryptions\" target=\"_blank\" rel=\"noopener\">这里</a>是详细的代码。</p>\n<p>参考:</p>\n<ul>\n<li><a href=\"https://flutter.dev/docs/development/platform-integration/platform-channels\" target=\"_blank\" rel=\"noopener\">Writing custom platform-specific code</a></li>\n<li><a href=\"https://flutter.dev/docs/development/packages-and-plugins/developing-packages\" target=\"_blank\" rel=\"noopener\">Developing packages &amp; plugins</a></li>\n</ul>\n","categories":["Programing","Android"],"tags":["Argon2","Flutter","Swift"]},{"title":"KDBX4 文件格式解析","url":"/it/security/kdbx4_format/","content":"<p>最近因为开始开发我自己的密码管理软件，因此对一些开源的密码管理软件做了一下研究，这其中一个比较著名的就是<a href=\"https://keepass.info/\" target=\"_blank\" rel=\"noopener\">KeePass</a>。KeePass将密码存在一个文本文件中，最新的格式是<a href=\"https://keepass.info/help/kb/kdbx_4.html\" target=\"_blank\" rel=\"noopener\">KDBX4</a>，官方的KeePass是在.Net平台上开发的，也有不少其他平台的移植版本，当然KDBX解析的库也比较多，可惜即便是官方文档也没有详细的描述。几经折腾找到了一个比较好的实现<a href=\"https://keepassxc.org/\" target=\"_blank\" rel=\"noopener\">Keepassxc</a>，这是一个基于c++和QT开发的跨平台版本，兼容Keepass的文件格式，我把代码做了精简就得到<a href=\"https://github.com/soleverlee/keepass-client\" target=\"_blank\" rel=\"noopener\">一个KDBX的操作库</a>，顺便调试了一下KDBX的文件格式，看看它是怎么存密码的。 <a id=\"more\"></a></p>\n<p><a href=\"/images/ka.kdbx\">这里</a>有一个使用keepass创建的简单数据库，master密码是1125482715。</p>\n<figure>\n<img src=\"/images/keepass_ka.png\" alt=\"\" /><figcaption>ka.kdbx</figcaption>\n</figure>\n<h1 id=\"文件头明文\">文件头（明文）</h1>\n<p>我们以十六进制形式打开文件可以看到这样的结构：</p>\n<figure>\n<img src=\"/images/kdbx_hex_ka_header.png\" alt=\"\" /><figcaption>Hex of ka.kdbx</figcaption>\n</figure>\n<h2 id=\"文件头格式\">文件头格式</h2>\n<p>其中，文件头的结构可以用以下的形式来表述：</p>\n<p><span class=\"math display\">\\[\nItem_{i} = Id_{i} + Length + Data \\\\\nHeader = MagicNumber + Version + Item_{0} + ... + Item_{n} + Hash + Hmac\n\\]</span></p>\n<p>首先，MagicNumber=<code>0x9AA2D903 0xB54BFB67</code>，代表这是KDBX文件格式</p>\n<p>然后可以看到Version=<code>0x00040000</code>，目前有这样几种版本： - 0x00040000=4 - 0x00030001=3.1 - 0x00030000=3 - 0x00020000=2</p>\n<p>然后是多个Header Item, 结构为[ID][Length][Data]，譬如<code>02100000 0031C1F2 E6BF7143 50BE5805 216AFC5A FF</code>即代表id=0x02, length=0x00000010=16, data=0x31~0xFF。其中，这些ID中有一些特殊含义的ID：</p>\n<pre><code>EndOfHeader = 0,\nComment = 1,\nCipherID = 2,\nCompressionFlags = 3,\nMasterSeed = 4,\nTransformSeed = 5,\nTransformRounds = 6,\nEncryptionIV = 7,\nProtectedStreamKey = 8,\nStreamStartBytes = 9,\nInnerRandomStreamID = 10,\nKdfParameters = 11,\nPublicCustomData = 12</code></pre>\n<p>所以这个Header就是表明加密算法，这些算法用UUID来标记：</p>\n<ul>\n<li><code>0x31c1f2e6bf714350be5805216afc5aff</code> AES</li>\n<li><code>0xad68f29f576f4bb9a36ad47af965346c</code> TWOFISH</li>\n<li><code>0xD6038A2B8B6F4CB5A524339A31DBB59A</code> CHACHA20</li>\n</ul>\n<h2 id=\"文件头校验\">文件头校验</h2>\n<p>在文件头的后面有两个比较特殊的段，存储了两个用来验证文件头正确性的字段：</p>\n<ul>\n<li>Header Hash(SHA-256)，即文件头的哈希值</li>\n<li>Hmac(HMAC-SHA-256 )值，为文件头和密码一起加密后得出的值</li>\n</ul>\n<p>通过计算哈希值能够判断文件头是否被人篡改，或者更准确的说是不是出现了损坏，因为如果真的被人篡改了，我相信他会连这个hash一起改掉，验证没有太大意义。因为KDB中数据采取了对称加密算法，而文件中也不会存储主密码，所以我们如何知道用户输入的密码是不是正确呢？</p>\n<p>在Kdb以前的版本中，是尝试通过使用用户输入的密码去进行解密，如果出现问题或者解密出来的内容哈希值对不上，那么密码不对了。而在kdbx4中，采取了HMAC的方式，Hmac在哈希的基础上，加入了一个Key，意味着同一段数据，用不同的Key哈希之后的结果是不一样的。那么就可以根据用户输入的密码来计算Hmac值，如果和文件中记录的对不上，认为密码错误。</p>\n<p>其实这个问题我也想过，我之前的想法是，把一段已知的明文加密后存储起来，然后再解密的时候，尝试用用户的密码加密后，来解密这个密文，看是否匹配。。当然如果这样做，需要考虑一下<a href=\"https://zh.wikipedia.org/wiki/%E5%B7%B2%E7%9F%A5%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB\" target=\"_blank\" rel=\"noopener\">已知明文攻击</a>。</p>\n<p><a href=\"https://stackoverflow.com/questions/14493029/reliable-way-to-tell-if-wrong-key-is-used-in-aes256-decryption\" target=\"_blank\" rel=\"noopener\">这里</a>还有有一个讨论可以参考。</p>\n<h2 id=\"key-transform\">Key transform</h2>\n<p>虽然不同的用户设置的密码都不一样，但通常我们在进行加密的时候，不会直接拿这个作为Key，而是会通过KDF <a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\" role=\"doc-noteref\"><sup>1</sup></a> 将原始密码进行转换。keepass也不例外，我们这个文件设置的是使用Argon2来进行KDF，之前的版本采取的是AES-KDF。Keepass中转换的步骤如下:</p>\n<ol>\n<li>将原始密码进行SHA-256转换，即 <span class=\"math display\">\\[ sha256（1125482715）= d31d31dd2d99b5d35ce232896d0b3f1fe41daf6ba47b5c24d52e8890a0307da6 \\]</span></li>\n<li>再进行一次SHA-256 <span class=\"math display\">\\[ sha256(d31d31dd2d99b5d35ce232896d0b3f1fe41daf6ba47b5c24d52e8890a0307da6) = \\\\ bfa11b4e4376cf1b17088a3de375f1df6a9c4cb3eb36f3ce2416b10481eb619f \\]</span></li>\n<li>将上次得到的哈希值，同header中配置的Transform seed进行KDF，得到最终的transformedMasterKey, 这里我们用的是argon2。<span class=\"math display\">\\[ argon2d(2, 1024, pwd, salt) = \\\\\n104e9ba7b6b4479eec1a8fe3f9ca285fd10e0f33435fcabd8edf3e16380a98c7 \\]</span>这一步计算参见下面的代码：</li>\n</ol>\n<p>其中：<span class=\"math display\">\\[ KdfSeed=3f09ea13ceffb8e867a4af3ab17854f9f5f152591653c737a8962b94356e2c0f \\]</span></p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"pp\">#include </span><span class=\"im\">&quot;argon2.h&quot;</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a><span class=\"pp\">#include </span><span class=\"im\">&lt;stdio.h&gt;</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a><span class=\"pp\">#include </span><span class=\"im\">&lt;stdlib.h&gt;</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a><span class=\"dt\">int</span> main(<span class=\"dt\">int</span> argc, <span class=\"dt\">char</span>*argv[])</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a>{</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a>    <span class=\"dt\">uint8_t</span> pwd[<span class=\"dv\">32</span>] = {<span class=\"bn\">0xbf</span>, <span class=\"bn\">0xa1</span>, <span class=\"bn\">0x1b</span>, <span class=\"bn\">0x4e</span>, <span class=\"bn\">0x43</span>, <span class=\"bn\">0x76</span>, <span class=\"bn\">0xcf</span>, <span class=\"bn\">0x1b</span>, <span class=\"bn\">0x17</span>, <span class=\"bn\">0x08</span>, <span class=\"bn\">0x8a</span>, <span class=\"bn\">0x3d</span>, <span class=\"bn\">0xe3</span>, <span class=\"bn\">0x75</span>, <span class=\"bn\">0xf1</span>, <span class=\"bn\">0xdf</span>, <span class=\"bn\">0x6a</span>, <span class=\"bn\">0x9c</span>, <span class=\"bn\">0x4c</span>, <span class=\"bn\">0xb3</span>, <span class=\"bn\">0xeb</span>, <span class=\"bn\">0x36</span>, <span class=\"bn\">0xf3</span>, <span class=\"bn\">0xce</span>, <span class=\"bn\">0x24</span>, <span class=\"bn\">0x16</span>, <span class=\"bn\">0xb1</span>, <span class=\"bn\">0x04</span>, <span class=\"bn\">0x81</span>, <span class=\"bn\">0xeb</span>, <span class=\"bn\">0x61</span>, <span class=\"bn\">0x9f</span>};</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\"></a>    <span class=\"dt\">uint8_t</span> salt[<span class=\"dv\">32</span>] = {<span class=\"bn\">0x3f</span>, <span class=\"bn\">0x09</span>, <span class=\"bn\">0xea</span>, <span class=\"bn\">0x13</span>, <span class=\"bn\">0xce</span>, <span class=\"bn\">0xff</span>, <span class=\"bn\">0xb8</span>, <span class=\"bn\">0xe8</span>, <span class=\"bn\">0x67</span>, <span class=\"bn\">0xa4</span>, <span class=\"bn\">0xaf</span>, <span class=\"bn\">0x3a</span>, <span class=\"bn\">0xb1</span>, <span class=\"bn\">0x78</span>, <span class=\"bn\">0x54</span>, <span class=\"bn\">0xf9</span>, <span class=\"bn\">0xf5</span>, <span class=\"bn\">0xf1</span>, <span class=\"bn\">0x52</span>, <span class=\"bn\">0x59</span>, <span class=\"bn\">0x16</span>, <span class=\"bn\">0x53</span>, <span class=\"bn\">0xc7</span>, <span class=\"bn\">0x37</span>, <span class=\"bn\">0xa8</span>, <span class=\"bn\">0x96</span>, <span class=\"bn\">0x2b</span>, <span class=\"bn\">0x94</span>, <span class=\"bn\">0x35</span>, <span class=\"bn\">0x6e</span>, <span class=\"bn\">0x2c</span>, <span class=\"bn\">0x0f</span>};</span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\"></a>    <span class=\"dt\">uint8_t</span> result[<span class=\"dv\">32</span>];</span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\"></a>    <span class=\"co\">// argon2: seed=kef.seed, version=19, rounds=2, memory=1024, parallelism=2</span></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\"></a>    argon2_hash(<span class=\"dv\">2</span>, <span class=\"dv\">1024</span>, <span class=\"dv\">2</span>, pwd, <span class=\"dv\">32</span>, salt, <span class=\"dv\">32</span>, result, <span class=\"dv\">32</span>, nullptr, <span class=\"dv\">0</span>, Argon2_d, <span class=\"dv\">19</span>);</span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\"></a>    <span class=\"cf\">for</span>(<span class=\"dt\">int</span> i = <span class=\"dv\">0</span>; i &lt; <span class=\"dv\">32</span>; i ++)</span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\"></a>        printf(<span class=\"st\">&quot;%02x&quot;</span>, result[i]);</span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\"></a>}</span></code></pre></div>\n<h2 id=\"hmac计算\">Hmac计算</h2>\n<p>另一个就是HMac值的计算了，首先需要算出一个Key，在keepass中是这样去算的:</p>\n<p><span class=\"math display\">\\[\nKey1 = sha512(MasterSeed + TransformedMasterKey + 0x01)\n\\]</span></p>\n<pre><code>sha512(17e4aa736440b2c6f963184b9baf07a3c2b7ac652a95d4b375baf938cd5dbe4b104e9ba7b6b4479eec1a8fe3f9ca285fd10e0f33435fcabd8edf3e16380a98c701)\n= 9340685dcea0fbee49a68417708cbffb24958fc6fb20de6cb158196b6291f0719f46669bbc8f7254bcbc0da0650d795fe9c782e443d3f32b7a957f73c8f58128</code></pre>\n<p>然后需要把这个key再计算一下:</p>\n<p><span class=\"math display\">\\[\nKey = sha512(BlockIndex + Key1)\n\\]</span></p>\n<pre><code>sha512(ffffffffffffffff9340685dcea0fbee49a68417708cbffb24958fc6fb20de6cb158196b6291f0719f46669bbc8f7254bcbc0da0650d795fe9c782e443d3f32b7a957f73c8f58128)\n=1062ee78cf505ac4af4e53f343b04782178a3c6d6b8e64ecb23ca6ce9489ab30660b92cf1f88dbf0333769e9f362ae2d7dff82554d864a4c2d1d3b751b5698f7</code></pre>\n<p>这个Key才是最终用来计算Hmac的Key:</p>\n<p><span class=\"math display\">\\[\nHmacValue = Hmac-sha256(header, Key)\n\\]</span></p>\n<pre><code>Hmac-sha256(03D9A29A67FB4BB500000400021000000031C1F2E6BF714350BE5805216AFC5AFF030400000000000000042000000017E4AA736440B2C6F963184B9BAF07A3C2B7AC652A95D4B375BAF938CD5DBE4B0B8B00000000014205000000245555494410000000EF636DDF8C29444B91F7A9A403E30A0C040100000056040000001300000005010000004908000000020000000000000005010000004D0800000000001000000000000401000000500400000002000000420100000053200000003F09EA13CEFFB8E867A4AF3AB17854F9F5F152591653C737A8962B94356E2C0F000710000000C1F6FD873E14050697C168B3E9DA5DB200040000000D0A0D0A, 1062ee78cf505ac4af4e53f343b04782178a3c6d6b8e64ecb23ca6ce9489ab30660b92cf1f88dbf0333769e9f362ae2d7dff82554d864a4c2d1d3b751b5698f7)\n=376123254b1aef5db7cb13e73807fc74341b8baa7e182a50f4cfdf14d5fdd532</code></pre>\n<h1 id=\"文件内容encrypted\">文件内容（Encrypted)</h1>\n<h2 id=\"秘钥计算\">秘钥计算</h2>\n<p>在文件头后面，跟着的是文件的数据内容了，这部分数据是加密过的。因此首先需要知道是根据什么样的秘钥进行加密的。其实很简单:</p>\n<p><span class=\"math display\">\\[\nKey = sha256 (MasterSeed + TransformedMasterKey)\n\\]</span></p>\n<pre><code>sha256(17E4AA736440B2C6F963184B9BAF07A3C2B7AC652A95D4B375BAF938CD5DBE4B104e9ba7b6b4479eec1a8fe3f9ca285fd10e0f33435fcabd8edf3e16380a98c7)\n=dce60234d641f71f377ecafb5a566ce954d26c03fd3b5b23e9ed092ef42b5290</code></pre>\n<p>所以这个文件中，解密是这样的：</p>\n<pre><code>Key=dce60234d641f71f377ecafb5a566ce954d26c03fd3b5b23e9ed092ef42b5290\nIv=c1f6fd873e14050697c168b3e9da5db2\n\n9a0106470245744f9121bbafa5dd10df =&gt; 01040000000300000002400000008B2E</code></pre>\n<p>这里需要指出的是，这里应该使用AES-CBC-NoPadding算法，这样加密后的密文和原文是一样的长度，否则会变长。而且解密的时候，是一段一段的解的，16byte一截。</p>\n<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb8-1\"><a href=\"#cb8-1\"></a><span class=\"kw\">public</span> <span class=\"dt\">static</span> <span class=\"dt\">byte</span>[] <span class=\"fu\">decrypt</span>(<span class=\"dt\">byte</span>[] key, <span class=\"dt\">byte</span>[] initVector, <span class=\"dt\">byte</span>[] encrypted) {</span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\"></a>        <span class=\"kw\">try</span> {</span>\n<span id=\"cb8-3\"><a href=\"#cb8-3\"></a>            <span class=\"bu\">IvParameterSpec</span> iv = <span class=\"kw\">new</span> <span class=\"bu\">IvParameterSpec</span>(initVector);</span>\n<span id=\"cb8-4\"><a href=\"#cb8-4\"></a>            <span class=\"bu\">SecretKeySpec</span> skeySpec = <span class=\"kw\">new</span> <span class=\"bu\">SecretKeySpec</span>(key, <span class=\"st\">&quot;AES&quot;</span>);</span>\n<span id=\"cb8-5\"><a href=\"#cb8-5\"></a></span>\n<span id=\"cb8-6\"><a href=\"#cb8-6\"></a>            <span class=\"bu\">Cipher</span> cipher = <span class=\"bu\">Cipher</span>.<span class=\"fu\">getInstance</span>(<span class=\"st\">&quot;AES/CBC/NoPadding&quot;</span>);</span>\n<span id=\"cb8-7\"><a href=\"#cb8-7\"></a>            cipher.<span class=\"fu\">init</span>(<span class=\"bu\">Cipher</span>.<span class=\"fu\">DECRYPT_MODE</span>, skeySpec, iv);</span>\n<span id=\"cb8-8\"><a href=\"#cb8-8\"></a></span>\n<span id=\"cb8-9\"><a href=\"#cb8-9\"></a>            <span class=\"kw\">return</span> cipher.<span class=\"fu\">doFinal</span>(encrypted);</span>\n<span id=\"cb8-10\"><a href=\"#cb8-10\"></a>        } <span class=\"kw\">catch</span> (<span class=\"bu\">Exception</span> ex) {</span>\n<span id=\"cb8-11\"><a href=\"#cb8-11\"></a>            ex.<span class=\"fu\">printStackTrace</span>();</span>\n<span id=\"cb8-12\"><a href=\"#cb8-12\"></a>        }</span>\n<span id=\"cb8-13\"><a href=\"#cb8-13\"></a></span>\n<span id=\"cb8-14\"><a href=\"#cb8-14\"></a>        <span class=\"kw\">return</span> <span class=\"kw\">null</span>;</span>\n<span id=\"cb8-15\"><a href=\"#cb8-15\"></a>    }</span></code></pre></div>\n<h2 id=\"inner-header\">Inner Header</h2>\n<p>Inner Header跟Header结构一样，对应了如下的类型：</p>\n<pre><code>0x00: End of header.\n0x01: Inner random stream ID (this supersedes the inner random stream ID stored in the outer header of a KDBX 3.1 file).\n0x02: Inner random stream key (this supersedes the inner random stream key stored in the outer header of a KDBX 3.1 file).\n0x03: Binary (entry attachment). D = F ‖ M, where F is one byte and M is the binary content (i.e. the actual entry attachment data). F stores flags for the binary; supported flags are:\n    0x01: The user has turned on process memory protection for this binary.</code></pre>\n<h2 id=\"xml-database\">XML Database</h2>\n<p>Inner Header之后一大段就是XML加密后的内容了，直接解密就可以了。解密出来其实就是个XML。这里就不过多解释了。 最终结构就是如图所示了：</p>\n<p><img src=\"/images/keepass_hex_sturcture.png\" alt=\"Hex of ka.kdbx\" />，</p>\n<p>目前还有两个地方没大搞懂的就是，标红的地方，就是加密的部分开头和结尾的，不知道有何用，代码嵌套的挺深的，看了下没找到地方，各个文档中也没说清楚，不过可以肯定的是，这两个地方用到了。有时间再看吧。</p>\n<p>References:</p>\n<ul>\n<li><a href=\"https://cryptii.com/pipes/aes-encryption\" target=\"_blank\" rel=\"noopener\">Cryptii</a></li>\n<li><a href=\"https://www.devglan.com/online-tools/aes-encryption-decryption\" target=\"_blank\" rel=\"noopener\">AES Encryption and Decryption Online Tool(Calculator)</a></li>\n<li><a href=\"http://extranet.cryptomathic.com/hashcalc/index\" target=\"_blank\" rel=\"noopener\">Hash</a></li>\n<li><a href=\"https://github.com/Evidlo/keepassxc-specs/blob/master/kdbx-binary/kdbx4_overview.md\" target=\"_blank\" rel=\"noopener\">overview for KDBX4</a></li>\n<li><a href=\"https://gist.github.com/msmuenchen/9318327\" target=\"_blank\" rel=\"noopener\">KeePass v2.x (KDBX v3.x) file format</a></li>\n<li><a href=\"https://gist.github.com/lgg/e6ccc6e212d18dd2ecd8a8c116fb1e45\" target=\"_blank\" rel=\"noopener\">Keepass file format explained</a></li>\n</ul>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr />\n<ol>\n<li id=\"fn1\" role=\"doc-endnote\"><p>key derivation function<a href=\"#fnref1\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n</ol>\n</section>\n","categories":["Programing","Security"],"tags":["Argon2","KeePass","KDBX","AES"]},{"title":"Java GC小结","url":"/it/java/java_gc/","content":"<figure>\n<img src=\"https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/images/gcslides/Slide1.png\" style=\"width:400px\" alt=\"\" /><figcaption>HotSpot JVM architecture</figcaption>\n</figure>\n<a id=\"more\"></a>\n<h1 id=\"jvm-generations\">JVM Generations</h1>\n<figure>\n<img src=\"https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/images/gcslides/Slide5.png\" style=\"width:400px\" alt=\"\" /><figcaption>Hotspot Heap Structure</figcaption>\n</figure>\n<p>Java的堆被划分成不同的区域：</p>\n<ul>\n<li>young generation：存放新创建的对象，当这个区域占满的时候，会触发minor GC，这时候存活的对象会被标记年龄，最终会移动到old generation。</li>\n<li>old generation：存放存活的比较久的对象。当yound generation存活的对象年龄到达设置的阈值后，就会被移动到这里来。当这个区域满了的时候，会触发major GC。</li>\n<li>permanent generation：存放一些JVM运行所需的元数据，例如类的信息等。full GC的时候也包括对这个区域的GC。 其中，minor GC和major GC都是Stop the World的，即当GC触发的时候，所有的程序线程都会停止等待GC完成。通常minor GC会比major GC快很多，因为major GC会遍历所有的存活对象。</li>\n</ul>\n<p>其中，yound generation 又被划分成Eden space, Survivor Space1, Survivor Space2，其中Eden Space占了绝大部分的空间。当Eden space满的时候，GC 会将存活对象移动到其中一个Survivor Space中，两个Survivor Space是为了避免内存碎片，每次将存活的对象（Eden Space以及上一个Survivor Space）移动到另一个Survivor Space中。</p>\n<figure>\n<img src=\"https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/images/gcslides/Slide9.png\" style=\"width:400px\" alt=\"\" /><figcaption>Mnior GC</figcaption>\n</figure>\n<p>通过Java VisualVM和VisualGC插件可以很直观的看到GC的过程: <img src=\"/images/visualVM_GC.png\" alt=\"Visual GC\" /></p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"ex\">java</span> -Xmx50m \\</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a>-XX:-PrintGC \\</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>-XX:+PrintHeapAtGC \\</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>-XX:MaxTenuringThreshold=10 \\</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>-XX:+UseConcMarkSweepGC \\</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>-XX:+UseParNewGC TestGC</span></code></pre></div>\n<h1 id=\"garbage-collectors\">Garbage Collectors</h1>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Argument</th>\n<th style=\"text-align: left;\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">-Xms</td>\n<td style=\"text-align: left;\">Sets the initial heap size for when the JVM starts.</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">-Xmx</td>\n<td style=\"text-align: left;\">Sets the maximum heap size.</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">-Xmn</td>\n<td style=\"text-align: left;\">Sets the size of the Young Generation.</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">-XX:PermSize</td>\n<td style=\"text-align: left;\">Sets the starting size of the Permanent Generation.</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">-XX:MaxPermSize</td>\n<td style=\"text-align: left;\">Sets the maximum size of the Permanent Generation</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>Serial GC</strong>:使用mark-compact算法进行GC，单线程的进行GC，适合单核CPU和在客户端允许的Java程序。</li>\n<li><strong>Parallel GC(throughput collector)</strong>:多线程进行GC</li>\n<li><strong>Concurrent Mark Sweep (CMS) Collector</strong>: 在程序运行的时候并发的进行GC，以最大限度减少停止时间</li>\n<li><strong>G1(Garbage-First) Garbage Collector</strong>: CMS的替代品</li>\n</ul>\n<p>其中存在并行(Parallel)和并发(Concurrent)的区别，并行是指垃圾收集器多个线程同时工作，但此时用户线程依然是停止等待的；而并发是指在用户线程工作的同时，垃圾收集器同时执行。</p>\n<figure>\n<img src=\"https://cdn.app.compendium.com/uploads/user/e7c690e8-6ff9-102a-ac6d-e4aebca50425/f4a5b21d-66fa-4885-92bf-c4e81c06d916/Image/b125abbe194f5608840119eccc9d90e2/collectors.jpg\" style=\"width:600px;height:300px;\" alt=\"\" /><figcaption>Java collectors</figcaption>\n</figure>\n<table>\n<thead>\n<tr class=\"header\">\n<th>Garbage Collector</th>\n<th style=\"text-align: left;\">Type</th>\n<th style=\"text-align: left;\">Algorithm</th>\n<th style=\"text-align: left;\">MultiThread</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Serial</td>\n<td style=\"text-align: left;\">stop-the-world</td>\n<td style=\"text-align: left;\">copying</td>\n<td style=\"text-align: left;\">No</td>\n</tr>\n<tr class=\"even\">\n<td>ParNew</td>\n<td style=\"text-align: left;\">stop-the-world</td>\n<td style=\"text-align: left;\">copying</td>\n<td style=\"text-align: left;\">Yes</td>\n</tr>\n<tr class=\"odd\">\n<td>Parallel Scavenge</td>\n<td style=\"text-align: left;\">stop-the-world</td>\n<td style=\"text-align: left;\">copying</td>\n<td style=\"text-align: left;\">Yes</td>\n</tr>\n<tr class=\"even\">\n<td>Serial Old</td>\n<td style=\"text-align: left;\">stop-the-world</td>\n<td style=\"text-align: left;\">mark-sweep-compact</td>\n<td style=\"text-align: left;\">No</td>\n</tr>\n<tr class=\"odd\">\n<td>CMS</td>\n<td style=\"text-align: left;\">low-pause</td>\n<td style=\"text-align: left;\">concurrent-mark-sweep</td>\n<td style=\"text-align: left;\">Yes</td>\n</tr>\n<tr class=\"even\">\n<td>Parallel Old</td>\n<td style=\"text-align: left;\">stop-the-world</td>\n<td style=\"text-align: left;\">mark-sweep-compact</td>\n<td style=\"text-align: left;\">Yes</td>\n</tr>\n<tr class=\"odd\">\n<td>G1</td>\n<td style=\"text-align: left;\"></td>\n<td style=\"text-align: left;\">compacting</td>\n<td style=\"text-align: left;\">Yes</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Arguments</th>\n<th style=\"text-align: left;\">Result</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">-XX:+UseSerialGC</td>\n<td style=\"text-align: left;\">Serial + Serial Old</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">-XX:+UseParNewGC</td>\n<td style=\"text-align: left;\">ParNew + Serial Old</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">-XX:+UseConcMarkSweepGC</td>\n<td style=\"text-align: left;\">ParNew + CMS + Serial Old<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\" role=\"doc-noteref\"><sup>1</sup></a></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">-XX:+UseParallelGC</td>\n<td style=\"text-align: left;\">Parallel Scavenge + Serial Old</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">-XX:+UseParallelOldGC</td>\n<td style=\"text-align: left;\">Parallel Scavenge + Parallel Old</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">–XX:+UseG1GC</td>\n<td style=\"text-align: left;\">G1</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"gc过程\">GC过程</h1>\n<h2 id=\"cms\">CMS</h2>\n<p>CMS 收集器的步骤：</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Phase</th>\n<th style=\"text-align: left;\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">Initial Mark (Stop-Word)</td>\n<td style=\"text-align: left;\">标记老年代中的对象是否可达(reachable)，包括可以从新生代中到达的</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">Concurrent Marking</td>\n<td style=\"text-align: left;\"></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">Remark (Stop-Word)</td>\n<td style=\"text-align: left;\"></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">Concurrent Sweep</td>\n<td style=\"text-align: left;\"></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">Resetting</td>\n<td style=\"text-align: left;\"></td>\n</tr>\n</tbody>\n</table>\n<p>G1将Heap划分成一些相同大小的区块，但是没有限制不同代的大小。</p>\n<figure>\n<img src=\"https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide9.png\" style=\"width:400px\" alt=\"\" /><figcaption>G1 Heap Allocation</figcaption>\n</figure>\n<p>References:</p>\n<ul>\n<li><a href=\"http://enos.itcollege.ee/~jpoial/allalaadimised/reading/Advanced-java.pdf\" target=\"_blank\" rel=\"noopener\">Advanced Java</a></li>\n<li><a href=\"https://codeahoy.com/2017/08/06/basics-of-java-garbage-collection/\" target=\"_blank\" rel=\"noopener\">Basics of Java Garbage Collection</a></li>\n<li><a href=\"https://www.novatec-gmbh.de/en/blog/g1-action-better-cms/\" target=\"_blank\" rel=\"noopener\">G1 in Action: Is it better than the CMS?</a></li>\n<li><a href=\"https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html\" target=\"_blank\" rel=\"noopener\">Java Garbage Collection Basics</a></li>\n<li><a href=\"https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/index.html\" target=\"_blank\" rel=\"noopener\">Getting Started with the G1 Garbage Collector</a></li>\n</ul>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr />\n<ol>\n<li id=\"fn1\" role=\"doc-endnote\"><p>\"CMS\" is used most of the time to collect the tenured generation. \"Serial Old\" is used when a concurrent mode failure occurs.<a href=\"#fnref1\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n</ol>\n</section>\n","categories":["Programing","Java"],"tags":["Comment"]},{"title":"Android Develop:横屏布局","url":"/it/mobile/android_land_layout/","content":"<p>虽然我们可以将UI设计的尽可能的响应式，但是也可以为横屏应用单独进行布局达到更好的效果。横屏布局是通过layout-land文件夹中的同名layout文件实现的。 <a id=\"more\"></a></p>\n<h1 id=\"创建landscape布局\">创建landscape布局</h1>\n<p>在新版的Android Studio中，默认生产的工程中是没有layout-land文件夹的，我们也不必手动创建这样的文件夹。在design界面，可以快捷的创建横屏布局：</p>\n<figure>\n<img src=\"/images/create_land_layout.png\" alt=\"\" /><figcaption>create land layout</figcaption>\n</figure>\n<h1 id=\"代码中的实现\">代码中的实现</h1>\n<p>值得注意的是，虽然land的布局文件已经加上了，但我发现我的界面在旋转的时候并没有生效（竖屏的时候旋转屏幕），还是显示的竖屏的设计界面，研究了一下发现问题所在：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode xml\"><code class=\"sourceCode xml\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"kw\">&lt;activity</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a><span class=\"ot\">            android:name=</span><span class=\"st\">&quot;.SplashActivity&quot;</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a><span class=\"ot\">            android:configChanges=</span><span class=\"st\">&quot;orientation|keyboardHidden|screenSize&quot;</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a><span class=\"ot\">            android:theme=</span><span class=\"st\">&quot;@style/Theme.AppCompat.NoActionBar&quot;</span><span class=\"kw\">&gt;</span></span></code></pre></div>\n<p>可以看出android:configChanges中有orientation这一个mask，意味着当屏幕旋转时，安卓设备不会自己去处理这个事件，所以也就没有生效。解决方案有两种：</p>\n<p>一个是删掉这个android:configChanges中的orientation选项，这样旋转屏幕的时候，android会销毁掉activity并重新创建一个，当然这时候如果有一些数据需要保存的话也就没有了。</p>\n<p>另一个是保留这个选项，在代码中处理：</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"at\">@Override</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a><span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">onConfigurationChanged</span>(<span class=\"bu\">Configuration</span> newConfig) {</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a>    <span class=\"kw\">super</span>.<span class=\"fu\">onConfigurationChanged</span>(newConfig);</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a>    <span class=\"fu\">setContentView</span>(R.<span class=\"fu\">layout</span>.<span class=\"fu\">activity_splash</span>);</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a>}</span></code></pre></div>\n<p>这样不会销毁这个activity。</p>\n<figure>\n<img src=\"/images/land_layout.png\" style=\"height:200px;width:400px\" alt=\"\" /><figcaption>land layout</figcaption>\n</figure>\n<figure>\n<img src=\"/images/portrait_layout.png\" style=\"width:200px\" alt=\"\" /><figcaption>portrait layout</figcaption>\n</figure>\n","categories":["Programing","Android"],"tags":["Android","Android Studio","Landscape"]},{"title":"Android Develop:设置应用图标","url":"/it/mobile/android_icon_setting/","content":"<p>前前后后各种原因耽搁了大半年，终于还是下定决心开始做我的Okapia android应用了，笔者一直从事的是Java后端和Web开发，基本上没有安卓开发的项目经验，正所谓万事开头难，一边学一边做。所以我计划把做的过程中遇到的一些问题都整理记录下来，供读者参考。 <a id=\"more\"></a></p>\n<h1 id=\"原型设计\">原型设计</h1>\n<p>原型设计是一项比较重要的事情，可以帮助我们在开发之前就理清楚要做什么，现在有比较多的工具可以来做这个事情。我用的是别人推荐的MockingBot（墨刀），一个国产软件，还比较好用。</p>\n<figure>\n<img src=\"/images/mockingbot_ui.png\" alt=\"\" /><figcaption>mockingbot</figcaption>\n</figure>\n<h1 id=\"图标资源文件夹\">图标资源文件夹</h1>\n<p>使用android studio生成的项目中，有不少文件夹：</p>\n<figure>\n<img src=\"/images/android_project_res.png\" alt=\"\" /><figcaption>android project resource folder</figcaption>\n</figure>\n<ul>\n<li>drawable</li>\n<li>drawable-v24</li>\n<li>mipmap-anydpi-v26</li>\n<li>mipmap-hdpi</li>\n<li>...</li>\n</ul>\n<p>可以看出mipmap-xxxx中其实都是不同分辨率适配的不同大小的图标，唯独mipmap-anydpi-v26中其实是一个xml，将background和forground分开了拼合到了一起。而background和forground实际是一个矢量图，网上资料显示实际是svg的一个简化版本的android实现。这就麻烦了，哪里去做svg矢量图！大概有以下的途径吧：</p>\n<h1 id=\"图标生成与编辑\">图标生成与编辑</h1>\n<h2 id=\"图标编辑工具\">图标编辑工具</h2>\n<ul>\n<li>将图片转换为SVG <a href=\"https://www.pngtosvg.com/\" target=\"_blank\" rel=\"noopener\">pngtosvg</a></li>\n<li>使用SVG编辑工具绘制（推荐macSvg）</li>\n<li>将SVG转换为android vector <a href=\"http://inloop.github.io/svg2android/\" target=\"_blank\" rel=\"noopener\">svg2android</a></li>\n</ul>\n<p>这样需要生成两张图片，一个背景一个图标。注意图标要适当居中一点，边上要留一些边距。这个可以通过控制viewBox和拖动形状来完成，在macSvg中即可处理。</p>\n<figure>\n<img src=\"/images/macsvg.png\" alt=\"\" /><figcaption>macsvg</figcaption>\n</figure>\n<p>譬如如上的图片，它的参照系设置是400，这样把图片拖到200的位置，就基本上居中了。如果想让图片缩小一点，可以把参照系设置大一点，比如600，再把形状拖到300的位置，想直接缩小形状貌似是没找到办法。简单的颜色替换什么的，其实直接用文本编辑器就可以了。</p>\n<h2 id=\"导入到工程中\">导入到工程中</h2>\n<p>通过在res文件夹上右键:New -&gt; Image Set即可自动生成各个分辨率的图标。</p>\n<figure>\n<img src=\"/images/new_image_set.png\" alt=\"\" /><figcaption>Import image set</figcaption>\n</figure>\n<h1 id=\"安卓中的图标与名称配置\">安卓中的图标与名称配置</h1>\n<p>在AndroidManifest.xml中配置了图标的路径：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode xml\"><code class=\"sourceCode xml\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"kw\">&lt;application</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a><span class=\"ot\">        android:allowBackup=</span><span class=\"st\">&quot;true&quot;</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a><span class=\"ot\">        android:icon=</span><span class=\"st\">&quot;@mipmap/ic_launcher&quot;</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a><span class=\"ot\">        android:label=</span><span class=\"st\">&quot;@string/app_name&quot;</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a><span class=\"ot\">        android:roundIcon=</span><span class=\"st\">&quot;@mipmap/ic_launcher_round&quot;</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a><span class=\"ot\">        android:supportsRtl=</span><span class=\"st\">&quot;true&quot;</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a><span class=\"ot\">        android:theme=</span><span class=\"st\">&quot;@style/AppTheme&quot;</span><span class=\"kw\">&gt;</span></span></code></pre></div>\n<p>可以看出指定了icon、label和roundIcon等。这里我们保持原有的ic_launcher名称即可，导入图标的时候直接替换掉即可。另一个是app的名称，需要注意的是，如果启动的Activity上有label，这时候app的名称会变成这个activity的名称，例如:</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode xml\"><code class=\"sourceCode xml\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"kw\">&lt;activity</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a><span class=\"ot\">        android:name=</span><span class=\"st\">&quot;.FullscreenActivity&quot;</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a><span class=\"ot\">        android:configChanges=</span><span class=\"st\">&quot;orientation|keyboardHidden|screenSize&quot;</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a><span class=\"ot\">        android:label=</span><span class=\"st\">&quot;@string/title_activity_fullscreen&quot;</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a><span class=\"ot\">        android:theme=</span><span class=\"st\">&quot;@style/FullscreenTheme&quot;</span><span class=\"kw\">&gt;&lt;/activity&gt;</span></span></code></pre></div>\n<p>如果这个activity是启动activity，那么app的名称就是@string/title_activity_fullscreen这个值了，要处理这个也很简单，我们直接删掉这个activity的label属性即可。</p>\n","categories":["Programing","Android"],"tags":["Android","Android Studio"]},{"title":"MySQL replication","url":"/it/database/mysql_replication/","content":"<p>MySQL设置Replication后，可以支持Master库上的修改自动同步到Slave库上。利用Docker可以在本机尝试这种特性。 <a id=\"more\"></a></p>\n<h1 id=\"配置master\">配置Master</h1>\n<p>首先需要创建几个文件夹（略），用来挂载配置文件和数据。我们首先来配置Master库：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode ini\"><code class=\"sourceCode ini\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"co\"># master/cnf/my.cnf</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a><span class=\"kw\">[mysqld]</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a><span class=\"dt\">server-id</span><span class=\"ot\">=</span><span class=\"dv\">1</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a><span class=\"dt\">log-bin</span><span class=\"ot\">=</span><span class=\"st\">/var/lib/mysql/mysql-bin.log</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a><span class=\"dt\">binlog_format</span><span class=\"ot\">=</span><span class=\"st\">MIXED</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a><span class=\"dt\">expire_logs_days</span><span class=\"ot\">=</span><span class=\"dv\">7</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\"></a><span class=\"dt\">max_binlog_size</span><span class=\"ot\">=</span><span class=\"st\">50m</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\"></a><span class=\"dt\">max_binlog_cache_size</span><span class=\"ot\">=</span><span class=\"st\">256m</span></span></code></pre></div>\n<p>启动Master：</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"ex\">docker</span> run --name mysql_master \\</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a>    --mount type=bind,src=/Users/hfli/mysql-replication/master/cnf/my.cnf,dst=/etc/my.cnf \\</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a>    --mount type=bind,src=/Users/hfli/mysql-replication/master/data/,dst=/var/lib/mysql \\</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a>    -e MYSQL_ROOT_PASSWORD=1125482715 \\</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a>    -d mysql:5.7.24</span></code></pre></div>\n<p>然后需要登录到MySQL创建一个用来复制的用户</p>\n<pre class=\"mysql\"><code>create user &#39;replication&#39; identified by &#39;1153687060&#39;;\ngrant replication slave on *.* to &#39;replication&#39;@&#39;%&#39; identified by &#39;1153687060&#39;;</code></pre>\n<p>接下来需要看一下Master库的状态:</p>\n<pre><code>mysql&gt; show master status;\n+------------------+----------+--------------+------------------+-------------------+\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+------------------+----------+--------------+------------------+-------------------+\n| mysql-bin.000003 |      696 |              |                  |                   |\n+------------------+----------+--------------+------------------+-------------------+\n1 row in set (0.00 sec)</code></pre>\n<h1 id=\"从库配置\">从库配置</h1>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode ini\"><code class=\"sourceCode ini\"><span id=\"cb5-1\"><a href=\"#cb5-1\"></a><span class=\"co\"># slave1/cnf/my.cnf</span></span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\"></a><span class=\"kw\">[mysqld]</span></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\"></a></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\"></a><span class=\"dt\">server-id</span><span class=\"ot\">=</span><span class=\"dv\">2</span></span></code></pre></div>\n<p>启动docker：</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb6-1\"><a href=\"#cb6-1\"></a><span class=\"ex\">docker</span> run --name mysql_slave1 \\</span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\"></a>    --mount type=bind,src=/Users/hfli/mysql-replication/slave1/cnf/my.cnf,dst=/etc/my.cnf \\</span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\"></a>    --mount type=bind,src=/Users/hfli/mysql-replication/slave1/data/,dst=/var/lib/mysql \\</span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\"></a>    --link mysql_master \\</span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\"></a>    -e MYSQL_ROOT_PASSWORD=1125482715 \\</span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\"></a>    -d mysql:5.7.24</span></code></pre></div>\n<p>然后即可启动Replication:</p>\n<pre><code>mysql&gt; change master to master_host=&#39;mysql_master&#39;,master_user=&#39;replication&#39;,master_password=&#39;1153687060&#39;,master_log_file=&#39;mysql-bin.000003&#39;,master_log_pos=696;\nQuery OK, 0 rows affected, 2 warnings (0.03 sec)\n\nmysql&gt; start slave;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; show slave status\\G;\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: mysql_master\n                  Master_User: replication\n                  Master_Port: 3306\n                Connect_Retry: 60\n              Master_Log_File: mysql-bin.000003\n          Read_Master_Log_Pos: 696\n               Relay_Log_File: c17b953fb671-relay-bin.000002\n                Relay_Log_Pos: 320\n        Relay_Master_Log_File: mysql-bin.000003\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n              Replicate_Do_DB:\n          Replicate_Ignore_DB:\n           Replicate_Do_Table:\n       Replicate_Ignore_Table:\n      Replicate_Wild_Do_Table:\n  Replicate_Wild_Ignore_Table:\n                   Last_Errno: 0\n                   Last_Error:\n                 Skip_Counter: 0\n          Exec_Master_Log_Pos: 696\n              Relay_Log_Space: 534\n              Until_Condition: None\n               Until_Log_File:\n                Until_Log_Pos: 0\n           Master_SSL_Allowed: No\n           Master_SSL_CA_File:\n           Master_SSL_CA_Path:\n              Master_SSL_Cert:\n            Master_SSL_Cipher:\n               Master_SSL_Key:\n        Seconds_Behind_Master: 0\nMaster_SSL_Verify_Server_Cert: No\n                Last_IO_Errno: 0\n                Last_IO_Error:\n               Last_SQL_Errno: 0\n               Last_SQL_Error:\n  Replicate_Ignore_Server_Ids:\n             Master_Server_Id: 1\n                  Master_UUID: 83a0a667-1d50-11e9-b754-0242ac110002\n             Master_Info_File: /var/lib/mysql/master.info\n                    SQL_Delay: 0\n          SQL_Remaining_Delay: NULL\n      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates\n           Master_Retry_Count: 86400\n                  Master_Bind:\n      Last_IO_Error_Timestamp:\n     Last_SQL_Error_Timestamp:\n               Master_SSL_Crl:\n           Master_SSL_Crlpath:\n           Retrieved_Gtid_Set:\n            Executed_Gtid_Set:\n                Auto_Position: 0\n         Replicate_Rewrite_DB:\n                 Channel_Name:\n           Master_TLS_Version:\n1 row in set (0.00 sec)</code></pre>\n<p>一个有趣的问题：如果我修改了从库，会产生什么影响？例如已经有重复的数据，那么同步的时候就会报错，我们通过Last_Error可以看到错误。</p>\n<pre><code> Last_Errno: 1062\n Last_Error: Error &#39;Duplicate entry &#39;2&#39; for key &#39;PRIMARY&#39;&#39; on query. Default database: &#39;foo&#39;. Query: &#39;INSERT INTO `foo`.`bar` (`id`, `remark`) VALUES (&#39;2&#39;, &#39;existing&#39;)&#39;</code></pre>\n","categories":["Programing","Mysql"],"tags":["Replication"]},{"title":"一个数据导入的有趣问题","url":"/it/arch/microservice_and_migration/","content":"<p>相比于传统的单体应用，在基于微服务架构的系统中进行数据导入的操作显得更加复杂一点。通常而言，微服务的架构中包含了多个服务，服务的技术架构也可能大相径庭，同时考虑到拓展的需要，每个服务都有可能会拓展成多个instance。最近遇到一个有趣的问题，进行了一些思考。 <a id=\"more\"></a> 场景大致是这样的：</p>\n<ul>\n<li>我们有一个单独的service（以下简称SM），每天定时从一个目录读取文件（一个压缩包）。其中这个包中包括多个文件，分别对应到不同的业务数据，这些数据又影响到多个不同的service（以下简称SA，SB，SC）</li>\n<li>于是SM读取到文件之后，解析文件，并通过消息发送给SA，SB，SC。收到消息大小的限制，文件中的内容不能一次性发送完成，需要拆分成N个消息（比如每200条数据一个消息）</li>\n<li>SA，SB都是增量更新，因此收到数据后，要么新增，要么更新，就可以了。很完美。</li>\n<li>但是SC确每次都是全量更新。</li>\n</ul>\n<p>问题来了，如果按照SA，SB的做法，SC面临的问题有两个：</p>\n<ul>\n<li>如果没有办法区分一条数据是新增还是更新，那直接有问题</li>\n<li>即便可以，如何能删除多余的数据？ 譬如原来有200条，现在过来150条，这150条更新了，多余的50条则没有办法删除</li>\n</ul>\n<p>一个直接的办法是在SM开始的时候，先去SC删除所有的数据，然后再将数据发送过去就可以了。但是这样带来的问题就是，万一后面导入失败了，而删除已经做了，会造成以前的数据也不可用。这在我们的业务场景里面是比较致命的，应该至少保证同步失败的时候，保持上一次的数据。基于这个场景，想了一个解决方案:</p>\n<ul>\n<li>在数据表中加一个version字段标识，表示是哪一批次的数据</li>\n<li>创建一个视图，根据version来查询出最新的数据</li>\n<li>同步完成之后，更新视图</li>\n</ul>\n<p>下面详细来说。假定我们是一个K-V类似的配置的导入，首先创建表和视图:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode sql\"><code class=\"sourceCode sql\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"kw\">create</span> <span class=\"kw\">table</span> t_raw_config(</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a><span class=\"kw\">id</span> <span class=\"dt\">int</span> <span class=\"kw\">not</span> <span class=\"kw\">null</span> <span class=\"kw\">primary</span> <span class=\"kw\">key</span> auto_increment,</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>`version` <span class=\"dt\">char</span>(<span class=\"dv\">6</span>) <span class=\"kw\">not</span> <span class=\"kw\">null</span>,</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>name <span class=\"dt\">varchar</span>(<span class=\"dv\">50</span>) <span class=\"kw\">not</span> <span class=\"kw\">null</span>,</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a><span class=\"fu\">value</span> <span class=\"dt\">varchar</span>(<span class=\"dv\">100</span>)</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>);</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\"></a><span class=\"kw\">create</span> <span class=\"kw\">view</span> t_config</span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\"></a><span class=\"kw\">as</span></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\"></a><span class=\"kw\">select</span> <span class=\"kw\">id</span>, name, <span class=\"fu\">value</span> <span class=\"kw\">from</span> t_raw_config;</span></code></pre></div>\n<p>在SM中，我们需要做的事情是：</p>\n<ul>\n<li>在导入开始的时候，生成一个唯一的version，简单一点，我们根据日期来，比如<span class=\"math inline\">\\({\\displaystyle version=20190101}\\)</span></li>\n<li>假定有1001条数据，每200个拆分成1个message，则有6个<span class=\"math inline\">\\({\\displaystyle message=\\{1, 2, 3, 4, 5, 6\\}}\\)</span></li>\n<li>SC中，每消费完成一个message，则记录下消费的message到一个列表中，例如<span class=\"math inline\">\\({\\displaystyle messages20190101 = \\{1, 2\\}}\\)</span>（例如存储在redis中）</li>\n<li>SM中解析完成后，告知SC所有的message，即<span class=\"math inline\">\\({\\displaystyle message=\\{1, 2, 3, 4, 5, 6\\}}\\)</span></li>\n<li>SC收到告知后，比对<span class=\"math inline\">\\({\\displaystyle messages20190101}\\)</span>是否与<span class=\"math inline\">\\({\\displaystyle message=\\{1, 2, 3, 4, 5, 6\\}}\\)</span>匹配，如果不匹配则等待（可以利用redis的BLPOP实现，如果不匹配则不断去BLPOP）</li>\n<li>所有的消息都消费完成后，更新视图，将version设置为<span class=\"math inline\">\\({\\displaystyle version=20190101}\\)</span>。如果考虑到性能问题，可以再version字段上建索引；考虑空间问题，可以在这一步以前version的数据</li>\n</ul>\n","categories":["Programing","Distributed"],"tags":["ETL - Migration - MicroService"]},{"title":"Visual Studio Code for C++ development on MacOS","url":"/it/c/visual_studio_code_cpp_ide/","content":"<p>I've tried lot's of c++ IDEs on MacOS X, but none of them is as powerful as VS Studio on Windows. It's always hard for me to choose an IDE before I want to write some code, as it's called the <em>Selection phobia</em>. Generally we have the following choose:</p>\n<ul>\n<li>Vim/Emacs (I'm familiar with VIM but it's still not an easy way, for me)</li>\n<li>CodeBlocks (not good maintained on MacOS)</li>\n<li>CodeLite (it's a good choose!)</li>\n<li>XCode (I just don't like it, <strong>Heavy</strong> and ugly, can't get used to it)</li>\n<li>QT Creator (it's useful especially when developing Qt projects)</li>\n<li>Eclipse CDT</li>\n<li>NetBeans</li>\n<li>CLion (maybe the best c++ IDE on MaxOS, unfortunately does not have a free version)</li>\n<li>Textmate</li>\n</ul>\n<p>Recently I tried Visual Studio Code, it's really a good choose for those who want to write some c++ code in a lightweight IDE. <a id=\"more\"></a></p>\n<h1 id=\"setup-visual-studio-code-for-c-development\">Setup Visual Studio Code for C++ development</h1>\n<p>First we have to install <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">Visual Studio Code</a>, and a few extensions:</p>\n<ul>\n<li>C/C++</li>\n<li>Easy C++ projects</li>\n</ul>\n<p>After installed those extensions, reload the editor to activate them. Now we can create a project:</p>\n<ul>\n<li>Choose File &gt; Open folder to open a work directory</li>\n<li>Press F1 and type \"c++\", then select \"Create new C++ project\" command.</li>\n</ul>\n<p>After the above steps a new project with Makefile is generated.</p>\n<h1 id=\"common-usage\">Common usage</h1>\n<p>To debug or run the project, just click the button on the bottom status bar, it's easy:</p>\n<figure>\n<img src=\"/images/vscode_debugging.png\" alt=\"\" /><figcaption>visual code studio snapshot</figcaption>\n</figure>\n<p>to run other commands, you could just press F1 and guess, for example, to format the code, just search \"format\" and then you got a choice.</p>\n<h1 id=\"update-how-to-setup-eclipse-cdt-in-macox\">Update: How to setup eclipse CDT in MacOX</h1>\n<p>Recently I tried to use eclipse-cdt with cmake build system, there are a few tips:</p>\n<ul>\n<li>Need to install <code>cmake</code> and <code>ninjia</code></li>\n<li>Need to start eclipse from command line, this is a <a href=\"https://www.wfbsoftware.de/2019/01/12/eclipse-cdt-c-cmake-on-mac/\" target=\"_blank\" rel=\"noopener\">bug</a></li>\n</ul>\n<p>In order to debug, basiclly eclipse only supports gdb, which is has been replaced with lldb in MacOS, so a few setps needed to make it working:</p>\n<ul>\n<li>install gdb via mac ports, <code>sudo port install gdb</code></li>\n<li>after installed, it's located in <code>/opt/local/bin/ggdb</code></li>\n<li>create an alias for gdb in your bash profile(eg. <code>~/.zshrc</code>), <code>alias gdb=ggdb</code></li>\n<li>codesign for gdb, following <a href=\"https://www.thomasvitale.com/how-to-setup-gdb-and-eclipse-to-debug-c-files-on-macos-sierra/\" target=\"_blank\" rel=\"noopener\">How to setup gdb and Eclipse to debug C++ files on macOS Mojave</a></li>\n<li>create gdb init file: <code>echo \"set startup-with-shell off\" &gt; ~/gdbinit</code></li>\n<li>need to start eclipse from terminal, otherwise it will not recongnize gdb</li>\n</ul>\n<p>Reference:</p>\n<ul>\n<li><a href=\"https://dev.to/acharluk/developing-c-with-visual-studio-code-4pb9\" target=\"_blank\" rel=\"noopener\">Developing C++ with Visual Studio Code</a></li>\n</ul>\n","categories":["Programing","C++"],"tags":["Visual Studio Code"]},{"title":"B-Tree算法","url":"/it/algorithm/btree_algorithm/","content":"<p>B-Tree(区别于二叉树)是一种平衡多叉搜索树。它的插入、搜索、删除、</p>\n<figure>\n<img src=\"/images/btree-order5.png\" alt=\"\" /><figcaption>btree of order 5</figcaption>\n</figure>\n<a id=\"more\"></a>\n<h1 id=\"b-tree的定义\">B-Tree的定义</h1>\n<p>根据Knuth的定义<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\" role=\"doc-noteref\"><sup>1</sup></a>，<span class=\"math inline\">\\({\\displaystyle m}\\)</span>阶的B-Tree有如下的特性：</p>\n<ol>\n<li>节点左边的元素都比它小，节点右边的元素都比它大</li>\n<li>每个节点最多有<span class=\"math inline\">\\({\\displaystyle m}\\)</span>个子节点</li>\n<li>除了根节点之外，非叶节点<a href=\"#fn2\" class=\"footnote-ref\" id=\"fnref2\" role=\"doc-noteref\"><sup>2</sup></a>至少有<span class=\"math inline\">\\({\\displaystyle m/2}\\)</span>个子节点</li>\n<li>如果根节点不是叶子节点则其至少有两个子节点</li>\n<li>包含<span class=\"math inline\">\\({\\displaystyle k}\\)</span>个子节点的节点共有<span class=\"math inline\">\\({\\displaystyle k-1}\\)</span>个键</li>\n<li>所有的叶子节点的高度相同</li>\n</ol>\n<p>一般表示B-Tree有两种表示方法<a href=\"#fn3\" class=\"footnote-ref\" id=\"fnref3\" role=\"doc-noteref\"><sup>3</sup></a>：</p>\n<ul>\n<li>B-Tree of order <span class=\"math inline\">\\({\\displaystyle d}\\)</span> or <span class=\"math inline\">\\({\\displaystyle M}\\)</span></li>\n<li>B-Tree of degree or <span class=\"math inline\">\\({\\displaystyle t}\\)</span></li>\n</ul>\n<h2 id=\"kuath-b-tree-of-order-displaystyle-d\">Kuath: B-Tree of Order <span class=\"math inline\">\\({\\displaystyle d}\\)</span></h2>\n<p>其中<span class=\"math inline\">\\({\\displaystyle M=5}\\)</span> 表示每一个节点中<em>至多有5个子节点</em>；则有如下的特性： <span class=\"math display\">\\[\n\\begin{align}\n&amp;Max(children) = 5 \\\\\n&amp;Min(children) = ceil(M/2) = 3 \\\\\n&amp;Max(keys) = Max(children) - 1 = 4 \\\\\n&amp;Min(keys) = Min(children) - 1 = 2\n\\end{align}\n\\]</span></p>\n<h2 id=\"clrs-b-tree-of-min-degree-displaystyle-t\">CLRS: B-Tree of min degree <span class=\"math inline\">\\({\\displaystyle t}\\)</span></h2>\n<p>而<span class=\"math inline\">\\({\\displaystyle t=5}\\)</span> 则定义了一个节点中<em>至少有5个子节点</em> <span class=\"math display\">\\[\n\\begin{align}\n&amp;Max(children) = 2t = 10 \\\\\n&amp;Min(children) = t = 5 \\\\\n&amp;Max(keys) = 2t -1 = 9 \\\\\n&amp;Min(keys) = t - 1 = 4\n\\end{align}\n\\]</span></p>\n<pre><code>Knuth Order, k |  (min,max)  | CLRS Degree, t\n---------------|-------------|---------------\n     0         |      -      |        –\n     1         |      –      |        –\n     2         |      –      |        –\n     3         |    (2,3)    |        –\n     4         |    (2,4)    |      t = 2\n     5         |    (3,5)    |        –\n     6         |    (3,6)    |      t = 3\n     7         |    (4,7)    |        –\n     8         |    (4,8)    |      t = 4\n     9         |    (5,9)    |        –\n     10        |    (5,10)   |      t = 5</code></pre>\n<h2 id=\"b-tree的高度\">B-Tree的高度<a href=\"#fn4\" class=\"footnote-ref\" id=\"fnref4\" role=\"doc-noteref\"><sup>4</sup></a></h2>\n<p>根据B-Tree的定义（Min Degree t)，如果Btree的高度为<span class=\"math inline\">\\({\\displaystyle h}\\)</span>, 考虑最少含有多少个key, 则当：</p>\n<ul>\n<li>Root节点包含1个key</li>\n<li>其他所有节点有且仅有有<span class=\"math inline\">\\({\\displaystyle t-1}\\)</span> 个key</li>\n</ul>\n<p>这种场景时，所包含的key最少：</p>\n<figure>\n<img src=\"/images/btree_height_3.gif\" alt=\"\" /><figcaption>Btree of height 3</figcaption>\n</figure>\n<p>设<span class=\"math inline\">\\({\\displaystyle S_{h}}\\)</span>为Btree第h层的节点数，容易看出:</p>\n<ul>\n<li>当<span class=\"math inline\">\\({\\displaystyle depth=0}\\)</span> 时，<span class=\"math inline\">\\({\\displaystyle S_{0}=1}\\)</span></li>\n<li>当<span class=\"math inline\">\\({\\displaystyle depth=1}\\)</span> 时，<span class=\"math inline\">\\({\\displaystyle S_{1}=2}\\)</span></li>\n<li>当<span class=\"math inline\">\\({\\displaystyle depth=2}\\)</span> 时，<span class=\"math inline\">\\({\\displaystyle S_{2}=2\\cdot t}\\)</span></li>\n<li>当<span class=\"math inline\">\\({\\displaystyle depth=h}\\)</span> 时，<span class=\"math inline\">\\({\\displaystyle S_{h}=2\\cdot t^{h-1}}\\)</span></li>\n</ul>\n<p>从<span class=\"math inline\">\\({\\displaystyle h=1}\\)</span>开始，每一层的key数目即<span class=\"math inline\">\\({\\displaystyle S(key)_{h}=S_{h}\\cdot (t-1)}\\)</span>，根据等比数列求和公式即可算出总的key数目为：</p>\n<p><span class=\"math display\">\\[\n\\begin{aligned}  \nMin(keys) &amp;=1 + \\sum_{i=1}^{h}{(t-1)\\cdot 2t^{i-1}} \\\\\n    &amp;=1 + (t-1)\\sum_{i=1}^{h}{2t^{i-1}} \\\\\n    &amp;=1 + 2(t-1)\\sum_{i=1}^{h}{t^{i-1}} \\\\\n    &amp;=1 + 2(t-1){\\Big(\\frac{1-t^h}{1-t}\\Big)} \\\\\n    &amp;=2t^h-1\n\\end{aligned}\n\\]</span></p>\n<p>设<span class=\"math inline\">\\({\\displaystyle n}\\)</span> 为B-Tree的所有key数，则有：</p>\n<p><span class=\"math display\">\\[\n\\begin{aligned} \nn &amp;\\geq Min(keys) \\\\\n  &amp;=2t^h-1\n\\end{aligned}\n\\]</span></p>\n<p>可以得：</p>\n<p><span class=\"math display\">\\[\nh \\leq log_{t}\\frac{1+n}{2}\n\\]</span></p>\n<h1 id=\"btree操作\">Btree操作</h1>\n<h2 id=\"btree查找\">Btree查找</h2>\n<p>查找算法类似于2叉树的查找，步骤如下：</p>\n<ul>\n<li>从根节点开始，依次同节点中<span class=\"math inline\">\\({\\displaystyle k_{i}}\\)</span>进行比较，如果大于或者等于<span class=\"math inline\">\\({\\displaystyle k_{i}}\\)</span>则停止</li>\n<li>如果找到相等的key，则停止搜索</li>\n<li>如果没有找到，则到下一级节点中进行查找；如果已经是叶子节点，则查找结束</li>\n</ul>\n<p>通常当<span class=\"math inline\">\\({\\displaystyle M}\\)</span>较小时，我们在节点中查找的时候只需要进行顺序查找即可；如果较大的情况下，可以进行二分查找提高搜索的效率。</p>\n<h2 id=\"btree插入\">Btree插入</h2>\n<h3 id=\"split\">Split</h3>\n<p>在进行insert之前，需要考虑的就是，btree规定了一个节点中最大的child的数目，当一个节点中子节点的数目超过允许的最大值的时候，需要将节点拆分为两个。例如：</p>\n<ul>\n<li>Order=8时，每个节点最多允许7个key，这样split之后正好平均</li>\n</ul>\n<figure>\n<img src=\"/images/btree-split-1.png\" alt=\"\" /><figcaption>btree of order 8</figcaption>\n</figure>\n<ul>\n<li>Order=7时，每个节点最多6个key，这样拆分之后，节点是不平均的：</li>\n</ul>\n<figure>\n<img src=\"/images/btree-split-2.png\" alt=\"\" /><figcaption>btree of order 7</figcaption>\n</figure>\n<h3 id=\"insert\">Insert</h3>\n<p>当order为奇数时，插入A~Q的过程如下：</p>\n<figure>\n<img src=\"/images/btree_order_5_insert.png\" alt=\"\" /><figcaption>btree of order 5</figcaption>\n</figure>\n<p>当order为偶数时，插入A-J的过程如下：</p>\n<figure>\n<img src=\"/images/btree_order_4_insert.png\" alt=\"\" /><figcaption>btree of order 4</figcaption>\n</figure>\n<p>在Insert的过程中，一般的做法是先将元素插入到叶节点，这时候如果发现叶节点满了，需要将其Split，并将其中一个key提升到父节点中。同时，需要看父节点是否满，如果满了也需要进行拆分，直到根节点。但是这种做法需要插入后再回溯，比较难以实现。<a href=\"http://staff.ustc.edu.cn/~csli/graduate/algorithms/book6/chap19.htm\" target=\"_blank\" rel=\"noopener\">另一种方式</a>则是在插入的过程中，一旦发现节点已经满了，无法再容纳元素，则先将其拆分，然后再继续朝下查找。这样只需要查找一次，再最后插入到叶子节点的时候，能够保证不会溢出。</p>\n<h3 id=\"preemtive-split\">Preemtive Split</h3>\n<p>如上所说，在insert操作的时候，是先插入元素，然后再进行拆分的，这样可能插入之后还需要一直递归到上层节点进行拆分。例如下面的一个场景：</p>\n<figure>\n<img src=\"/images/btree_order_4_insert_normal.png\" alt=\"\" /><figcaption>btree of order 4</figcaption>\n</figure>\n<p>而Preemtive Split正是在insert之前即进行拆分，当发现一个节点快要满了的时候，就先split之后再插入，自顶向下，不需要再回溯到上一层的节点。</p>\n<figure>\n<img src=\"/images/btree_order_4_insert_preemtive.png\" alt=\"\" /><figcaption>btree of order 4</figcaption>\n</figure>\n<p>从上面的例子可以看到，两种方式构造出的Btree在插入I之后其实是不大一样的，而当J插入之后则变成一致了。</p>\n<h2 id=\"删除操作\">删除操作</h2>\n<p>More:</p>\n<ul>\n<li><a href=\"https://www.cs.usfca.edu/~galles/cs673/lecture/lecture11.pdf\" target=\"_blank\" rel=\"noopener\">Graduate Algorithms CS673-2016F-11 B-Trees</a></li>\n</ul>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr />\n<ol>\n<li id=\"fn1\" role=\"doc-endnote\"><p>https://en.wikipedia.org/wiki/B-tree<a href=\"#fnref1\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn2\" role=\"doc-endnote\"><p>没有孩子的节点<a href=\"#fnref2\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn3\" role=\"doc-endnote\"><p>https://stackoverflow.com/questions/28846377/what-is-the-difference-btw-order-and-degree-in-terms-of-tree-data-structure<a href=\"#fnref3\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn4\" role=\"doc-endnote\"><p>http://staff.ustc.edu.cn/~csli/graduate/algorithms/book6/chap19.htm<a href=\"#fnref4\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n</ol>\n</section>\n","categories":["Programing","Algorithm"],"tags":["B-Tree"]},{"title":"关于随机数","url":"/it/c/random_numbers/","content":"<p>随机数顾名思义就是你无法确定的一个数（但是你可以设定一个范围），就好比彩票摇号一样，所有可能的组合是知道的，但是到底会摇出个什么数字出来，谁都不知道。否则我早就买彩票去了😂 那随机数是怎么生成出来的？ <a id=\"more\"></a></p>\n<h1 id=\"随机数的定义\">随机数的定义</h1>\n<p>引用维基百科，</p>\n<blockquote>\n<p>根据密码学原理，随机数的随机性检验可以分为三个标准：</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>统计学伪随机性。统计学伪随机性指的是在给定的随机比特流样本中，1的数量大致等于0的数量，同理，“10”“01”“00”“11”四者数量大致相等。类似的标准被称为统计学随机性。满足这类要求的数字在人类“一眼看上去”是随机的。</li>\n<li>密码学安全伪随机性。其定义为，给定随机样本的一部分和随机算法，不能有效的演算出随机样本的剩余部分。</li>\n<li>真随机性。其定义为随机样本不可重现。实际上衹要给定边界条件，真随机数并不存在，可是如果产生一个真随机数样本的边界条件十分复杂且难以捕捉（比如计算机当地的本底辐射<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\" role=\"doc-noteref\"><sup>1</sup></a>波动值），可以认为用这个方法演算出来了真随机数。但实际上，这也只是非常接近真随机数的伪随机数，一般认为，无论是本地辐射、物理噪音、抛硬币……等都是可被观察了解的，任何基于经典力学产生的随机数，都只是伪随机数。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>相应的，随机数也分为三类：</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>伪随机数：满足第一个条件的随机数。</li>\n<li>密码学安全的伪随机数：同时满足前两个条件的随机数。可以通过密码学安全伪随机数生成器计算得出。</li>\n<li>真随机数：同时满足三个条件的随机数。</li>\n</ul>\n</blockquote>\n<h1 id=\"linux系统中的随机数设备\">Linux系统中的随机数设备</h1>\n<p>Linux以及一些类Unix系统中有随机数的特殊文件，一般如下：</p>\n<ul>\n<li>/dev/random :提供基于当前系统熵池<a href=\"#fn2\" class=\"footnote-ref\" id=\"fnref2\" role=\"doc-noteref\"><sup>2</sup></a>的真随机数</li>\n<li>/dev/urandom:是非阻塞的随机数生成器</li>\n</ul>\n<p>两者都是CSPRNG<a href=\"#fn3\" class=\"footnote-ref\" id=\"fnref3\" role=\"doc-noteref\"><sup>3</sup></a>，可以使用以下命令来输出：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"fu\">od</span> -An -N1 -i /dev/random</span></code></pre></div>\n<h1 id=\"一些伪随机数生成算法\">一些伪随机数生成算法</h1>\n<h2 id=\"平方取中法\">平方取中法</h2>\n<p>这个算法比较简单，由冯·诺伊曼在1946年提出。 算法步骤如下：</p>\n<ul>\n<li>选择一个 <span class=\"math inline\">\\({\\displaystyle m}\\)</span> 位数 <span class=\"math inline\">\\({\\displaystyle N_{i}}\\)</span> 作为种子</li>\n<li>计算 <span class=\"math inline\">\\({\\displaystyle N_{i}^{2}}\\)</span></li>\n<li>若 <span class=\"math inline\">\\({\\displaystyle N_{i}^{2}}\\)</span>不足 <span class=\"math inline\">\\({\\displaystyle 2m}\\)</span>个位，在前补0。在这个数选中间 <span class=\"math inline\">\\({\\displaystyle m}\\)</span>个位的数，即 <span class=\"math inline\">\\({\\displaystyle 10^{\\lfloor {\\frac {m}{2}}\\rfloor +1}} {\\displaystyle 10^{\\lfloor {\\frac {m}{2}}\\rfloor +1}}\\)</span>至 <span class=\"math inline\">\\({\\displaystyle 10^{\\lfloor {\\frac {m}{2}}\\rfloor +m}} {\\displaystyle 10^{\\lfloor {\\frac {m}{2}}\\rfloor +m}}\\)</span>的数，将结果作为 <span class=\"math inline\">\\({\\displaystyle N_{i+1}}\\)</span></li>\n</ul>\n<h2 id=\"线性同余法\">线性同余法</h2>\n<p>这个算法根据递归公式计算:</p>\n<p><span class=\"math display\">\\[\nX_{n+1}=\\left(aX_{n}+c\\right)~~{\\bmod {~}}~m\n\\]</span></p>\n<p>Java中的Random类就是使用就是这种算法。但这个不是密码学安全的随机数算法，如果要生成密码学安全的随机数，需要使用SecureRandom类来生成。</p>\n<h2 id=\"blum-blum-shub\">Blum Blum Shub</h2>\n<p>采用如下的递归公式计算：</p>\n<p><span class=\"math display\">\\[\nx_{n+1}=x_{n}^{2}{\\bmod  M}\n\\]</span></p>\n<p>其中：<span class=\"math inline\">\\(M=p\\cdot q\\)</span>是两个大素数p和q的乘积</p>\n<p>例如令<span class=\"math inline\">\\({\\displaystyle p=11}\\)</span>, <span class=\"math inline\">\\({\\displaystyle q=19}\\)</span>, <span class=\"math inline\">\\({\\displaystyle s=3}\\)</span>，则：</p>\n<ol>\n<li><span class=\"math inline\">\\({\\displaystyle x_{0}=3^{2}{\\bmod 209}=9}\\)</span></li>\n<li><span class=\"math inline\">\\({\\displaystyle x_{1}=9^{2}{\\bmod 209}=81}\\)</span></li>\n<li><span class=\"math inline\">\\({\\displaystyle x_{2}=81^{2}{\\bmod 209}=82}\\)</span></li>\n<li><span class=\"math inline\">\\({\\displaystyle x_{3}=82^{2}{\\bmod 209}=36}\\)</span></li>\n<li>...</li>\n</ol>\n<p>除此之外，还有一些其他的随机数算法，便不过多介绍。</p>\n<p>参考:</p>\n<ul>\n<li><a href=\"http://www.2uo.de/myths-about-urandom/\" target=\"_blank\" rel=\"noopener\">Myths about /dev/urandom</a></li>\n<li><a href=\"http://www.cnblogs.com/Geometry/archive/2011/01/25/1944582.html\" target=\"_blank\" rel=\"noopener\">一个生成伪随机数的超级算法</a></li>\n</ul>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr />\n<ol>\n<li id=\"fn1\" role=\"doc-endnote\"><p>本体辐射是指人类生活环境本来存在的辐射，主要包括宇宙射线和自然界中天然放射性核素发出的射线。<a href=\"#fnref1\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn2\" role=\"doc-endnote\"><p>指设备驱动程序或其它来源的背景噪声计算出来的某种结果<a href=\"#fnref2\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn3\" role=\"doc-endnote\"><p>Cryptographically Secure Pseudorandom Number Generator，加密安全的伪随机数生成器<a href=\"#fnref3\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n</ol>\n</section>\n","categories":["Programing","C++"],"tags":["Random Number"]},{"title":"Compile Argon2 for Android","url":"/it/mobile/compile_argon2_for_android/","content":"<p><a href=\"https://keepass.info/help/kb/kdbx_4.html\" target=\"_blank\" rel=\"noopener\">Keepass</a>中使用了一个<a href=\"https://www.argon2.com/\" target=\"_blank\" rel=\"noopener\">Argon2</a>的算法来存储用户主密码，这个算法被认为是下一代的较为安全的密码散列算法。 <a id=\"more\"></a> 我们来看看 Argon2算法：</p>\n<pre><code>hfli@CNhfli ~/Documents/phc-winner-argon2 (master*) $ echo -n &quot;password&quot; | ./argon2 somehelloworld -t 2 -m 16 -p 4 -l 24\nType:       Argon2i\nIterations: 2\nMemory:     65536 KiB\nParallelism:    4\nHash:       2748e90a5a301dbcf46067a8784d3e73c7acc8939b4ee02d\nEncoded:    $argon2i$v=19$m=65536,t=2,p=4$c29tZWhlbGxvd29ybGQ$J0jpClowHbz0YGeoeE0+c8esyJObTuAt\n0.126 seconds\nVerification ok</code></pre>\n<p>这个算法又分为两个版本,Argon2i和Argon2d:</p>\n<blockquote>\n<p>Argon2d provides the highest resistance against GPU cracking attacks. Argon2i is designed to resist side-channel attacks.</p>\n</blockquote>\n<p>Keepass中选择的是Argon2d</p>\n<blockquote>\n<p>Only the Argon2d variant of Argon2 is supported (a strong defense against GPU/ASIC cracking attacks is the most important goal, and Argon2d here is better than Argon2i; side-channel timing attacks are basically irrelevant, because KeePass is a local application, not a remote server)</p>\n</blockquote>\n<p>在安卓上编译可以参考如下步骤:</p>\n<p>Application.mk</p>\n<pre><code>APP_BUILD_SCRIPT := Android.mk\nAPP_STL := gnustl_shared\nAPP_ABI := armeabi-v7a</code></pre>\n<p>Android.mk</p>\n<pre><code>LOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE := libargon2\nLOCAL_CPPFLAGS += -fexceptions\n\nLOCAL_C_INCLUDES := \\\n    $(LOCAL_PATH) \\\n    $(LOCAL_PATH)/include \\\n\nLOCAL_SRC_FILES := \\\n    src/argon2.c \\\n    src/core.c \\\n    src/blake2/blake2b.c \\\n    src/encoding.c \\\n    src/ref.c \\\n    src/thread.c \\\n\ninclude $(BUILD_SHARED_LIBRARY)</code></pre>\n<p>编译</p>\n<pre><code>ndk-build NDK_PROJECT_PATH=. NDK_APPLICATION_MK=Application.mk</code></pre>\n","categories":["Programing","Security"],"tags":["Android","Argon2","JNI"]},{"title":"使用JMH进行Benchmark测试","url":"/it/java/benchmark_using_jmh/","content":"<p>JMH是一个测试Java程序性能的工具，比如我们现在要测试一下JDK8自带的Base64和<a href=\"http://www.java2s.com/Code/Java/Development-Class/AfastandmemoryefficientclasstoencodeanddecodetoandfromBASE64infullaccordancewithRFC2045.htm\" target=\"_blank\" rel=\"noopener\">另一个实现</a>的性能。 <a id=\"more\"></a> 先看看 build.gradle 中怎么写：</p>\n<pre class=\"groovy\"><code>group &#39;riguz&#39;\nversion &#39;1.0-SNAPSHOT&#39;\n\napply plugin: &#39;java&#39;\n\nsourceCompatibility = 1.8\n\nsourceSets {\n    jmh\n}\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    jmhCompile project\n    jmhCompile &#39;org.openjdk.jmh:jmh-core:1.21&#39;\n    jmhCompile &#39;org.openjdk.jmh:jmh-generator-annprocess:1.21&#39;\n    jmhCompile group: &#39;junit&#39;, name: &#39;junit&#39;, version: &#39;4.12&#39;\n    testCompile group: &#39;junit&#39;, name: &#39;junit&#39;, version: &#39;4.12&#39;\n}\n\ntask jmh(type: JavaExec, description: &#39;Executing JMH benchmarks&#39;) {\n    classpath = sourceSets.jmh.runtimeClasspath\n    main = &#39;org.openjdk.jmh.Main&#39;\n}\n</code></pre>\n<p>然后写一个类：</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"at\">@Benchmark</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a>    <span class=\"at\">@Warmup</span>(iterations = <span class=\"dv\">1</span>, time = <span class=\"dv\">5</span>)</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a>    <span class=\"at\">@Measurement</span>(iterations = <span class=\"dv\">1</span>, time = <span class=\"dv\">5</span>)</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a>    <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">encodeWithJdk</span>() {</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a>        <span class=\"dt\">final</span> <span class=\"dt\">byte</span>[] bytes = Dream.<span class=\"fu\">text</span>.<span class=\"fu\">getBytes</span>();</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a>        <span class=\"dt\">byte</span>[] encoded = Base64.<span class=\"fu\">getEncoder</span>().<span class=\"fu\">encode</span>(bytes);</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a>        <span class=\"dt\">byte</span>[] decoded = Base64.<span class=\"fu\">getDecoder</span>().<span class=\"fu\">decode</span>(encoded);</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\"></a>        <span class=\"fu\">assertTrue</span>(<span class=\"bu\">Arrays</span>.<span class=\"fu\">equals</span>(bytes, decoded));</span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\"></a>    }</span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\"></a></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\"></a>    <span class=\"at\">@Benchmark</span></span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\"></a>    <span class=\"at\">@Warmup</span>(iterations = <span class=\"dv\">1</span>, time = <span class=\"dv\">5</span>)</span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\"></a>    <span class=\"at\">@Measurement</span>(iterations = <span class=\"dv\">1</span>, time = <span class=\"dv\">5</span>)</span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\"></a>    <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">encodeWithBase64Codec</span>() <span class=\"kw\">throws</span> <span class=\"bu\">IOException</span> {</span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\"></a>        <span class=\"dt\">final</span> <span class=\"dt\">byte</span>[] bytes = Dream.<span class=\"fu\">text</span>.<span class=\"fu\">getBytes</span>();</span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\"></a>        <span class=\"dt\">byte</span>[] encoded = Base64Codec.<span class=\"fu\">encodeToByte</span>(bytes, <span class=\"kw\">true</span>);</span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\"></a>        <span class=\"dt\">byte</span>[] decoded = Base64Codec.<span class=\"fu\">decodeFast</span>(encoded, encoded.<span class=\"fu\">length</span>);</span>\n<span id=\"cb2-18\"><a href=\"#cb2-18\"></a>        <span class=\"fu\">assertTrue</span>(<span class=\"bu\">Arrays</span>.<span class=\"fu\">equals</span>(bytes, decoded));</span>\n<span id=\"cb2-19\"><a href=\"#cb2-19\"></a>    }</span></code></pre></div>\n<p>其中Dream.text是一个很长的字符串。执行gradle的jmh task之后，可以得到结果</p>\n<pre><code>Benchmark                               Mode  Cnt   Score   Error  Units\nBase64BenchMark.encodeWithBase64Codec  thrpt    5  15.296 ± 2.538  ops/s\nBase64BenchMark.encodeWithJdk          thrpt    5  13.029 ± 1.563  ops/s</code></pre>\n<p>看样子要比JDK的实现强一丢丢，当然只是在上面的这种情况之下。差距并不大。</p>\n<p>参考:</p>\n<ul>\n<li>http://tutorials.jenkov.com/java-performance/jmh.html#why-are-java-microbenchmarks-hard</li>\n<li>https://www.jianshu.com/p/192b782c31bc</li>\n</ul>\n","categories":["Programing","Java"],"tags":["JMH","Benchmark","Base64","Perfomance"]},{"title":"使用 Antlr 解析配置文件","url":"/it/java/antlr_as_config/","content":"<p>在纠结了一阵子 yml,ini,xml甚至 lua 等等 配置文件的格式后，还是决定使用antlr实现了一种我自定义的格式的解析。 <a id=\"more\"></a> 这个格式是这个样子的:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode lua\"><code class=\"sourceCode lua\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"op\">//</span> Here is some comment</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a>shared <span class=\"op\">{</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>    string _baseUrl <span class=\"op\">=</span> <span class=\"st\">&quot;http://localhost:8080&quot;</span><span class=\"op\">;</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>    string domain   <span class=\"op\">=</span> <span class=\"st\">&quot;riguz.com&quot;</span><span class=\"op\">;</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>    bool ssl        <span class=\"op\">=</span> <span class=\"kw\">false</span><span class=\"op\">;</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>    int version     <span class=\"op\">=</span> <span class=\"dv\">19</span><span class=\"op\">;</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a>    int subVersion  <span class=\"op\">=</span> <span class=\"dv\">25</span><span class=\"op\">;</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\"></a>    float number  <span class=\"op\">=</span> <span class=\"dv\">19.25</span><span class=\"op\">;</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\"></a></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\"></a>    string urls         <span class=\"op\">=</span> <span class=\"op\">[</span><span class=\"st\">&quot;http://localhost:8080&quot;</span><span class=\"op\">,</span> <span class=\"st\">&quot;http://riguz.com:8080&quot;</span><span class=\"op\">];</span></span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\"></a>    string domains      <span class=\"op\">=</span> <span class=\"op\">[</span><span class=\"st\">&quot;riguz.com&quot;</span><span class=\"op\">,</span> <span class=\"st\">&quot;dr.riguz.com&quot;</span><span class=\"op\">];</span></span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\"></a>    bool sslArray       <span class=\"op\">=</span> <span class=\"op\">[</span><span class=\"kw\">true</span><span class=\"op\">,</span> <span class=\"kw\">false</span><span class=\"op\">];</span></span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\"></a>    int versionArray    <span class=\"op\">=</span> <span class=\"op\">[</span><span class=\"dv\">19</span><span class=\"op\">,</span> <span class=\"dv\">25</span><span class=\"op\">];</span></span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\"></a>    float numberArray   <span class=\"op\">=</span> <span class=\"op\">[</span><span class=\"dv\">18.01</span><span class=\"op\">,</span> <span class=\"dv\">19.25</span><span class=\"op\">,</span> <span class=\"dv\">20.23</span><span class=\"op\">];</span></span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\"></a><span class=\"op\">};</span></span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\"></a></span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\"></a>scope dev_db <span class=\"op\">{</span></span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\"></a>    string url <span class=\"op\">=</span> $<span class=\"op\">{</span>domain<span class=\"op\">}</span> <span class=\"op\">..</span> <span class=\"st\">&quot;:3306/mysql&quot;</span><span class=\"op\">;</span></span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\"></a>    string user <span class=\"op\">=</span> <span class=\"st\">&quot;lihaifeng&quot;</span><span class=\"op\">;</span></span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\"></a>    int connections <span class=\"op\">=</span> <span class=\"dv\">10</span><span class=\"op\">;</span></span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\"></a>    string password <span class=\"op\">=</span> <span class=\"st\">&quot;iikjouioqueyjkajkqq==&quot;</span><span class=\"op\">;</span></span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\"></a>    string domains <span class=\"op\">=</span> $<span class=\"op\">{</span>domains<span class=\"op\">};</span></span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\"></a><span class=\"op\">};</span></span></code></pre></div>\n<p>其实是一个k-v形式的文本文件，支持的基本类型有：字符串、布尔值、整数、小数、数组。定义的方法类似于Java或者C语言， <code>string _baseUrl = \"http://localhost:8080\"</code> 前面会限定数据类型。如果要定义数组，则用 <code>bool sslArray       = [true, false];</code> 这种形式。</p>\n<p>然后使用scope区分不同的配置块。因为可能有些相同的配置会重名，这样我们利用不同的scope去区分就好了。考虑到有些配置中需要共同的变量的使用，所以定义了一个shared的scope，这个是写死的scope，其他scope中只能引用shared scope中的变量。</p>\n<p>字符串连接使用<code>..</code>操作符。这样可以组装字符串。详细的实现可以在<a href=\"https://github.com/soleverlee/forks/tree/master/config/src/main\" target=\"_blank\" rel=\"noopener\">forks的子项目config</a>中找到。</p>\n<p>另外还实现了一个类似Play! Framework的路由定义文件的解析，长这个样子的:</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode lua\"><code class=\"sourceCode lua\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a>controllers admin<span class=\"op\">{</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a>package com<span class=\"op\">.</span>riguz<span class=\"op\">.</span>forks<span class=\"op\">.</span>demo<span class=\"op\">.</span>controller</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a>UserController</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a>FileController</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a><span class=\"op\">}</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a>controllers <span class=\"op\">{</span></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\"></a>package com<span class=\"op\">.</span>riguz<span class=\"op\">.</span>forks<span class=\"op\">.</span>demo<span class=\"op\">.</span>admin</span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\"></a>UserController<span class=\"op\">-&gt;</span>AdminUserController</span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\"></a>PostController</span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\"></a><span class=\"op\">}</span></span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\"></a></span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\"></a>filters <span class=\"op\">{</span></span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\"></a>package com<span class=\"op\">.</span>riguz<span class=\"op\">.</span>forks<span class=\"op\">.</span>demo<span class=\"op\">.</span>filters</span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\"></a>AuthorizationFilter</span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\"></a>NocsrfFilter</span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\"></a><span class=\"op\">}</span></span>\n<span id=\"cb2-18\"><a href=\"#cb2-18\"></a></span>\n<span id=\"cb2-19\"><a href=\"#cb2-19\"></a>routes admin <span class=\"op\">{</span></span>\n<span id=\"cb2-20\"><a href=\"#cb2-20\"></a><span class=\"op\">+</span>AuthorizationFilter</span>\n<span id=\"cb2-21\"><a href=\"#cb2-21\"></a>get  <span class=\"op\">/</span>users                 UserController<span class=\"op\">.</span>getUsers<span class=\"op\">()</span></span>\n<span id=\"cb2-22\"><a href=\"#cb2-22\"></a>get  <span class=\"op\">/</span>users<span class=\"op\">/:</span>id             UserController<span class=\"op\">.</span>getUser<span class=\"op\">(</span>id<span class=\"op\">:</span> Long<span class=\"op\">)</span></span>\n<span id=\"cb2-23\"><a href=\"#cb2-23\"></a>post <span class=\"op\">/</span>users                 UserController<span class=\"op\">.</span>createUser<span class=\"op\">()</span></span>\n<span id=\"cb2-24\"><a href=\"#cb2-24\"></a>get  <span class=\"op\">/</span>users<span class=\"op\">/:</span>id<span class=\"op\">/</span><span class=\"fu\">files</span><span class=\"op\">/*</span>name FileUserController<span class=\"op\">.</span>getFile<span class=\"op\">(</span>id<span class=\"op\">:</span> Long<span class=\"op\">,</span> name<span class=\"op\">:</span> String<span class=\"op\">)</span></span>\n<span id=\"cb2-25\"><a href=\"#cb2-25\"></a><span class=\"op\">}</span></span>\n<span id=\"cb2-26\"><a href=\"#cb2-26\"></a>routes guest <span class=\"op\">{</span></span>\n<span id=\"cb2-27\"><a href=\"#cb2-27\"></a><span class=\"op\">+</span>NocsrfFilter</span>\n<span id=\"cb2-28\"><a href=\"#cb2-28\"></a>get <span class=\"op\">/</span>posts      PostUserController<span class=\"op\">.</span>getPosts<span class=\"op\">()</span></span>\n<span id=\"cb2-29\"><a href=\"#cb2-29\"></a>get <span class=\"op\">/</span>posts<span class=\"op\">/:</span>id  PostUserController<span class=\"op\">.</span>getPost<span class=\"op\">(</span>id<span class=\"op\">:</span> String<span class=\"op\">)</span></span>\n<span id=\"cb2-30\"><a href=\"#cb2-30\"></a><span class=\"op\">}</span></span>\n<span id=\"cb2-31\"><a href=\"#cb2-31\"></a></span>\n<span id=\"cb2-32\"><a href=\"#cb2-32\"></a>routes guest <span class=\"op\">{</span></span>\n<span id=\"cb2-33\"><a href=\"#cb2-33\"></a><span class=\"op\">+</span>NocsrfFilter</span>\n<span id=\"cb2-34\"><a href=\"#cb2-34\"></a>get <span class=\"op\">/</span>posts      PostUserController<span class=\"op\">.</span>getPosts<span class=\"op\">()</span></span>\n<span id=\"cb2-35\"><a href=\"#cb2-35\"></a>get <span class=\"op\">/</span>posts<span class=\"op\">/:</span>id  PostUserController<span class=\"op\">.</span>getPost<span class=\"op\">(</span>id<span class=\"op\">:</span> String<span class=\"op\">)</span></span>\n<span id=\"cb2-36\"><a href=\"#cb2-36\"></a><span class=\"op\">}</span></span></code></pre></div>\n<p>这个文件的解析也在上面的git中可以找到实现。通过Antlr可以很方便的把类似这样的文件解析出来，你甚至可以实现自己的领域语言。在实现过程中，遇到过一些问题，来说下问题吧。</p>\n<p>首先是Antlr提供了Listener和Visitor两种方式，起初使用Listener来实现但是感觉比较麻烦，而使用Visitor则可以直接通过返回值来取得AST解析结果。我们解析一个文件的时候，是自顶向下的，一个个的去解析的，比如我们的配置文件的antlr语法定义如下：</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode lua\"><code class=\"sourceCode lua\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a>script</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a>    <span class=\"op\">:</span> shared? scope<span class=\"op\">*</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\"></a>      <span class=\"cn\">EOF</span></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\"></a>    <span class=\"op\">;</span></span></code></pre></div>\n<p>其中shared又是这样的</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode lua\"><code class=\"sourceCode lua\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a>shared</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\"></a>    <span class=\"op\">:</span> <span class=\"cn\">SHARED</span> LBRACE <span class=\"op\">(</span>property <span class=\"cn\">SEMI</span><span class=\"op\">)*</span> <span class=\"cn\">RBRACE</span> <span class=\"cn\">SEMI</span></span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\"></a>    <span class=\"op\">;</span></span></code></pre></div>\n<p>也就是说 <code>shared { k=v...} ;</code>这样的形式，然后又开始到了property:</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode lua\"><code class=\"sourceCode lua\"><span id=\"cb5-1\"><a href=\"#cb5-1\"></a>property</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\"></a>    <span class=\"op\">:</span> <span class=\"fu\">type</span> <span class=\"cn\">NAME</span> <span class=\"cn\">ASSIGN</span> expression        <span class=\"op\">#</span>basicProperty</span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\"></a>    <span class=\"op\">|</span> <span class=\"fu\">type</span> <span class=\"cn\">NAME</span> <span class=\"cn\">ASSIGN</span> <span class=\"cn\">LBRACK</span></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\"></a>        expression? <span class=\"op\">(</span><span class=\"cn\">COMMA</span> expression<span class=\"op\">)*</span></span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\"></a>      <span class=\"cn\">RBRACK</span>                             <span class=\"op\">#</span>arrayProperty</span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\"></a>    <span class=\"op\">;</span></span></code></pre></div>\n<p>这样层层往下来看。然后解析的时候也是一样，我们首先有一个顶层的解析器：</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb6-1\"><a href=\"#cb6-1\"></a><span class=\"kw\">public</span> <span class=\"kw\">class</span> ScriptVisitor <span class=\"kw\">extends</span> CfParserBaseVisitor&lt;<span class=\"bu\">Map</span>&lt;<span class=\"bu\">String</span>, ScriptVisitor.<span class=\"fu\">Scope</span>&gt;&gt; {</span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\"></a>    <span class=\"kw\">private</span> <span class=\"dt\">static</span> <span class=\"dt\">final</span> <span class=\"bu\">Logger</span> logger = LoggerFactory.<span class=\"fu\">getLogger</span>(ScriptVisitor.<span class=\"fu\">class</span>);</span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\"></a></span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\"></a>    <span class=\"at\">@Override</span></span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\"></a>    <span class=\"kw\">public</span> <span class=\"bu\">Map</span>&lt;<span class=\"bu\">String</span>, Scope&gt; <span class=\"fu\">visitScript</span>(CfParser.<span class=\"fu\">ScriptContext</span> ctx) {</span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\"></a>        ...</span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\"></a>    }</span></code></pre></div>\n<p>这个Visitor负责解析语法文件中定义的script块，然后解析里面的scope：</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb7-1\"><a href=\"#cb7-1\"></a>ScopeVisitor scopeVisitor = <span class=\"kw\">new</span> <span class=\"fu\">ScopeVisitor</span>(context);</span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\"></a>        ctx.<span class=\"fu\">scope</span>().<span class=\"fu\">forEach</span>(scopeContext -&gt; {</span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\"></a>            logger.<span class=\"fu\">debug</span>(<span class=\"st\">&quot;Visit scope:{}&quot;</span>, scopeContext.<span class=\"fu\">getText</span>());</span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\"></a>            Scope scope = scopeContext.<span class=\"fu\">accept</span>(scopeVisitor);</span>\n<span id=\"cb7-5\"><a href=\"#cb7-5\"></a>            scopes.<span class=\"fu\">put</span>(scope.<span class=\"fu\">name</span>, scope);</span>\n<span id=\"cb7-6\"><a href=\"#cb7-6\"></a>        });</span></code></pre></div>\n<p>这样又实现一个ScopeVisitor去解析scope就好了。详细的实现就不多贴代码了。</p>\n<p>另外一个问题是，对于错误的处理，我们在哪一步做？比如<code>bool s = \"123\";</code>这是错误的，我们其实可以在定义grammar的时候就避免这种错误来，但写起来会麻烦一些。目前的实现是在Visitor中去对逻辑进行判断的，前面只做语法检查就可以了。</p>\n<p>参考:</p>\n<ul>\n<li>http://jakubdziworski.github.io/java/2016/04/01/antlr_visitor_vs_listener.html</li>\n</ul>\n","categories":["Programing","Java"],"tags":["Antlr"]},{"title":"Compile OpenJDK8 on MacOSX","url":"/it/java/compile_openjdk8_in_macosx/","content":"<p>纯手工编译<a href=\"http://openjdk.java.net/projects/jdk8u/\" target=\"_blank\" rel=\"noopener\">OpenJDK8</a>。在Mac上尝试了一下，因为编译这玩意需要XCode4*，而现在XCode都升级到9了，虽然可以下载旧版的XCode，但试了一下貌似不太兼容。于是在Virtualbox中装lubuntu来编译一下玩玩。在Virtualbox使用NAT网络做端口转发的时候，竟然发现不支持主机的22端口（貌似是<a href=\"https://apple.stackexchange.com/questions/235518/ssh-to-virtualbox-mac-host-linux-guest-using-nat\" target=\"_blank\" rel=\"noopener\">权限的问题</a>），改为10240则Ok。 <a id=\"more\"></a></p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"fu\">sudo</span> apt-get install mercurial</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a><span class=\"fu\">sudo</span> apt-get install lrzsz</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a><span class=\"ex\">hg</span> clone http://hg.openjdk.java.net/jdk8u/jdk8u</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a><span class=\"bu\">cd</span> jdk8u</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a><span class=\"fu\">sh</span> get_source.sh</span></code></pre></div>\n<p>可能遇到的问题：</p>\n<pre><code>...\njdk:   abort: stream ended unexpectedly (got 8159 bytes, expected 29096)\n...\nWARNING: hotspot exited abnormally (255)\nWARNING: jdk exited abnormally (255)\nWARNING: nashorn exited abnormally (255)</code></pre>\n<p>解决办法是重试N次get_source.sh就可以了。</p>\n<p>切换到最新的release tag：</p>\n<pre><code>hg tags\nhg up jdk8u162-b12</code></pre>\n<p>安装依赖项：</p>\n<pre><code>sudo apt-get install build-essential\nsudo apt-get install libasound2-dev libcups2-dev libfreetype6-dev\nsudo apt-get install libx11-dev libxext-dev libxrender-dev libxtst-dev libxt-dev\nsudo apt-get update\nsudo apt-get upgrade\n\nsudo add-apt-repository ppa:openjdk-r/ppa  \nsudo apt-get update   \nsudo apt-get install openjdk-7-jdk  \n# refer https://github.com/hgomez/obuildfactory/wiki/How-to-build-and-package-OpenJDK-8-on-Linux</code></pre>\n<p>然后开始编译吧：</p>\n<pre><code>bash ./configure --with-target-bits=64 --with-freetype-include=/usr/include/freetype2/ --with-freetype-lib=/usr/lib/x86_64-linux-gnu</code></pre>\n<p>Ubuntu16下面必须指定freetype的路径，按照OpenJDK Build README里面所说，期望的路径是<code>Expecting the freetype libraries under lib/ and the headers under include/.</code>.而且特别指出:</p>\n<pre><code>*The build is now a &quot;configure &amp;&amp; make&quot; style build\n*Any GNU make 3.81 or newer should work\n*The build should scale, i.e. more processors should cause the build to be done in less wall-clock time\n*Nested or recursive make invocations have been significantly reduced, as has the total fork/exec or spawning of sub processes during the build\n*Windows MKS usage is no longer supported\n*Windows Visual Studio vsvars*.bat and vcvars*.bat files are run automatically\n*Ant is no longer used when building the OpenJDK\n*Use of ALT_* environment variables for configuring the build is no longer supported</code></pre>\n<p>因此有些文章上面设置ant, ALT_BOOTDIR等步骤不适用编译jdk8.为了提高编译速度，在虚拟机中设置了使用4个cpu核心。我们需要指定编译使用的cpu数来提高编译速度。</p>\n<pre><code>make clean\nrm -rf build\nbash ./configure --with-target-bits=64 --with-freetype-include=/usr/include/freetype2/ --with-freetype-lib=/usr/lib/x86_64-linux-gnu --with-jobs=4</code></pre>\n<p>这样配置完后的输出如下:</p>\n<pre><code>A new configuration has been successfully created in\n/home/riguz/jdk/jdk8u/build/linux-x86_64-normal-server-release\nusing configure arguments &#39;--with-target-bits=64 --with-freetype-include=/usr/include/freetype2/ --with-freetype-lib=/usr/lib/x86_64-linux-gnu --with-jobs=4&#39;.\n\nConfiguration summary:\n* Debug level:    release\n* JDK variant:    normal\n* JVM variants:   server\n* OpenJDK target: OS: linux, CPU architecture: x86, address length: 64\n\nTools summary:\n* Boot JDK:       java version &quot;1.7.0_95&quot; OpenJDK Runtime Environment (IcedTea 2.6.4) (7u95-2.6.4-3) OpenJDK 64-Bit Server VM (build 24.95-b01, mixed mode)  (at /usr/lib/jvm/java-7-openjdk-amd64)\n* C Compiler:     gcc-5 (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 version 5.4.0 (at /usr/bin/gcc-5)\n* C++ Compiler:   g++-5 (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 version 5.4.0 (at /usr/bin/g++-5)\n\nBuild performance summary:\n* Cores to use:   4\n* Memory limit:   1997 MB\n* ccache status:  not installed (consider installing)</code></pre>\n<p>这里有个performance的提示，就是ccache。但是这玩意安装之后貌似<a href=\"https://bugs.openjdk.java.net/browse/JDK-8067132\" target=\"_blank\" rel=\"noopener\">识别错误</a>，索性不要了。然后就可以开始编译了</p>\n<pre><code>make images</code></pre>\n<p>尴尬的是虚拟机磁盘空间(10G)不够，幸亏可以动态调整一下</p>\n<pre><code>VBoxManage modifyhd ~/VirtualBox\\ VMs/lubuntu/lubuntu.vdi --resize 20480\n# 完了之后需要进入到系统，用分区工具调整分区大小，可能需要删除swap分区，扩展/后再重建swap分区\nsudo apt-get install gparted\ngparted</code></pre>\n<p>images目标会<code>create complete j2sdk and j2re images</code>，花费了大约10分钟时间:</p>\n<pre><code>----- Build times -------\nStart 2018-04-11 10:03:36\nEnd   2018-04-11 10:13:47\n00:00:23 corba\n00:00:15 demos\n00:04:49 hotspot\n00:01:02 images\n00:00:15 jaxp\n00:00:20 jaxws\n00:02:26 jdk\n00:00:28 langtools\n00:00:13 nashorn\n00:10:11 TOTAL\n-------------------------</code></pre>\n<p>生成的文件在build/*/images中</p>\n<pre><code>riguz@riguz-VirtualBox:~/jdk/jdk8u/build/linux-x86_64-normal-server-release/images/j2sdk-image$ cd bin/\nriguz@riguz-VirtualBox:~/jdk/jdk8u/build/linux-x86_64-normal-server-release/images/j2sdk-image/bin$ ls\nappletviewer  javadoc       jdeps       jsadebugd     pack200      servertool\nextcheck      javah         jhat        jstack        policytool   tnameserv\nidlj          javap         jinfo       jstat         rmic         unpack200\njar           java-rmi.cgi  jjs         jstatd        rmid         wsgen\njarsigner     jcmd          jmap        keytool       rmiregistry  wsimport\njava          jconsole      jps         native2ascii  schemagen    xjc\njavac         jdb           jrunscript  orbd          serialver\nriguz@riguz-VirtualBox:~/jdk/jdk8u/build/linux-x86_64-normal-server-release/images/j2sdk-image/bin$ ./java -version\nopenjdk version &quot;1.8.0-internal&quot;\nOpenJDK Runtime Environment (build 1.8.0-internal-riguz_2018_04_11_10_03-b00)\nOpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)</code></pre>\n<p>最后就是测试了。测试需要安装jtreg，注意一定要指定JT_HOME.</p>\n<pre><code>sudo apt-get install jtreg\ncd test &amp;&amp; make PRODUCT_HOME=`pwd`/../build/*/images/j2sdk-image JT_HOME=/usr/bin/jtreg all</code></pre>\n","categories":["Programing","Java"],"tags":["OpenJDK"]},{"title":"有趣的 Unicode 字符","url":"/it/misc/strange_unicode_chars/","content":"<pre><code>\nส็็็็็็็็็็็็็็็็็็็็็็็็็༼ ຈل͜ຈ༽ส้้้้้้้้้้้้้้้้้้้้้้้\nส็็็็็็็็็็็็็็็็็็็็็็็็็༼ ಠ_ಠ ༽ส้้้้้้้้้้้้้้้้้้้้้้้\nส็็็็็็็็็็็็็็็็็็็( ͡° ͜ʖ ͡°)\nส้้้้้้้้้้้้้้้้้้้้้้้ ส็็็็็็็็็็็็็็็็็็็็็็็็็ \nS̢͎̳̞̲͈̪̳̻ͮͩt̟̳̏ͬ̔͒̈́ͦ͠a̞̤̝̟ͫ̽̂̈́ͪ͐͘n͕͐͑ͪ͐ͦ͋ͮ̅d͚̗̙̎ͫ̌â̗̬͓͍͍̳̥͆̕͠r̢̘ͣ̀d̢̢̢̘̲̺͙̂̈́̊ͬ ͎͎̫͚̣̺̤̖͊̏̀ͬ͞u̧͆ͩ́͒҉͔̠̪̖̹̠̰͎ṇ̸̛͚̟̫͎̟̣̜͋̈́ͧͯi̲̲̺͑̐ͣ͗̿̕͘͝c̦͈͇̦͈ͦ̆ͨ͝o̟̭̫̥͎̹͆́ͥ͊ͬ̏͝d̪͔̯̥̩͙̝ͩ̏͒̈́ͩ̿́̕͜ͅe͍͓̻̊͛ͅ ̸̧̻̺̤̠͙ͪ̋̽l̛̥̥ͬ͂̈́ͤ̓̀̓̚͘ͅͅͅǒ̮͓̼ͭ̂̆̇̕͘ͅl̯̯̟̗͔̳͉̰ͫ̒ͧͦͩͦ̓̓͢ͅs̝͎͚̗̮̟̒̔͛̈̊͋͒ͩͅ Cool!\n\n\n</code></pre>\n<p>我也来生成一个： Rͨ̍̀̐iͩͤͦ̈́́̓g̃ͬ̾u̓͆ͬ̐̎ͨ͋̆z̑ͤͯ̒ͦ͗̿̍ ͤ̇̒L͒̂͑̎ͣͣͯ̉e̊e̐̏̏̆̑͗ͥ́ 了解更多,参见<a href=\"https://news.ycombinator.com/item?id=3665086\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n","categories":["Programing","Misc"],"tags":["Unicode"]},{"title":"新的配置文件格式","url":"/it/misc/new_config_format/","content":"<p>程序中大都需要定义各种配置，诸如数据库连接之类的，最近也需要开发Web框架，于是也想找个比较好用的配置文件格式。搞来搞去，发现都不是很喜欢。先来看一下几种常见的配置文件格式吧： <a id=\"more\"></a> ### Properties Java所带来的Properties文件可能是用的比较多的格式了吧，就是一个简单的key-value的文本文件，但是缺点也很明显： * Unicode需要转码，看着不是很蛋疼么？ * 不支持数组类型，所以以前经常会用key.1,key.2...key.n这样的方式来遍历得到一个数组 * 扁平结构，如果碰到一些比较长的key就有点不好看了（比如SpringCloud的配置，spring.jpa.datasource.xxx)写起来比较麻烦</p>\n<pre class=\"properties\"><code>spring.data.mongodb.host= localhost\nspring.data.mongodb.port=27017 # the connection port (defaults to 27107)\nspring.data.mongodb.uri=mongodb://localhost/test # connection URL\nspring.data.mongo.repositories.enabled=true # if spring data repository support is enabled</code></pre>\n<h3 id=\"yamltoml\">Yaml/TOML</h3>\n<p>Yaml好像很流行的样子，我们在springcloud的项目中大量使用，但是说实话这个格式我也不喜欢，为啥？ * 依赖于缩进，复制粘贴的时候麻烦了 * 语法有点复杂了 TOML感觉和YAML差不多，也挺复杂的样子。</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode yaml\"><code class=\"sourceCode yaml\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"co\"># Zuul</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a><span class=\"fu\">zuul</span><span class=\"kw\">:</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a><span class=\"at\">  </span><span class=\"fu\">host</span><span class=\"kw\">:</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a><span class=\"at\">    </span><span class=\"fu\">connect-timeout-millis</span><span class=\"kw\">:</span><span class=\"at\"> </span><span class=\"dv\">50000</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a><span class=\"at\">    </span><span class=\"fu\">socket-timeout-millis</span><span class=\"kw\">:</span><span class=\"at\"> </span><span class=\"dv\">10000</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\"></a><span class=\"co\"># Hystrix</span></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\"></a><span class=\"fu\">hystrix</span><span class=\"kw\">:</span></span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\"></a><span class=\"at\">  </span><span class=\"fu\">command</span><span class=\"kw\">:</span></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\"></a><span class=\"at\">    </span><span class=\"fu\">default</span><span class=\"kw\">:</span></span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\"></a><span class=\"at\">      </span><span class=\"fu\">execution</span><span class=\"kw\">:</span></span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\"></a><span class=\"at\">        </span><span class=\"fu\">isolation</span><span class=\"kw\">:</span></span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\"></a><span class=\"at\">          </span><span class=\"fu\">thread</span><span class=\"kw\">:</span></span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\"></a><span class=\"at\">            </span><span class=\"fu\">timeoutInMilliseconds</span><span class=\"kw\">:</span><span class=\"at\"> </span><span class=\"dv\">10000</span></span></code></pre></div>\n<h3 id=\"ini\">Ini</h3>\n<p>Windows所带来的格式，优点是可以带分组，好像比Properties文件更舒服一点，但是对于上面提到的缺点也有。</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode ini\"><code class=\"sourceCode ini\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"kw\">[curentUser]</span><span class=\"dt\">      ;  this is a Section</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a><span class=\"dt\">name</span><span class=\"ot\">=</span><span class=\"st\">wisdo     ; this is Parameters</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\"></a><span class=\"dt\">organization</span><span class=\"ot\">=</span><span class=\"st\">cnblogs   ; this is Parameters</span></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\"></a><span class=\"dt\"> </span></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\"></a><span class=\"kw\">[database]</span><span class=\"dt\"> </span></span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\"></a><span class=\"dt\">server</span><span class=\"ot\">=</span><span class=\"dv\">127</span><span class=\"st\">.</span><span class=\"dv\">0</span><span class=\"st\">.</span><span class=\"fl\">0.0</span><span class=\"st\">   ; use IP address in case network name resolution is not working </span></span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\"></a><span class=\"dt\">port</span><span class=\"ot\">=</span><span class=\"dv\">143</span><span class=\"st\"> </span></span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\"></a><span class=\"dt\">file </span><span class=\"ot\">=</span><span class=\"st\"> &quot;user.dat&quot; </span></span></code></pre></div>\n<h3 id=\"jsonlua\">JSON/LUA</h3>\n<p>Json的缺点在于你要用很多个引号，同时最大的问题在于不支持注释。Lua可能是我最想用的脚本了，但是在Java中使用也比较麻烦，尤其是我想手写一个配置文件解析器，这样就麻烦了（主要是不会）。</p>\n<p>还有Ini + Json的方法，但是感觉也比较丑，于是想来想去，还不如按照自己的意愿发明一种配置文件格式好了，主要有以下的考虑： * 语法应该简单，不需要依赖缩进 * 支持数组 * 支持使用变量（类似shell） * 支持Unicode，中文直接写，所见即所得 * 支持某种形式的命名空间（类似ini中的section）来对配置进行分组 * 支持注释 * 支持多行字符串 * 格式好看...</p>\n<p>目前正在计划中，准备利用Antlr实现解析。</p>\n","categories":["Programing","Misc"],"tags":["Yaml","INI","Toml"]},{"title":"关于代码注释","url":"/it/misc/about_comments/","content":"<p>在一个“敏捷”的团队，写注释被认作是一个不好的习惯，因为他们认为，</p>\n<blockquote>\n<p>Good programming is self-explanatory. Bad Programming requires explanation</p>\n</blockquote>\n<p>总结一下，认为程序中不需要写注释的原因主要有如下的几点： * 需要写注释的程序说明代码不够清晰啊，可以可以通过重构的方式，让代码变得“可读” * 维护注释是一件工作量很大的事情，改完代码之后，时常会忘记修改注释 * 注释如果解释的不清楚，那就需要“注释的注释”... * …… <a id=\"more\"></a> 不能不说这些没有道理，实际上也都是很关心的问题，代码写的更好更可读，当然是值得推崇的。并且诚如所言，代码应该是“自解释”的，大部分情况下，我们可能的确不需要注释。代码的可读性，和注释，目的都是一样的，让别人看得懂，不会掉坑里面。这里的坑，可能是代码逻辑的，可能是业务逻辑的，可能是某个库的bug，可能是某种奇怪的设计或者历史原因。</p>\n<p>所以说，有另外一个更重要的他们没有考虑到的就是：</p>\n<blockquote>\n<p>self-explanatory code only tell how it is working. It rarely tells how it should work.</p>\n</blockquote>\n<p>正好最近又遇到一次坑。来描述一下这个故事： 起因是我们系统需要从一个第三方系统中查询数据。这个系统调用，我们代码里面是这么写的：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"kw\">try</span> {</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a>    <span class=\"kw\">return</span> client.<span class=\"fu\">getVehicleBaseData</span>(finOrVin);</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>} <span class=\"kw\">catch</span> (<span class=\"bu\">Exception</span> e) {</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>    log.<span class=\"fu\">error</span>(<span class=\"st\">&quot;error loading vehicle basic data from eva for finOrVin:{}&quot;</span>, finOrVin);</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>    <span class=\"kw\">throw</span> <span class=\"kw\">new</span> <span class=\"fu\">EvaAccessFailureException</span>(evaLoadService.<span class=\"fu\">generateFallback</span>(e.<span class=\"fu\">getMessage</span>()));</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>}</span></code></pre></div>\n<p>这段代码的功能是，调用外部系统的api，然后返回一个结果；如果出错则抛出异常。同时，需要根据出错的“代码”来判断是对方系统的内部错误，还是资源找不到。</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a>Fallback <span class=\"fu\">generateFallback</span>(<span class=\"bu\">String</span> message) {</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a>    <span class=\"kw\">try</span> {</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a>        <span class=\"dt\">int</span> startPos = message.<span class=\"fu\">indexOf</span>(<span class=\"st\">&quot;{</span><span class=\"sc\">\\&quot;</span><span class=\"st\">error</span><span class=\"sc\">\\&quot;</span><span class=\"st\">:&quot;</span>);</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a>        <span class=\"kw\">if</span> (startPos == -<span class=\"dv\">1</span>) {</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a>            <span class=\"kw\">return</span> <span class=\"kw\">new</span> <span class=\"fu\">Fallback</span>(UNEXPECTED, message);</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a>        }</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a>        EvaErrorResponse response = JsonUtils.<span class=\"fu\">unmarshal</span>(message.<span class=\"fu\">substring</span>(startPos), EvaErrorResponse.<span class=\"fu\">class</span>);</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\"></a>        <span class=\"kw\">return</span> <span class=\"kw\">new</span> <span class=\"fu\">Fallback</span>(<span class=\"fu\">getByStringValue</span>(response.<span class=\"fu\">getError</span>().<span class=\"fu\">getErrorCode</span>()));</span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\"></a>    } <span class=\"kw\">catch</span> (<span class=\"bu\">Exception</span> e) {</span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\"></a>        log.<span class=\"fu\">error</span>(<span class=\"st\">&quot;unexpected error message from EVA {}&quot;</span>, message);</span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\"></a>        log.<span class=\"fu\">error</span>(e.<span class=\"fu\">getMessage</span>(), e);</span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\"></a>        <span class=\"kw\">return</span> <span class=\"kw\">new</span> <span class=\"fu\">Fallback</span>(UNEXPECTED, message);</span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\"></a>    }</span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\"></a>}</span></code></pre></div>\n<p>这段代码尝试从message里面解析一串error，然后再反序列化为JSON，这里是这个EvaErrorResponse的定义：</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"at\">@Data</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a><span class=\"at\">@Builder</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\"></a><span class=\"at\">@Getter</span></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\"></a><span class=\"at\">@Setter</span></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\"></a><span class=\"at\">@NoArgsConstructor</span></span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\"></a><span class=\"at\">@AllArgsConstructor</span></span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\"></a><span class=\"kw\">public</span> <span class=\"kw\">class</span> EvaErrorResponse {</span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\"></a>    <span class=\"kw\">private</span> <span class=\"bu\">Error</span> error;</span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\"></a>}</span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\"></a></span>\n<span id=\"cb3-11\"><a href=\"#cb3-11\"></a><span class=\"at\">@Data</span></span>\n<span id=\"cb3-12\"><a href=\"#cb3-12\"></a><span class=\"at\">@Builder</span></span>\n<span id=\"cb3-13\"><a href=\"#cb3-13\"></a><span class=\"at\">@Getter</span></span>\n<span id=\"cb3-14\"><a href=\"#cb3-14\"></a><span class=\"at\">@Setter</span></span>\n<span id=\"cb3-15\"><a href=\"#cb3-15\"></a><span class=\"at\">@NoArgsConstructor</span></span>\n<span id=\"cb3-16\"><a href=\"#cb3-16\"></a><span class=\"at\">@AllArgsConstructor</span></span>\n<span id=\"cb3-17\"><a href=\"#cb3-17\"></a><span class=\"kw\">class</span> <span class=\"bu\">Error</span> {</span>\n<span id=\"cb3-18\"><a href=\"#cb3-18\"></a>    <span class=\"kw\">private</span> <span class=\"bu\">String</span> errorCode;</span>\n<span id=\"cb3-19\"><a href=\"#cb3-19\"></a>    <span class=\"kw\">private</span> <span class=\"bu\">String</span> errorDesc;</span>\n<span id=\"cb3-20\"><a href=\"#cb3-20\"></a>}</span></code></pre></div>\n<p>姑且不说一个简单的Bean用这么多Lombok注解的问题~ 然后我需要做的是，模拟这个系统的出错返回，因为我们的开发环境无法连真实的三方系统测试。那么问题来了，三方系统出错的时候，应该返回什么呢？</p>\n<p>首先问问写这个代码的人（也就是直接对接这个系统的人）吧。他给了我一个文档，文档里面是这么描述的： <img src=\"/images/about_comments_1.png\" alt=\"the document\" /></p>\n<p>那么问题来了，这和代码定义完全不一样啊！然后告诉我以代码为准。从这个代码根本无法确定错误返回结构。然后又看看我们这个模拟的stub的代码，关于出错的地方是这么定义的：</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a><span class=\"kw\">public</span> <span class=\"kw\">class</span> OabResponseDto {</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\"></a></span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\"></a>    <span class=\"kw\">private</span> <span class=\"dt\">boolean</span> success;</span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\"></a></span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\"></a>    <span class=\"kw\">private</span> <span class=\"bu\">Object</span> result;</span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\"></a></span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\"></a>    <span class=\"kw\">private</span> <span class=\"bu\">String</span> error;</span></code></pre></div>\n<p>后来才觉察到，这是另一个系统的接口返回了。但几个系统的模拟stub都写到了一起，让人完全无法确定真实的三方接口定义。最终，我找到了调用这个接口的测试环境，自己调用了一次，原来结果是这样的：</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb5-1\"><a href=\"#cb5-1\"></a>{<span class=\"st\">&quot;error&quot;</span>:{<span class=\"st\">&quot;errorCode&quot;</span>:<span class=\"st\">&quot;WDCS0003&quot;</span>,<span class=\"st\">&quot;errorDesc&quot;</span>:<span class=\"st\">&quot;Resource not available!&quot;</span>}}</span></code></pre></div>\n<p>这耗费了我半天的时间。于是为了避免有人再踩这种坑，我加了个注释在这里：</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb6-1\"><a href=\"#cb6-1\"></a>Fallback <span class=\"fu\">generateFallback</span>(<span class=\"bu\">String</span> message) {</span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\"></a>    <span class=\"kw\">try</span> {</span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\"></a>        <span class=\"co\">/**</span></span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\"></a>         <span class=\"co\">*</span> example actual response from eva<span class=\"co\">:</span></span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\"></a>         <span class=\"co\">*</span> <span class=\"co\">{&quot;</span>error<span class=\"co\">&quot;:{&quot;</span>errorCode<span class=\"co\">&quot;:&quot;</span>WDCS0003<span class=\"co\">&quot;,&quot;</span>errorDesc<span class=\"co\">&quot;:&quot;</span>Resource not available<span class=\"co\">!&quot;}}</span></span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\"></a>         <span class=\"co\">*/</span></span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\"></a>        <span class=\"dt\">int</span> startPos = message.<span class=\"fu\">indexOf</span>(<span class=\"st\">&quot;{</span><span class=\"sc\">\\&quot;</span><span class=\"st\">error</span><span class=\"sc\">\\&quot;</span><span class=\"st\">:&quot;</span>);</span></code></pre></div>\n<p>然而这又被批判了，理由是这段注释不能解释代码。因为这里message并不是这样。那message到底是什么样？他们说，你可以调试打个断点看。难道让每一个看代码的人都打个断点来看么，这是什么逻辑！我就呵呵了。最终我还是妥协了，删了呗，对我而言无任何影响。</p>\n","categories":["Programing","Misc"],"tags":["Comment"]},{"title":"Why I don't use lombok","url":"/it/java/why_not_lombok/","content":"<p>很多人，如同我的同事，似乎觉得lombok这玩意就像神一样的存在，“极大”的方便了项目的开发。我个人是不喜欢这玩意的，很简单的理由：</p>\n<ul>\n<li>生成getter/setter不是多么困难的事情，IDE很简单就能帮你搞定</li>\n<li>我不喜欢为自己的IDE装一大堆插件，还要为项目手动开启一下Annotation Processing</li>\n<li>代码不可见，意味着生成的getters/setter方法，以及@AllArgConstructor生成的方法无法维护 <a id=\"more\"></a> 当我把这些想法告诉同事的时候，同事们都觉得我脑子有问题，理由不充分，”lombok只是一个工具，只是没有找到使用工具的最佳实践“。实际上对于技术人员来说，想说服别人是很困难的事情，然而我们为什么要试图说服别人呢？没有多大的意义。相比于工具，有一些更重要的东西就是：经验和原则。</li>\n</ul>\n<p>就我的经验，能简单的事情就不要复杂化，越是复杂越难以维护。当然也有人和我是相同的观点，看了一些有意思的关于为什么不用lombok的讨论，贴出来看看：</p>\n<blockquote>\n<p>OK, let me put it one more time: this has caused me too many bugs. Let me tell you my past experiences with Lombok, as this is the root of the issue.</p>\n<p>On one project, a new version of the Lombok plugin caused the IDE to crash (I think this was Intellij). So nobody could work anymore. On another project, Lombok made the CI server crash (and would have probably caused the production server to crash), as it triggered a bug in the JVM On a third project, we achieved 30% performance increase by recoding the equals/hashcode from Lombok -&gt; In those 3 projects, some developer gained 5 minutes, and I spent hours recoding everything. So yes, a bad experience.</p>\n<p>Then, for JHipster, the story is also that we can't ask people to install a plugin on their IDE:</p>\n<p>1st goal is to have a smooth experience: you generate the app and it works in your IDE, by default 2nd goal is that you can use whatever IDE you want. And some people have very exotic things, for example I just tried https://codenvy.com/ -&gt; no plugin for this one, of course</p>\n<p>Oh, and I just got 2 more:</p>\n<p>Lombok crashing with MapStruct Lombok making Jacoco fails, which meant the project didn't pass the Sonar quality gate</p>\n</blockquote>\n<p>参考阅读：</p>\n<ul>\n<li>https://github.com/jhipster/generator-jhipster/issues/398</li>\n<li>https://gist.github.com/ufuk/0ccb87185c22475c64d46801fa160777</li>\n<li>https://stackoverflow.com/questions/3852091/is-it-safe-to-use-project-lombok</li>\n</ul>\n","categories":["Programing","Java"],"tags":["lombok","annotation processing"]},{"title":"关于 Java泛型","url":"/it/java/about_java_generics/","content":"<p>泛型是Java1.5之后一个比较有用的特性，有点类似于C++的模板。最简单的一个例子：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"kw\">class</span> <span class=\"bu\">Wrapper</span>&lt;T&gt; {</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a>    <span class=\"dt\">final</span> T data;</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>    <span class=\"bu\">Wrapper</span>(T data) {</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>        <span class=\"kw\">this</span>.<span class=\"fu\">data</span> = data;</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>    }</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a>}</span></code></pre></div>\n<p>有一些可能不是特别常用的Generics，我们来简单看一下。 <a id=\"more\"></a></p>\n<h1 id=\"bounded-generics\">Bounded Generics</h1>\n<h2 id=\"multiple-bound\">Multiple bound</h2>\n<p>如果一个类继承了多个接口，是这样的写法：</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"kw\">interface</span> I {}</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a><span class=\"kw\">interface</span> M {}</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a><span class=\"kw\">abstract</span> <span class=\"kw\">class</span> C {}</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a><span class=\"kw\">class</span> Foo <span class=\"kw\">extends</span> C <span class=\"kw\">implements</span> I,M {}</span></code></pre></div>\n<p>假如一个方法的泛型参数包含多个Bound，则要这样写了：</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a>&lt;T <span class=\"kw\">extends</span> I &amp; M&gt; <span class=\"dt\">void</span> <span class=\"fu\">bar</span>(T arg){}</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a>&lt;T <span class=\"kw\">extends</span> C&gt; <span class=\"dt\">void</span> <span class=\"fu\">ooo</span>(T arg){}</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\"></a>&lt;T <span class=\"kw\">extends</span> C &amp; I &amp; M&gt; <span class=\"dt\">void</span> <span class=\"fu\">xxx</span>(T arg){}</span></code></pre></div>\n<h2 id=\"unbounded-wildcards\">Unbounded wildcards</h2>\n<p>使用 ? 修饰符可以用作类型转换，List&lt;?&gt; 意味着是一个未知类型的List，可能是<code>List&lt;A&gt;</code> 也可能是<code>List&lt;B&gt;</code></p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a><span class=\"kw\">private</span> <span class=\"dt\">final</span> <span class=\"bu\">List</span>&lt;<span class=\"bu\">String</span>&gt; strList = <span class=\"bu\">Arrays</span>.<span class=\"fu\">asList</span>(<span class=\"st\">&quot;Hello&quot;</span>, <span class=\"st\">&quot;World!&quot;</span>);</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\"></a><span class=\"kw\">private</span> <span class=\"dt\">final</span> <span class=\"bu\">List</span>&lt;<span class=\"bu\">Integer</span>&gt; intList = <span class=\"bu\">Arrays</span>.<span class=\"fu\">asList</span>(<span class=\"dv\">1</span>, <span class=\"dv\">2</span>, <span class=\"dv\">3</span>);</span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\"></a><span class=\"kw\">private</span> <span class=\"dt\">final</span> <span class=\"bu\">List</span>&lt;<span class=\"bu\">Float</span>&gt; floatList = <span class=\"bu\">Arrays</span>.<span class=\"fu\">asList</span>(<span class=\"fl\">1.1f</span>, <span class=\"fl\">2.1f</span>, <span class=\"fl\">3.1f</span>);</span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\"></a><span class=\"kw\">private</span> <span class=\"dt\">final</span> <span class=\"bu\">List</span>&lt;<span class=\"bu\">Number</span>&gt; numberList = <span class=\"bu\">Arrays</span>.<span class=\"fu\">asList</span>(<span class=\"dv\">1</span>, <span class=\"fl\">1.0f</span>, <span class=\"dv\">3000L</span>);</span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\"></a></span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\"></a><span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">cast</span>() {</span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\"></a>    <span class=\"bu\">List</span>&lt;?&gt; unknownList = <span class=\"kw\">null</span>;</span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\"></a>    unknownList = strList;</span>\n<span id=\"cb4-9\"><a href=\"#cb4-9\"></a>    unknownList = intList;</span>\n<span id=\"cb4-10\"><a href=\"#cb4-10\"></a>    unknownList = floatList;</span>\n<span id=\"cb4-11\"><a href=\"#cb4-11\"></a>    unknownList = numberList;</span>\n<span id=\"cb4-12\"><a href=\"#cb4-12\"></a></span>\n<span id=\"cb4-13\"><a href=\"#cb4-13\"></a>    <span class=\"kw\">for</span> (<span class=\"dt\">int</span> i = <span class=\"dv\">0</span>; i &lt; unknownList.<span class=\"fu\">size</span>(); i++) {</span>\n<span id=\"cb4-14\"><a href=\"#cb4-14\"></a>        <span class=\"co\">// Number item = unknownList.get(i); wrong! </span></span>\n<span id=\"cb4-15\"><a href=\"#cb4-15\"></a>        <span class=\"bu\">Object</span> item = unknownList.<span class=\"fu\">get</span>(i);</span>\n<span id=\"cb4-16\"><a href=\"#cb4-16\"></a>        <span class=\"bu\">System</span>.<span class=\"fu\">out</span>.<span class=\"fu\">println</span>(item + <span class=\"st\">&quot;(&quot;</span> + item.<span class=\"fu\">getClass</span>() + <span class=\"st\">&quot;)&quot;</span>);</span>\n<span id=\"cb4-17\"><a href=\"#cb4-17\"></a>    }</span>\n<span id=\"cb4-18\"><a href=\"#cb4-18\"></a>}</span>\n<span id=\"cb4-19\"><a href=\"#cb4-19\"></a><span class=\"co\">/* output</span></span>\n<span id=\"cb4-20\"><a href=\"#cb4-20\"></a><span class=\"co\">1(class java.lang.Integer)</span></span>\n<span id=\"cb4-21\"><a href=\"#cb4-21\"></a><span class=\"co\">1.0(class java.lang.Float)</span></span>\n<span id=\"cb4-22\"><a href=\"#cb4-22\"></a><span class=\"co\">3000(class java.lang.Long)</span></span>\n<span id=\"cb4-23\"><a href=\"#cb4-23\"></a><span class=\"co\">*/</span></span></code></pre></div>\n<h2 id=\"upper-bounded-wildcards\">Upper bounded wildcards</h2>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb5-1\"><a href=\"#cb5-1\"></a><span class=\"kw\">public</span> <span class=\"dt\">static</span> <span class=\"dt\">double</span> <span class=\"fu\">sumOfList</span>(<span class=\"bu\">List</span>&lt;? <span class=\"kw\">extends</span> <span class=\"bu\">Number</span>&gt; list) {</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\"></a>    <span class=\"dt\">double</span> s = <span class=\"fl\">0.</span><span class=\"dv\">0</span>;</span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\"></a>    <span class=\"kw\">for</span> (<span class=\"bu\">Number</span> n : list)</span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\"></a>        s += n.<span class=\"fu\">doubleValue</span>();</span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\"></a>    <span class=\"kw\">return</span> s;</span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\"></a>}</span>\n<span id=\"cb5-7\"><a href=\"#cb5-7\"></a><span class=\"co\">//...</span></span>\n<span id=\"cb5-8\"><a href=\"#cb5-8\"></a><span class=\"fu\">sumOfList</span>(<span class=\"bu\">Arrays</span>.<span class=\"fu\">asList</span>(<span class=\"dv\">1</span>, <span class=\"dv\">2</span>, <span class=\"dv\">3</span>));</span>\n<span id=\"cb5-9\"><a href=\"#cb5-9\"></a><span class=\"fu\">sumOfList</span>(<span class=\"bu\">Arrays</span>.<span class=\"fu\">asList</span>(<span class=\"fl\">1.0f</span>, <span class=\"fl\">2.0f</span>, <span class=\"fl\">3.0f</span>));</span></code></pre></div>\n<h2 id=\"lower-bounded-wildcards\">Lower bounded wildcards</h2>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb6-1\"><a href=\"#cb6-1\"></a><span class=\"kw\">public</span> <span class=\"dt\">static</span> <span class=\"dt\">void</span> <span class=\"fu\">addNumbers</span>(<span class=\"bu\">List</span>&lt;? <span class=\"kw\">super</span> <span class=\"bu\">Number</span>&gt; list) {</span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\"></a>    <span class=\"kw\">for</span> (<span class=\"dt\">int</span> i = <span class=\"dv\">1</span>; i &lt;= <span class=\"dv\">10</span>; i++) {</span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\"></a>        list.<span class=\"fu\">add</span>(i);</span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\"></a>        list.<span class=\"fu\">add</span>(<span class=\"fl\">1.0f</span>);</span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\"></a>    }</span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\"></a>}</span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\"></a><span class=\"fu\">addNumbers</span>(<span class=\"kw\">new</span> <span class=\"bu\">ArrayList</span>&lt;<span class=\"bu\">Number</span>&gt;());</span></code></pre></div>\n<h1 id=\"type-erase\">Type erase</h1>\n<h2 id=\"type-erase-process\">Type erase process</h2>\n<p>Java的泛型是编译时有效的，在运行时，所有泛型参数会被编译器擦除。擦除的规则如下：</p>\n<ul>\n<li>如果参数是有Bound的，则会替换成这个Bound</li>\n<li>如果是Unbounded，则会替换成Object</li>\n</ul>\n<p>如下所示：</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb7-1\"><a href=\"#cb7-1\"></a><span class=\"kw\">public</span> <span class=\"kw\">class</span> <span class=\"bu\">Node</span>&lt;T&gt; {                         <span class=\"co\">// public class Node {</span></span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\"></a>    <span class=\"kw\">private</span> T data;                            <span class=\"co\">//     private Object data;</span></span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\"></a>    <span class=\"kw\">private</span> <span class=\"bu\">Node</span>&lt;T&gt; next;                      <span class=\"co\">//     private Node next;</span></span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\"></a>    <span class=\"kw\">public</span> <span class=\"bu\">Node</span>(T data, <span class=\"bu\">Node</span>&lt;T&gt; next) {        <span class=\"co\">//     public Node(Object data, Node next) {</span></span>\n<span id=\"cb7-5\"><a href=\"#cb7-5\"></a>        <span class=\"kw\">this</span> data = data;                      <span class=\"co\">//         this data = data;</span></span>\n<span id=\"cb7-6\"><a href=\"#cb7-6\"></a>        <span class=\"kw\">this</span> next = next;                      <span class=\"co\">//         this next = next;</span></span>\n<span id=\"cb7-7\"><a href=\"#cb7-7\"></a>    }                                          <span class=\"co\">//     }</span></span>\n<span id=\"cb7-8\"><a href=\"#cb7-8\"></a>                                               <span class=\"co\">// </span></span>\n<span id=\"cb7-9\"><a href=\"#cb7-9\"></a>    <span class=\"kw\">public</span> T <span class=\"fu\">getData</span>() { <span class=\"kw\">return</span> data; }        <span class=\"co\">//       public Object getData() { return data; }</span></span>\n<span id=\"cb7-10\"><a href=\"#cb7-10\"></a>}                                              <span class=\"co\">// }</span></span>\n<span id=\"cb7-11\"><a href=\"#cb7-11\"></a></span>\n<span id=\"cb7-12\"><a href=\"#cb7-12\"></a><span class=\"kw\">public</span> <span class=\"kw\">class</span> <span class=\"bu\">Node</span>&lt;T <span class=\"kw\">extends</span> <span class=\"bu\">Comparable</span>&lt;T&gt;&gt; {   <span class=\"co\">// public class Node {</span></span>\n<span id=\"cb7-13\"><a href=\"#cb7-13\"></a>    <span class=\"kw\">private</span> T data;                            <span class=\"co\">//     private Comparable data;</span></span>\n<span id=\"cb7-14\"><a href=\"#cb7-14\"></a>    <span class=\"kw\">private</span> <span class=\"bu\">Node</span>&lt;T&gt; next;                      <span class=\"co\">//     private Node next;</span></span>\n<span id=\"cb7-15\"><a href=\"#cb7-15\"></a>    <span class=\"kw\">public</span> <span class=\"bu\">Node</span>(T data, <span class=\"bu\">Node</span>&lt;T&gt; next) {        <span class=\"co\">//     public Node(Comparable data, Node next) {</span></span>\n<span id=\"cb7-16\"><a href=\"#cb7-16\"></a>        <span class=\"kw\">this</span>.<span class=\"fu\">data</span> = data;                      <span class=\"co\">//         this.data = data;</span></span>\n<span id=\"cb7-17\"><a href=\"#cb7-17\"></a>        <span class=\"kw\">this</span>.<span class=\"fu\">next</span> = next;                      <span class=\"co\">//         this.next = next;</span></span>\n<span id=\"cb7-18\"><a href=\"#cb7-18\"></a>    }                                          <span class=\"co\">//     }</span></span>\n<span id=\"cb7-19\"><a href=\"#cb7-19\"></a>                                               <span class=\"co\">// </span></span>\n<span id=\"cb7-20\"><a href=\"#cb7-20\"></a>    <span class=\"kw\">public</span> T <span class=\"fu\">getData</span>() { <span class=\"kw\">return</span> data; }        <span class=\"co\">//     public Comparable getData() { return data; }</span></span>\n<span id=\"cb7-21\"><a href=\"#cb7-21\"></a>}                                              <span class=\"co\">// }</span></span></code></pre></div>\n<h2 id=\"bridge-method\">Bridge method</h2>\n<p>按照上面的擦除也会带来问题。考虑下面的例子，如果有一个子类：</p>\n<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb8-1\"><a href=\"#cb8-1\"></a><span class=\"kw\">public</span> <span class=\"kw\">class</span> MyNode <span class=\"kw\">extends</span> <span class=\"bu\">Node</span>&lt;<span class=\"bu\">Integer</span>&gt; {       <span class=\"co\">// public class MyNode extends Node {</span></span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\"></a>    <span class=\"kw\">public</span> <span class=\"fu\">MyNode</span>(<span class=\"bu\">Integer</span> data) { <span class=\"kw\">super</span>(data); }  <span class=\"co\">//     public MyNode(Integer data) { super(data); }</span></span>\n<span id=\"cb8-3\"><a href=\"#cb8-3\"></a>                                                  <span class=\"co\">// </span></span>\n<span id=\"cb8-4\"><a href=\"#cb8-4\"></a>    <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">setData</span>(<span class=\"bu\">Integer</span> data) {           <span class=\"co\">//     public void setData(Integer data) {</span></span>\n<span id=\"cb8-5\"><a href=\"#cb8-5\"></a>        <span class=\"bu\">System</span>.<span class=\"fu\">out</span>.<span class=\"fu\">println</span>(<span class=\"st\">&quot;MyNode.setData&quot;</span>);     <span class=\"co\">//         System.out.println(&quot;MyNode.setData&quot;);</span></span>\n<span id=\"cb8-6\"><a href=\"#cb8-6\"></a>        <span class=\"kw\">super</span>.<span class=\"fu\">setData</span>(data);                      <span class=\"co\">//         super.setData(data);</span></span>\n<span id=\"cb8-7\"><a href=\"#cb8-7\"></a>    }                                             <span class=\"co\">//     }</span></span>\n<span id=\"cb8-8\"><a href=\"#cb8-8\"></a>}                                                 <span class=\"co\">// }</span></span></code></pre></div>\n<p>然后，我们考虑如下的代码：</p>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb9-1\"><a href=\"#cb9-1\"></a>MyNode mn = <span class=\"kw\">new</span> <span class=\"fu\">MyNode</span>(<span class=\"dv\">5</span>);                     <span class=\"co\">// MyNode mn = new MyNode(5);</span></span>\n<span id=\"cb9-2\"><a href=\"#cb9-2\"></a><span class=\"bu\">Node</span> n = mn;                                   <span class=\"co\">// Node n = (MyNode)mn;</span></span>\n<span id=\"cb9-3\"><a href=\"#cb9-3\"></a>n.<span class=\"fu\">setData</span>(<span class=\"st\">&quot;Hello&quot;</span>);                            <span class=\"co\">// n.setData(&quot;Hello&quot;);</span></span>\n<span id=\"cb9-4\"><a href=\"#cb9-4\"></a><span class=\"bu\">Integer</span> x = mn.<span class=\"fu\">data</span>;                           <span class=\"co\">// Integer x = (String)mn.data;</span></span></code></pre></div>\n<p>这里调用setData则会参数类型不能匹配。为了解决这个问题，Java编译器会生成一个Bridge method:</p>\n<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb10-1\"><a href=\"#cb10-1\"></a><span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">setData</span>(<span class=\"bu\">Object</span> data) {</span>\n<span id=\"cb10-2\"><a href=\"#cb10-2\"></a>    <span class=\"fu\">setData</span>((<span class=\"bu\">Integer</span>) data);</span>\n<span id=\"cb10-3\"><a href=\"#cb10-3\"></a>}</span></code></pre></div>\n<h1 id=\"qa\">Q&amp;A</h1>\n<h2 id=\"list-vs-listobject\">List&lt;?&gt; vs List&lt;Object&gt;</h2>\n<blockquote>\n<p>It's important to note that List<Object> and List&lt;?&gt; are not the same. You can insert an Object, or any subtype of &gt;Object, into a List<Object>. But you can only insert null into a List&lt;?&gt;.</p>\n</blockquote>\n<h2 id=\"extends-vs-super\">extends vs super</h2>\n<p>实际上泛型仅仅是为了做一个编译时的检查，从逻辑上确保程序是类型安全的。假设我们有这样的类定义： Object-&gt;Parent-&gt;T-&gt;Child 我们有这样几种写法：</p>\n<ul>\n<li><code>List&lt;?&gt;</code> 代表一种未知类型的List，可能是<code>List&lt;Object&gt;</code>，也可能是<code>List&lt;Child&gt;</code>，都可以</li>\n<li><code>List&lt;? extends T&gt;</code> 代表T或者T的子类的List，可以是<code>List&lt;T&gt;</code>，也可以是<code>List&lt;Child&gt;</code></li>\n<li><code>List&lt;? super T&gt;</code> 代表T或者T的父类的List，可以是<code>List&lt;T&gt;，List&lt;Parent&gt;，List&lt;Object&gt;</code></li>\n</ul>\n<p>我们有一个事实就是，Child是一定可以转化T或者Parent的，但是一个T不一定能转化成Child，因为可能会是别的子类。 比如我们现在做两个列表的拷贝，</p>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb11-1\"><a href=\"#cb11-1\"></a><span class=\"kw\">public</span> <span class=\"dt\">static</span> &lt;T&gt; <span class=\"dt\">void</span> <span class=\"fu\">copy</span>(<span class=\"bu\">List</span> dest, <span class=\"bu\">List</span> src)</span></code></pre></div>\n<p>想实现从一个列表拷贝到另一个列表，比如</p>\n<div class=\"sourceCode\" id=\"cb12\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb12-1\"><a href=\"#cb12-1\"></a><span class=\"bu\">List</span>&lt;Parent&gt; parents;</span>\n<span id=\"cb12-2\"><a href=\"#cb12-2\"></a><span class=\"bu\">List</span>&lt;T&gt; ts;</span>\n<span id=\"cb12-3\"><a href=\"#cb12-3\"></a><span class=\"bu\">List</span>&lt;Child&gt; childs;</span></code></pre></div>\n<p>基于上面说的类的继承的事实，ts/childs显然是可以转化成parents的，但是ts无法确保能转化成childs。因此我们的拷贝方法要这样定义：</p>\n<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb13-1\"><a href=\"#cb13-1\"></a><span class=\"kw\">public</span> <span class=\"kw\">class</span> <span class=\"bu\">Collections</span> { </span>\n<span id=\"cb13-2\"><a href=\"#cb13-2\"></a>  <span class=\"kw\">public</span> <span class=\"dt\">static</span> &lt;T&gt; <span class=\"dt\">void</span> copy  </span>\n<span id=\"cb13-3\"><a href=\"#cb13-3\"></a>  ( <span class=\"bu\">List</span>&lt;? <span class=\"kw\">super</span> T&gt; dest, <span class=\"bu\">List</span>&lt;? <span class=\"kw\">extends</span> T&gt; src) {  <span class=\"co\">// uses bounded wildcards </span></span>\n<span id=\"cb13-4\"><a href=\"#cb13-4\"></a>      <span class=\"kw\">for</span> (<span class=\"dt\">int</span> i=<span class=\"dv\">0</span>; i&lt;src.<span class=\"fu\">size</span>(); i++) </span>\n<span id=\"cb13-5\"><a href=\"#cb13-5\"></a>        dest.<span class=\"fu\">set</span>(i,src.<span class=\"fu\">get</span>(i)); </span>\n<span id=\"cb13-6\"><a href=\"#cb13-6\"></a>  } </span>\n<span id=\"cb13-7\"><a href=\"#cb13-7\"></a>}</span></code></pre></div>\n<p>因为在desc.set()方法中，需要的是一个能够转化为T的对象的，src中&lt;? extends T&gt; 保证了src中的元素一定是一个T。</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/generics/index.html\" target=\"_blank\" rel=\"noopener\">Lesson: Generics (Updated)</a></li>\n</ul>\n","categories":["Programing","Java"],"tags":["generics"]},{"title":"Compile live555 for Android","url":"/it/mobile/compile_live555_for_android/","content":"<p>编译 live555的库在 android 上使用。 <a id=\"more\"></a> 首先下载liveMedia库。解压完成可以先在linux环境下编译一遍试试，例如：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"ex\">./genMakefiles</span> macosx</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a><span class=\"fu\">make</span></span></code></pre></div>\n<p>然后，可以利用ndk-build将它交叉编译成动态库。这时候，需要新建一个Android.mk和Application.mk文件： * Application.mk</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode makefile\"><code class=\"sourceCode makefile\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"dt\">APP_BUILD_SCRIPT </span><span class=\"ch\">:=</span><span class=\"st\"> Android.mk</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a><span class=\"dt\">APP_STL </span><span class=\"ch\">:=</span><span class=\"st\"> gnustl_shared</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a><span class=\"dt\">APP_ABI </span><span class=\"ch\">:=</span><span class=\"st\"> armeabi-v7a</span></span></code></pre></div>\n<ul>\n<li>Android.mk</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode makefile\"><code class=\"sourceCode makefile\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"dt\">LOCAL_PATH </span><span class=\"ch\">:=</span><span class=\"st\"> </span><span class=\"ch\">$(</span><span class=\"kw\">call</span><span class=\"st\"> my-dir</span><span class=\"ch\">)</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\"></a><span class=\"kw\">include</span> <span class=\"ch\">$(</span><span class=\"dt\">CLEAR_VARS</span><span class=\"ch\">)</span></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\"></a></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\"></a><span class=\"dt\">LOCAL_MODULE </span><span class=\"ch\">:=</span><span class=\"st\"> liblive555</span></span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\"></a><span class=\"dt\">LOCAL_CPPFLAGS </span><span class=\"ch\">+=</span><span class=\"st\"> -fexceptions -DXLOCALE_NOT_USED=1 -DNULL=0 -DNO_SSTREAM=1 -UIP_ADD_SOURCE_MEMBERSHIP -DSOCKLEN_T=socklen_t</span></span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\"></a></span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\"></a><span class=\"dt\">LOCAL_C_INCLUDES </span><span class=\"ch\">:=</span><span class=\"st\"> </span><span class=\"ch\">\\</span></span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\"></a><span class=\"st\">    </span><span class=\"ch\">$(</span><span class=\"dt\">LOCAL_PATH</span><span class=\"ch\">)</span><span class=\"st\"> </span><span class=\"ch\">\\</span></span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\"></a><span class=\"st\">    </span><span class=\"ch\">$(</span><span class=\"dt\">LOCAL_PATH</span><span class=\"ch\">)</span><span class=\"st\">/BasicUsageEnvironment/include </span><span class=\"ch\">\\</span></span>\n<span id=\"cb3-11\"><a href=\"#cb3-11\"></a><span class=\"st\">    </span><span class=\"ch\">$(</span><span class=\"dt\">LOCAL_PATH</span><span class=\"ch\">)</span><span class=\"st\">/UsageEnvironment/include </span><span class=\"ch\">\\</span></span>\n<span id=\"cb3-12\"><a href=\"#cb3-12\"></a><span class=\"st\">    </span><span class=\"ch\">$(</span><span class=\"dt\">LOCAL_PATH</span><span class=\"ch\">)</span><span class=\"st\">/groupsock/include </span><span class=\"ch\">\\</span></span>\n<span id=\"cb3-13\"><a href=\"#cb3-13\"></a><span class=\"st\">    </span><span class=\"ch\">$(</span><span class=\"dt\">LOCAL_PATH</span><span class=\"ch\">)</span><span class=\"st\">/liveMedia/include </span><span class=\"ch\">\\</span></span>\n<span id=\"cb3-14\"><a href=\"#cb3-14\"></a></span>\n<span id=\"cb3-15\"><a href=\"#cb3-15\"></a><span class=\"dt\">LOCAL_SRC_FILES </span><span class=\"ch\">:=</span><span class=\"st\"> </span><span class=\"ch\">\\</span></span>\n<span id=\"cb3-16\"><a href=\"#cb3-16\"></a><span class=\"st\">    BasicUsageEnvironment/BasicHashTable.cpp         </span><span class=\"ch\">\\</span></span>\n<span id=\"cb3-17\"><a href=\"#cb3-17\"></a><span class=\"st\">        ...(这里把其他cpp、c文件都列到这里）</span></span>\n<span id=\"cb3-18\"><a href=\"#cb3-18\"></a></span>\n<span id=\"cb3-19\"><a href=\"#cb3-19\"></a><span class=\"kw\">include</span> <span class=\"ch\">$(</span><span class=\"dt\">BUILD_SHARED_LIBRARY</span><span class=\"ch\">)</span></span></code></pre></div>\n<p>然后执行ndk-build进行编译：</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a><span class=\"ex\">ndk-build</span> NDK_PROJECT_PATH=. NDK_APPLICATION_MK=Application.mk</span></code></pre></div>\n<p>编译完成就可以得到libgnustl_shared.so liblive555.so了。</p>\n","categories":["Programing","Android"],"tags":["live555"]},{"title":"在Android 上使用 OpenCV","url":"/it/mobile/use_opencv_on_android/","content":"<p>如题，本文将记录如何在安卓上调用OpenCV。 <a id=\"more\"></a></p>\n<h1 id=\"导入opencv动态库\">导入OpenCV动态库</h1>\n<p>首先当然是下载OpenCV for Android了，然后使用Android Studio创建一个工程并勾选C++ support。</p>\n<p>然后，把OpenCV-android-sdk里面的native目录拷贝到工程中，例如app/opencv这个目录，需要修改以下文件：</p>\n<ul>\n<li>app/build.gradle</li>\n</ul>\n<pre class=\"groovy\"><code>android {\n....\nsourceSets {\n        main {\n            jniLibs.srcDirs = [&#39;opencv/libs&#39;]\n        }\n    }\n}</code></pre>\n<p>这样做的目的是为了打包的时候能自动将opencv/libs/{arch}/libopencv_java3.so这个文件打包到我们的apk中。</p>\n<ul>\n<li>app/CMakeList.txt</li>\n</ul>\n<pre><code>set(opencv &quot;${CMAKE_SOURCE_DIR}/opencv&quot;)\ninclude_directories(${opencv}/jni/include)\nadd_library(libopencv_java3 SHARED IMPORTED )\nset_target_properties(libopencv_java3 PROPERTIES\n                      IMPORTED_LOCATION &quot;${opencv}/libs/${ANDROID_ABI}/libopencv_java3.so&quot;)\n\ntarget_link_libraries( # Specifies the target library.\n                       native-lib\n                       libopencv_java3\n                       ${log-lib} )</code></pre>\n<p>这里把opencv作为动态库链接到工程中，并添加了包含目录，否则在编译cpp的时候会找不到opencv的头文件。</p>\n<h1 id=\"导入opencv-jaba-module\">导入OpenCV Jaba Module</h1>\n<p>把opencv sdk下面的java目录作为一个module导入到工程中，并设置app依赖此module，这样就可以在工程中使用opencv提供的java接口了。我们来做一个相机：</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"kw\">public</span> <span class=\"kw\">class</span> MainActivity <span class=\"kw\">extends</span> AppCompatActivity <span class=\"kw\">implements</span> CameraBridgeViewBase.<span class=\"fu\">CvCameraViewListener2</span></span></code></pre></div>\n<p>这里首先实现CvCameraViewListener2接口，来实现相机的处理。</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a>    <span class=\"kw\">private</span> CameraBridgeViewBase cameraView;</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\"></a></span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\"></a>    <span class=\"kw\">private</span> BaseLoaderCallback loaderCallback = <span class=\"kw\">new</span> <span class=\"fu\">BaseLoaderCallback</span>(<span class=\"kw\">this</span>) {</span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\"></a>        <span class=\"at\">@Override</span></span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\"></a>        <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">onManagerConnected</span>(<span class=\"dt\">int</span> status) {</span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\"></a>            <span class=\"kw\">switch</span> (status) {</span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\"></a>                <span class=\"kw\">case</span> LoaderCallbackInterface.<span class=\"fu\">SUCCESS</span>:</span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\"></a>                    cameraView.<span class=\"fu\">enableView</span>();</span>\n<span id=\"cb4-9\"><a href=\"#cb4-9\"></a>                    <span class=\"kw\">break</span>;</span>\n<span id=\"cb4-10\"><a href=\"#cb4-10\"></a>                <span class=\"kw\">default</span>:</span>\n<span id=\"cb4-11\"><a href=\"#cb4-11\"></a>                    <span class=\"kw\">super</span>.<span class=\"fu\">onManagerConnected</span>(status);</span>\n<span id=\"cb4-12\"><a href=\"#cb4-12\"></a>                    <span class=\"kw\">break</span>;</span>\n<span id=\"cb4-13\"><a href=\"#cb4-13\"></a>            }</span>\n<span id=\"cb4-14\"><a href=\"#cb4-14\"></a>        }</span>\n<span id=\"cb4-15\"><a href=\"#cb4-15\"></a>    };</span>\n<span id=\"cb4-16\"><a href=\"#cb4-16\"></a></span>\n<span id=\"cb4-17\"><a href=\"#cb4-17\"></a>    <span class=\"at\">@Override</span></span>\n<span id=\"cb4-18\"><a href=\"#cb4-18\"></a>    <span class=\"kw\">protected</span> <span class=\"dt\">void</span> <span class=\"fu\">onCreate</span>(Bundle savedInstanceState) {</span>\n<span id=\"cb4-19\"><a href=\"#cb4-19\"></a>        <span class=\"kw\">super</span>.<span class=\"fu\">onCreate</span>(savedInstanceState);</span>\n<span id=\"cb4-20\"><a href=\"#cb4-20\"></a>        <span class=\"kw\">this</span>.<span class=\"fu\">requestPermissions</span>();</span>\n<span id=\"cb4-21\"><a href=\"#cb4-21\"></a></span>\n<span id=\"cb4-22\"><a href=\"#cb4-22\"></a>        <span class=\"kw\">this</span>.<span class=\"fu\">getWindow</span>().<span class=\"fu\">addFlags</span>(WindowManager.<span class=\"fu\">LayoutParams</span>.<span class=\"fu\">FLAG_KEEP_SCREEN_ON</span>);</span>\n<span id=\"cb4-23\"><a href=\"#cb4-23\"></a>        <span class=\"fu\">setContentView</span>(R.<span class=\"fu\">layout</span>.<span class=\"fu\">activity_main</span>);</span>\n<span id=\"cb4-24\"><a href=\"#cb4-24\"></a>        <span class=\"kw\">this</span>.<span class=\"fu\">cameraView</span> = (CameraBridgeViewBase) <span class=\"kw\">this</span>.<span class=\"fu\">findViewById</span>(R.<span class=\"fu\">id</span>.<span class=\"fu\">cameraView</span>);</span>\n<span id=\"cb4-25\"><a href=\"#cb4-25\"></a>        <span class=\"kw\">this</span>.<span class=\"fu\">cameraView</span>.<span class=\"fu\">setVisibility</span>(SurfaceView.<span class=\"fu\">VISIBLE</span>);</span>\n<span id=\"cb4-26\"><a href=\"#cb4-26\"></a>        <span class=\"kw\">this</span>.<span class=\"fu\">cameraView</span>.<span class=\"fu\">setCvCameraViewListener</span>(<span class=\"kw\">this</span>);</span>\n<span id=\"cb4-27\"><a href=\"#cb4-27\"></a>    }</span></code></pre></div>\n<p>在create的时候，我们申请权限，然后设置相机view的监听为自身。</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb5-1\"><a href=\"#cb5-1\"></a>    <span class=\"at\">@Override</span></span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\"></a>    <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">onCameraViewStarted</span>(<span class=\"dt\">int</span> width, <span class=\"dt\">int</span> height) {</span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\"></a>    }</span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\"></a></span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\"></a>    <span class=\"at\">@Override</span></span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\"></a>    <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">onCameraViewStopped</span>() {</span>\n<span id=\"cb5-7\"><a href=\"#cb5-7\"></a>    }</span></code></pre></div>\n<p>相机启动停止我们不需要做别的操作。</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb6-1\"><a href=\"#cb6-1\"></a>    <span class=\"at\">@Override</span></span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\"></a>    <span class=\"kw\">protected</span> <span class=\"dt\">void</span> <span class=\"fu\">onResume</span>() {</span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\"></a>        <span class=\"kw\">super</span>.<span class=\"fu\">onResume</span>();</span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\"></a>        <span class=\"kw\">if</span> (!OpenCVLoader.<span class=\"fu\">initDebug</span>())</span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\"></a>            OpenCVLoader.<span class=\"fu\">initAsync</span>(OpenCVLoader.<span class=\"fu\">OPENCV_VERSION_3_0_0</span>, <span class=\"kw\">this</span>, <span class=\"kw\">this</span>.<span class=\"fu\">loaderCallback</span>);</span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\"></a>        <span class=\"kw\">else</span></span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\"></a>            <span class=\"kw\">this</span>.<span class=\"fu\">loaderCallback</span>.<span class=\"fu\">onManagerConnected</span>(LoaderCallbackInterface.<span class=\"fu\">SUCCESS</span>);</span>\n<span id=\"cb6-8\"><a href=\"#cb6-8\"></a>    }</span></code></pre></div>\n<p>相机继续的时候，我们重新加载OpenCV库。</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb7-1\"><a href=\"#cb7-1\"></a>    <span class=\"at\">@Override</span></span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\"></a>    <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">onPause</span>() {</span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\"></a>        <span class=\"kw\">super</span>.<span class=\"fu\">onPause</span>();</span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\"></a>        <span class=\"kw\">if</span> (<span class=\"kw\">this</span>.<span class=\"fu\">cameraView</span> != <span class=\"kw\">null</span>)</span>\n<span id=\"cb7-5\"><a href=\"#cb7-5\"></a>            <span class=\"kw\">this</span>.<span class=\"fu\">cameraView</span>.<span class=\"fu\">disableView</span>();</span>\n<span id=\"cb7-6\"><a href=\"#cb7-6\"></a>    }</span>\n<span id=\"cb7-7\"><a href=\"#cb7-7\"></a></span>\n<span id=\"cb7-8\"><a href=\"#cb7-8\"></a>    <span class=\"at\">@Override</span></span>\n<span id=\"cb7-9\"><a href=\"#cb7-9\"></a>    <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">onDestroy</span>() {</span>\n<span id=\"cb7-10\"><a href=\"#cb7-10\"></a>        <span class=\"kw\">super</span>.<span class=\"fu\">onDestroy</span>();</span>\n<span id=\"cb7-11\"><a href=\"#cb7-11\"></a>        <span class=\"kw\">if</span> (<span class=\"kw\">this</span>.<span class=\"fu\">cameraView</span> != <span class=\"kw\">null</span>)</span>\n<span id=\"cb7-12\"><a href=\"#cb7-12\"></a>            <span class=\"kw\">this</span>.<span class=\"fu\">cameraView</span>.<span class=\"fu\">disableView</span>();</span>\n<span id=\"cb7-13\"><a href=\"#cb7-13\"></a>    }</span></code></pre></div>\n<p>暂停和销毁的时候，我们把相机禁用掉。</p>\n<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb8-1\"><a href=\"#cb8-1\"></a>    <span class=\"at\">@Override</span></span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\"></a>    <span class=\"kw\">public</span> Mat <span class=\"fu\">onCameraFrame</span>(CameraBridgeViewBase.<span class=\"fu\">CvCameraViewFrame</span> inputFrame) {</span>\n<span id=\"cb8-3\"><a href=\"#cb8-3\"></a>        Mat frame = inputFrame.<span class=\"fu\">rgba</span>();</span>\n<span id=\"cb8-4\"><a href=\"#cb8-4\"></a>        Core.<span class=\"fu\">rotate</span>(frame, frame, Core.<span class=\"fu\">ROTATE_90_CLOCKWISE</span>);</span>\n<span id=\"cb8-5\"><a href=\"#cb8-5\"></a>        <span class=\"kw\">return</span> frame;</span>\n<span id=\"cb8-6\"><a href=\"#cb8-6\"></a>    }</span></code></pre></div>\n<p>这是关键的一步，处理相机的一帧。我们队图像进行了旋转，否则图像的坐标和我们的预期的是不一致的。注意在OpenCV3.2的时候，引入了便捷的rotate函数，如果用之前的方法，可能需要flip和reverse来实现了。</p>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb9-1\"><a href=\"#cb9-1\"></a><span class=\"kw\">private</span> <span class=\"dt\">void</span> <span class=\"fu\">requestPermissions</span>() {</span>\n<span id=\"cb9-2\"><a href=\"#cb9-2\"></a>        <span class=\"dt\">int</span> permissionCheck = ContextCompat.<span class=\"fu\">checkSelfPermission</span>(<span class=\"kw\">this</span>, <span class=\"bu\">Manifest</span>.<span class=\"fu\">permission</span>.<span class=\"fu\">CAMERA</span>);</span>\n<span id=\"cb9-3\"><a href=\"#cb9-3\"></a>        <span class=\"kw\">if</span> (permissionCheck == PackageManager.<span class=\"fu\">PERMISSION_GRANTED</span>)</span>\n<span id=\"cb9-4\"><a href=\"#cb9-4\"></a>            <span class=\"kw\">return</span>;</span>\n<span id=\"cb9-5\"><a href=\"#cb9-5\"></a></span>\n<span id=\"cb9-6\"><a href=\"#cb9-6\"></a>        ActivityCompat.<span class=\"fu\">requestPermissions</span>(<span class=\"kw\">this</span>,</span>\n<span id=\"cb9-7\"><a href=\"#cb9-7\"></a>                <span class=\"kw\">new</span> <span class=\"bu\">String</span>[]{<span class=\"bu\">Manifest</span>.<span class=\"fu\">permission</span>.<span class=\"fu\">CAMERA</span>},</span>\n<span id=\"cb9-8\"><a href=\"#cb9-8\"></a>                <span class=\"dv\">0</span>);</span>\n<span id=\"cb9-9\"><a href=\"#cb9-9\"></a></span>\n<span id=\"cb9-10\"><a href=\"#cb9-10\"></a>    }</span></code></pre></div>\n<p>最后是权限的动态申请。当然了，在AndroidManifest.xml中也需要进行设置，我们直接贴代码了：</p>\n<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode xml\"><code class=\"sourceCode xml\"><span id=\"cb10-1\"><a href=\"#cb10-1\"></a><span class=\"kw\">&lt;?xml</span> version=&quot;1.0&quot; encoding=&quot;utf-8&quot;<span class=\"kw\">?&gt;</span></span>\n<span id=\"cb10-2\"><a href=\"#cb10-2\"></a><span class=\"kw\">&lt;manifest</span><span class=\"ot\"> xmlns:android=</span><span class=\"st\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span>\n<span id=\"cb10-3\"><a href=\"#cb10-3\"></a><span class=\"ot\">    package=</span><span class=\"st\">&quot;com.riguz.okapia&quot;</span><span class=\"kw\">&gt;</span></span>\n<span id=\"cb10-4\"><a href=\"#cb10-4\"></a></span>\n<span id=\"cb10-5\"><a href=\"#cb10-5\"></a>    <span class=\"kw\">&lt;uses-permission</span><span class=\"ot\"> android:name=</span><span class=\"st\">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> <span class=\"kw\">/&gt;</span></span>\n<span id=\"cb10-6\"><a href=\"#cb10-6\"></a>    <span class=\"kw\">&lt;uses-permission</span><span class=\"ot\"> android:name=</span><span class=\"st\">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> <span class=\"kw\">/&gt;</span></span>\n<span id=\"cb10-7\"><a href=\"#cb10-7\"></a>    <span class=\"kw\">&lt;uses-permission</span><span class=\"ot\"> android:name=</span><span class=\"st\">&quot;android.permission.CAMERA&quot;</span> <span class=\"kw\">/&gt;</span></span>\n<span id=\"cb10-8\"><a href=\"#cb10-8\"></a></span>\n<span id=\"cb10-9\"><a href=\"#cb10-9\"></a>    <span class=\"kw\">&lt;uses-feature</span><span class=\"ot\"> android:name=</span><span class=\"st\">&quot;android.hardware.camera&quot;</span> <span class=\"kw\">/&gt;</span></span>\n<span id=\"cb10-10\"><a href=\"#cb10-10\"></a>    <span class=\"kw\">&lt;uses-feature</span><span class=\"ot\"> android:name=</span><span class=\"st\">&quot;android.hardware.camera.autofocus&quot;</span> <span class=\"kw\">/&gt;</span></span>\n<span id=\"cb10-11\"><a href=\"#cb10-11\"></a>    <span class=\"kw\">&lt;uses-feature</span><span class=\"ot\"> android:name=</span><span class=\"st\">&quot;android.hardware.camera.front&quot;</span> <span class=\"kw\">/&gt;</span></span>\n<span id=\"cb10-12\"><a href=\"#cb10-12\"></a>    <span class=\"kw\">&lt;uses-feature</span><span class=\"ot\"> android:name=</span><span class=\"st\">&quot;android.hardware.camera.front.autofocus&quot;</span> <span class=\"kw\">/&gt;</span></span>\n<span id=\"cb10-13\"><a href=\"#cb10-13\"></a></span>\n<span id=\"cb10-14\"><a href=\"#cb10-14\"></a>    <span class=\"kw\">&lt;application</span></span>\n<span id=\"cb10-15\"><a href=\"#cb10-15\"></a><span class=\"ot\">        android:allowBackup=</span><span class=\"st\">&quot;true&quot;</span></span>\n<span id=\"cb10-16\"><a href=\"#cb10-16\"></a><span class=\"ot\">        android:icon=</span><span class=\"st\">&quot;@mipmap/ic_launcher&quot;</span></span>\n<span id=\"cb10-17\"><a href=\"#cb10-17\"></a><span class=\"ot\">        android:label=</span><span class=\"st\">&quot;@string/app_name&quot;</span></span>\n<span id=\"cb10-18\"><a href=\"#cb10-18\"></a><span class=\"ot\">        android:roundIcon=</span><span class=\"st\">&quot;@mipmap/ic_launcher_round&quot;</span></span>\n<span id=\"cb10-19\"><a href=\"#cb10-19\"></a><span class=\"ot\">        android:supportsRtl=</span><span class=\"st\">&quot;true&quot;</span></span>\n<span id=\"cb10-20\"><a href=\"#cb10-20\"></a><span class=\"ot\">        android:theme=</span><span class=\"st\">&quot;@style/AppTheme&quot;</span><span class=\"kw\">&gt;</span></span>\n<span id=\"cb10-21\"><a href=\"#cb10-21\"></a>        <span class=\"kw\">&lt;activity</span><span class=\"ot\"> android:name=</span><span class=\"st\">&quot;.MainActivity&quot;</span><span class=\"kw\">&gt;</span></span>\n<span id=\"cb10-22\"><a href=\"#cb10-22\"></a>            <span class=\"kw\">&lt;intent-filter&gt;</span></span>\n<span id=\"cb10-23\"><a href=\"#cb10-23\"></a>                <span class=\"kw\">&lt;action</span><span class=\"ot\"> android:name=</span><span class=\"st\">&quot;android.intent.action.MAIN&quot;</span> <span class=\"kw\">/&gt;</span></span>\n<span id=\"cb10-24\"><a href=\"#cb10-24\"></a></span>\n<span id=\"cb10-25\"><a href=\"#cb10-25\"></a>                <span class=\"kw\">&lt;category</span><span class=\"ot\"> android:name=</span><span class=\"st\">&quot;android.intent.category.LAUNCHER&quot;</span> <span class=\"kw\">/&gt;</span></span>\n<span id=\"cb10-26\"><a href=\"#cb10-26\"></a>            <span class=\"kw\">&lt;/intent-filter&gt;</span></span>\n<span id=\"cb10-27\"><a href=\"#cb10-27\"></a>        <span class=\"kw\">&lt;/activity&gt;</span></span>\n<span id=\"cb10-28\"><a href=\"#cb10-28\"></a>    <span class=\"kw\">&lt;/application&gt;</span></span>\n<span id=\"cb10-29\"><a href=\"#cb10-29\"></a></span>\n<span id=\"cb10-30\"><a href=\"#cb10-30\"></a><span class=\"kw\">&lt;/manifest&gt;</span></span></code></pre></div>\n<p>参考：<a href=\"http://blog.codeonion.com/2016/04/09/show-camera-on-android-app-using-opencv-for-android/\" target=\"_blank\" rel=\"noopener\">Use OpenCV to show camera on android App with correct orientation</a></p>\n","categories":["Programing","Android"],"tags":["Android","JNI","OpenCV"]},{"title":"分布式系统 ID 生成","url":"/it/arch/distributed_id_generation/","content":"<p>ID生成一直是一个老生常谈的问题，个人不习惯使用ID自增的方式，从0开始...每次递增，原因是因为low...最近研究了一下ID生成的算法，主要用来给我们的订单系统用。首先说一下背景：我们的系统提供给很多经销商使用，每个经销商登录到我们的系统，发生业务、产生订单。 <a id=\"more\"></a></p>\n<h1 id=\"设计原则\">设计原则</h1>\n<ul>\n<li><strong>唯一性</strong>：保证生成的ID不会出现重复，需要考虑分布式部署情况下的唯一性</li>\n<li><strong>安全性</strong>：不会通过订单号泄露流水信息（比如别人通过订单号知道你一天大概多少交易量）</li>\n<li><strong>长度</strong>：长度未明确要求，在满足其他需要的情况下应该尽量短</li>\n<li><strong>字符集</strong>：字符未明确要求，按允许数字 + 英文字母（大写）设计</li>\n<li><strong>性能要求</strong>：如果按500家商家上线，每家每天1000次订单生成，其中高峰期每分钟10单，系统能支持运行10年的指标来计算，每天的订单数为500 * 1000 = 50W，高峰期每分钟为500 * 10 = 5000单，10年为 500 * 1000 * 365 * 10 = 1825000000单</li>\n<li><strong>易读性</strong>：如果使用英文字母，则可以考虑去除掉容易混淆的字母：O I S Z 等</li>\n</ul>\n<h1 id=\"option-1snowflake算法\">Option 1：Snowflake算法</h1>\n<p>参考twitter的snowflake 64bit ID生成算法，设计如下的ID规则：</p>\n<p>0 00000000 00000000 00000000 00000000 00000000 0 00000000 00 00000000 0000</p>\n<ul>\n<li>1 bit 符号位，固定为0，不使用</li>\n<li>41bit时间戳，即当前时间到某一开始时间的毫秒数</li>\n<li>10bit 商家标识，可根据其上线时间递增</li>\n<li>12bit 序列号，每一毫秒内从0开始，如果超过最大值则等待下一毫秒</li>\n</ul>\n<p>其中41bit时间戳最大可支持的时间： (2^41) / (365 × 24 × 60 × 60 × 1000) = 2199023255552 / 31536000000 ≈ 69.7(年)</p>\n<p>10bit 标识 最大支持的商家数为： 2^10 = 1024</p>\n<p>12bit 序列号最大支持为每秒： 2^12 = 4096</p>\n<p>生成的ID大概像这样：</p>\n<pre><code>274432\n...\n278501\n278502\n278503\n278504\n...\n109996123808346299\n109996123808346300\n109996123808346301\n….\n2647243359755833344\n2647243359755833345\n2647243359755833346</code></pre>\n<p>如果需要支持分布式部署，则可考虑将商家标识的10位中插入机器标识，根据最大可能的机器节点数来选取位数。比如分配3位，就可以支持2^3=8台机器。同样，时间戳可以浮动，一般的系统根本不需要考虑超过5年以上的情况，能用两年就不错了...当然我倾向于支持10年，10年后如果世界末日不到，系统还在用，那就再想办法吧。</p>\n<h1 id=\"option-2-时间戳-商家标识-随机数\">Option 2 : 时间戳 + 商家标识 + 随机数</h1>\n<h2 id=\"时间6位-商家标识-4位-随机数4位\">时间（6位）+ 商家标识 （4位） + 随机数（4位）</h2>\n<p>170911 0001 8774</p>\n<p>其中，商家标识和随机数取值范围为[0-9A-Z]即 T = 26 + 10 = 36(种)</p>\n<p>其中，商家标识最大支持的商家数为： T × T × T × T = T^ 4 = 1679616</p>\n<p>随机数支持范围同商家标识。因时间精确到天，因此随机数每日不能重复，每天最大支持的订单数（每个商家）即为： T^ 4 = 1679616</p>\n<h2 id=\"时间3位-商家标识-2位-随机数2位\">时间（3位）+ 商家标识 （2位） + 随机数（2位）</h2>\n<p>79A 0A F1</p>\n<p>其中年、月、日各占一位，其中年可以取年份-2017年的差值，超过9则用字母表示，例如2017年9月25日，可表示为： 09M</p>\n<p>这是简短的方案，年份只取一位则最多只可以使用T = 36年，否则会出现重复</p>\n<p>其中商家标识最大支持： T ^ 2 = 1296</p>\n<p>每天每一个商家标识最多只能支持T^ 2 = 1296笔订单号，若不能满足业务需求则可以将随机数扩展为3-4位</p>\n<h2 id=\"时间8位-商家标识-2位-序列号2位\">时间（8位）+ 商家标识 （2位） + 序列号（2位）</h2>\n<p>65DEF7BE AF 35 65DEF7BE （16进制）= 1709111230（10进制）</p>\n<p>因时间精确到分钟，随机数按照每分钟递增，因此每分钟可以支持订单数： T ^ 2 = 1296 每天可支持的订单数为： 24 × 60 × T^ 2 = 1866240</p>\n<h1 id=\"option-3-时间戳-随机数\">Option 3 : 时间戳 + 随机数</h1>\n<p>时间戳（6位） + 随机数（4位） 170911 9527</p>\n<p>使用4位数字则每日最大只能9999单，使用字母则可以有 T^ 4 = 1679616 单 若按500家商家算平均每个商家每天有3359单</p>\n<h1 id=\"option-4-渠道号-时间戳-流水号-用户标识随机数\">Option 4 : 渠道号 + 时间戳 +（流水号 +用户标识+随机数）</h1>\n<p>R 79A 0011 9527 34</p>\n<p>其中，流水号按用户按天生成，用户标识取用户ID后四位，例如： 流水号（4位） + 用户标识（4位） + 随机数（2位） 0011 9527 34</p>\n","categories":["Programing","Distributed"],"tags":["UUID"]},{"title":"使用Spring Cloud Contract进行契约测试","url":"/it/arch/spring_cloud_contract/","content":"<p>研究了一下契约测试，这个概念听着很高端，其实解决的是一个很古老的问题：系统间的接口定义。以前我们做系统同其他系统对接的时候需要定义接口，需要去设计，去确认；尤其是当下微服务比较盛行的时候，我们自己的系统之间也增加了接口，伴随着敏捷开发的流程，很多时候接口在一开始根本都不会去设计，想到哪改到哪.....于是就出现了所谓的契约测试的东西。 <a id=\"more\"></a> 先来说说契约测试解决的问题吧：</p>\n<ul>\n<li>consumer在依赖的provider接口没有实现的时候可以用stub模拟</li>\n<li>provider可以测试自身的接口是否满足接口定义</li>\n<li>consumer和provider都以契约为准，但接口有变动时修改契约，否则测试通不过...~</li>\n<li>可以对边界进行测试</li>\n</ul>\n<p>大概就是这样吧，我觉得前两条是最重要的Feature，举个例子，比如我们有一个Vehicle的服务，用来根据vin(车辆底盘号）来获取车辆的信息；一个Costomer的服务需要调用这个服务来获取客户的车辆信息。我们的Vehicle接口如下：</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"at\">@GetMapping</span>(<span class=\"st\">&quot;/vehicle/{vin}&quot;</span>)</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a>VehicleDetail <span class=\"fu\">getVehicleDetail</span>(<span class=\"at\">@PathVariable</span> <span class=\"bu\">String</span> vin){</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>   VehicleDetail item = <span class=\"kw\">this</span>.<span class=\"fu\">vehicleService</span>.<span class=\"fu\">getVehicle</span>(vin);</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>   <span class=\"kw\">if</span>(item == <span class=\"kw\">null</span>)</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>       <span class=\"kw\">throw</span> <span class=\"kw\">new</span> <span class=\"fu\">VehicleNotFoundException</span>();</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>   <span class=\"kw\">return</span> item;</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a>}</span></code></pre></div>\n<p>我们在Vehicle服务中定义一个契约：</p>\n<pre class=\"groovy\"><code>Contract.make {\n    request {\n        method &#39;GET&#39;\n        url value(&#39;/vehicle/WDC1660631A7506890&#39;)\n    }\n    response {\n        status 200\n        body([\n                vin           : &#39;WDC1660631A7506890&#39;,\n                brand         : &#39;Audi X5&#39;,\n                owner         : &#39;James 王&#39;,\n                registeredDate: 1502347667000,\n                mileage       : 1200\n        ])\n        headers {\n            header(&#39;Content-Type&#39;: value(\n                    producer(regex(&#39;application/json.*&#39;)),\n                    consumer(&#39;application/json&#39;)\n            ))\n        }\n    }\n}</code></pre>\n<p>这样我们在执行gradle的<code>generateContractTests</code>任务的时候会自动生成一个契约测试，我们在测试Vehicle服务的时候，只需要Mock我们的Service，返回对应的模拟信息：</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"at\">@Before</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a><span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">setUp</span>() <span class=\"kw\">throws</span> <span class=\"bu\">Exception</span> {</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\"></a>    VehicleDetail i = <span class=\"kw\">new</span> <span class=\"fu\">VehicleDetail</span>();</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\"></a>    i.<span class=\"fu\">setVin</span>(<span class=\"st\">&quot;WDC1660631A7506890&quot;</span>);</span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\"></a>    i.<span class=\"fu\">setOwner</span>(<span class=\"st\">&quot;James 王&quot;</span>);</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\"></a>    i.<span class=\"fu\">setBrand</span>(<span class=\"st\">&quot;Audi X5&quot;</span>);</span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\"></a>    i.<span class=\"fu\">setRegisteredDate</span>(<span class=\"kw\">new</span> <span class=\"bu\">Date</span>(<span class=\"dv\">1502347667000L</span>));</span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\"></a>    i.<span class=\"fu\">setMileage</span>(<span class=\"dv\">1200</span>);</span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\"></a>    RestAssuredMockMvc.<span class=\"fu\">webAppContextSetup</span>(context);</span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\"></a></span>\n<span id=\"cb3-11\"><a href=\"#cb3-11\"></a>    <span class=\"fu\">given</span>(vehicleService.<span class=\"fu\">getVehicle</span>(<span class=\"st\">&quot;WDC1660631A7506890&quot;</span>)).<span class=\"fu\">willReturn</span>(i);</span>\n<span id=\"cb3-12\"><a href=\"#cb3-12\"></a>}</span></code></pre></div>\n<p>刚刚的契约是一个很固定的数据，我们还可以加上正则表达式的检测：</p>\n<pre class=\"groovy\"><code>Contract.make {\n    request {\n        method &#39;GET&#39;\n        url value(consumer(regex(&#39;/vehicle/[A-Z0-9]{18}&#39;)),\n                producer(&#39;/vehicle/WDC1660631A7506890&#39;))\n    }\n    response {\n        status 200\n        body([\n                vin           : $(producer(regex(/[A-Z0-9]{18}/))),\n                brand         : $(producer(anyNonBlankString())),\n                owner         : $(producer(anyNonBlankString())),\n                registeredDate: $(producer(regex(/[1-9][0-9]{11,12}/))),\n                mileage       : $(producer(regex(/[1-9][0-9]{0,10}/)))\n        ])\n        headers {\n            header(&#39;Content-Type&#39;: value(\n                    producer(regex(&#39;application/json.*&#39;)),\n                    consumer(&#39;application/json&#39;)\n            ))\n        }\n    }\n}</code></pre>\n<p>以及异常情况下的测试：</p>\n<pre class=\"groovy\"><code>Contract.make {\n    request {\n        method &#39;GET&#39;\n        url value(consumer(regex(&#39;/vehicle/\\\\w.+&#39;)),\n                producer(&#39;/vehicle/XXXXX&#39;))\n    }\n    response {\n        status 404\n    }\n}</code></pre>\n<p>这样每一个groovy文件都会对应着生成一个测试，达到我们测试Provider的目的。那么，对于客户端来说，怎么测试呢？很简单，我们执行gradle的<code>install</code>命令，会把生成的stub包放到本地的gradle源中，我们在客户端测试的时候可以这么写：</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb6-1\"><a href=\"#cb6-1\"></a><span class=\"at\">@RunWith</span>(SpringRunner.<span class=\"fu\">class</span>)</span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\"></a><span class=\"at\">@SpringBootTest</span></span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\"></a><span class=\"at\">@AutoConfigureStubRunner</span>(ids = <span class=\"st\">&quot;com.riguz:foo:+:stubs:10000&quot;</span>, workOffline = <span class=\"kw\">true</span>)</span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\"></a><span class=\"kw\">public</span> <span class=\"kw\">class</span> CustomerServiceTest {</span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\"></a></span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\"></a>    <span class=\"at\">@Autowired</span></span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\"></a>    <span class=\"kw\">private</span> CustomerService customerService;</span>\n<span id=\"cb6-8\"><a href=\"#cb6-8\"></a></span>\n<span id=\"cb6-9\"><a href=\"#cb6-9\"></a>    <span class=\"at\">@Test</span></span>\n<span id=\"cb6-10\"><a href=\"#cb6-10\"></a>    <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">shouldReturnCustomerDetail</span>(){</span>\n<span id=\"cb6-11\"><a href=\"#cb6-11\"></a>        CustomerInfo info = <span class=\"kw\">this</span>.<span class=\"fu\">customerService</span>.<span class=\"fu\">getCustomerInfo</span>(<span class=\"st\">&quot;123&quot;</span>);</span>\n<span id=\"cb6-12\"><a href=\"#cb6-12\"></a>        <span class=\"bu\">System</span>.<span class=\"fu\">out</span>.<span class=\"fu\">println</span>(info);</span>\n<span id=\"cb6-13\"><a href=\"#cb6-13\"></a>        <span class=\"fu\">assertEquals</span>(<span class=\"dv\">1</span>, info.<span class=\"fu\">getVehicles</span>().<span class=\"fu\">size</span>());</span>\n<span id=\"cb6-14\"><a href=\"#cb6-14\"></a>        <span class=\"co\">// ...</span></span>\n<span id=\"cb6-15\"><a href=\"#cb6-15\"></a>    }</span>\n<span id=\"cb6-16\"><a href=\"#cb6-16\"></a>}</span></code></pre></div>\n<p>对应着<code>~/.m2/repository/com/riguz/foo/1.0-SNAPSHOT/foo-1.0-SNAPSHOT-stubs.jar</code>，<code>+</code>表示取最新版本，<code>10000</code>是端口号，也就是模拟出了一个远程的服务端。这样如果契约有修改的话，取到新的契约stubs包也会跟着修改了。</p>\n<p>另外，如果单纯的想模拟一个服务端怎么办？有办法，我们在provider中执行gradle的<code>generateClientStubs</code>命令后，会生成一个mappings目录，在<code>build/stubs/....</code>下面。里面有一些json文件，例如我们的：</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode json\"><code class=\"sourceCode json\"><span id=\"cb7-1\"><a href=\"#cb7-1\"></a><span class=\"fu\">{</span></span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\"></a>  <span class=\"dt\">&quot;id&quot;</span> <span class=\"fu\">:</span> <span class=\"st\">&quot;5dd47b81-a184-4b9e-be02-b6e22c409c81&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\"></a>  <span class=\"dt\">&quot;request&quot;</span> <span class=\"fu\">:</span> <span class=\"fu\">{</span></span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\"></a>    <span class=\"dt\">&quot;url&quot;</span> <span class=\"fu\">:</span> <span class=\"st\">&quot;/vehicle/WDC1660631A7506890&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb7-5\"><a href=\"#cb7-5\"></a>    <span class=\"dt\">&quot;method&quot;</span> <span class=\"fu\">:</span> <span class=\"st\">&quot;GET&quot;</span></span>\n<span id=\"cb7-6\"><a href=\"#cb7-6\"></a>  <span class=\"fu\">},</span></span>\n<span id=\"cb7-7\"><a href=\"#cb7-7\"></a>  <span class=\"dt\">&quot;response&quot;</span> <span class=\"fu\">:</span> <span class=\"fu\">{</span></span>\n<span id=\"cb7-8\"><a href=\"#cb7-8\"></a>    <span class=\"dt\">&quot;status&quot;</span> <span class=\"fu\">:</span> <span class=\"dv\">200</span><span class=\"fu\">,</span></span>\n<span id=\"cb7-9\"><a href=\"#cb7-9\"></a>    <span class=\"dt\">&quot;body&quot;</span> <span class=\"fu\">:</span> <span class=\"st\">&quot;{</span><span class=\"ch\">\\&quot;</span><span class=\"st\">vin</span><span class=\"ch\">\\&quot;</span><span class=\"st\">:</span><span class=\"ch\">\\&quot;</span><span class=\"st\">WDC1660631A7506890</span><span class=\"ch\">\\&quot;</span><span class=\"st\">,</span><span class=\"ch\">\\&quot;</span><span class=\"st\">brand</span><span class=\"ch\">\\&quot;</span><span class=\"st\">:</span><span class=\"ch\">\\&quot;</span><span class=\"st\">Audi X5</span><span class=\"ch\">\\&quot;</span><span class=\"st\">,</span><span class=\"ch\">\\&quot;</span><span class=\"st\">owner</span><span class=\"ch\">\\&quot;</span><span class=\"st\">:</span><span class=\"ch\">\\&quot;</span><span class=\"st\">James </span><span class=\"ch\">\\\\</span><span class=\"st\">u738b</span><span class=\"ch\">\\&quot;</span><span class=\"st\">,</span><span class=\"ch\">\\&quot;</span><span class=\"st\">registeredDate</span><span class=\"ch\">\\&quot;</span><span class=\"st\">:1502347667000,</span><span class=\"ch\">\\&quot;</span><span class=\"st\">mileage</span><span class=\"ch\">\\&quot;</span><span class=\"st\">:1200}&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb7-10\"><a href=\"#cb7-10\"></a>    <span class=\"dt\">&quot;headers&quot;</span> <span class=\"fu\">:</span> <span class=\"fu\">{</span></span>\n<span id=\"cb7-11\"><a href=\"#cb7-11\"></a>      <span class=\"dt\">&quot;Content-Type&quot;</span> <span class=\"fu\">:</span> <span class=\"st\">&quot;application/json&quot;</span></span>\n<span id=\"cb7-12\"><a href=\"#cb7-12\"></a>    <span class=\"fu\">},</span></span>\n<span id=\"cb7-13\"><a href=\"#cb7-13\"></a>    <span class=\"dt\">&quot;transformers&quot;</span> <span class=\"fu\">:</span> <span class=\"ot\">[</span> <span class=\"st\">&quot;response-template&quot;</span> <span class=\"ot\">]</span></span>\n<span id=\"cb7-14\"><a href=\"#cb7-14\"></a>  <span class=\"fu\">},</span></span>\n<span id=\"cb7-15\"><a href=\"#cb7-15\"></a>  <span class=\"dt\">&quot;uuid&quot;</span> <span class=\"fu\">:</span> <span class=\"st\">&quot;5dd47b81-a184-4b9e-be02-b6e22c409c81&quot;</span></span>\n<span id=\"cb7-16\"><a href=\"#cb7-16\"></a><span class=\"fu\">}</span></span></code></pre></div>\n<p>我们可以通过wiremock-standalone来启动一个模拟的服务端。</p>\n<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb8-1\"><a href=\"#cb8-1\"></a><span class=\"ex\">java</span> -jar wiremock-standalone-2.7.1.jar</span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\"></a><span class=\"co\"># 启动后会自动创建一个mappings目录，把我们生成的mappings目录中的内容拷贝进去，再重新运行即可</span></span></code></pre></div>\n<p>这样访问<code>http://localhost:8080/vehicle/WDC1660631A7506890</code>就可以得到我们的契约里面写的模拟数据了。</p>\n<p>好了，如果有疑问请参考<a href=\"https://github.com/soleverlee/spring-contract-example.git\" target=\"_blank\" rel=\"noopener\">完整的代码</a>，建议参考末尾的参考文章，本文不过是跟着写了一下而已。</p>\n<p>总结一下吧，其实并没有感觉到Contract Test有多高端，不过很适用与微服务+敏捷开发这种场合。来说说我觉得不足的地方：</p>\n<ul>\n<li>契约测试依然是测试，无法替代设计，如果设计的接口是一坨*测试的再好又有什么呢；并不是反对测试，而是感觉但凡重视测试的同时容易轻视设计（或者说测试能力要比设计能力强太多...)</li>\n<li>如果是同三方系统对接，如何来操作呢？</li>\n<li>对于一些其他的客户端就勉为其难了，比如NodeJS的客户端，无法使用生成的stubs.jar文件，客户端怎么保证得到的东西是自己想要的结果?</li>\n</ul>\n<p>参考文章:</p>\n<ul>\n<li><a href=\"https://specto.io/blog/2016/11/16/spring-cloud-contract/\" target=\"_blank\" rel=\"noopener\">Consumer-Driven Contract Testing with Spring Cloud Contract</a></li>\n<li><a href=\"http://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html\" target=\"_blank\" rel=\"noopener\">Spring Cloud Contract Document</a></li>\n</ul>\n","categories":["Programing","Distributed"],"tags":["Spring Cloud - Contract Test - MicroService"]},{"title":"使用GOCD部署一个SpringBoot应用","url":"/it/devops/springboot_with_ci/","content":"<p>如何自动部署 springboot 的应用？ <a id=\"more\"></a> 首先我们要做的是把GOCD的启动用户<code>go</code>加入到<code>docker</code>组中，这样就可以免<code>sudo</code>来执行docker的命令了</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"fu\">sudo</span> gpasswd -a go docker</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a><span class=\"fu\">sudo</span> /etc/init.d/docker restart</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a><span class=\"ex\">newgrp</span> - docker</span></code></pre></div>\n<p>我们现在来通过GOCD部署一个eureka的服务端。eureka用作服务发现，包含server端和client端，每个微服务是一个client注册到server上。看看需要哪些包：</p>\n<pre class=\"grovvy\"><code>dependencies {\n    testCompile group: &#39;junit&#39;, name: &#39;junit&#39;, version: &#39;4.12&#39;\n    compile group: &#39;org.springframework.boot&#39;, name: &#39;spring-boot-starter-web&#39;, version: &#39;1.5.3.RELEASE&#39;\n    compile group: &#39;org.springframework.cloud&#39;, name: &#39;spring-cloud-starter-eureka-server&#39;, version: &#39;1.3.1.RELEASE&#39;\n}</code></pre>\n<p>然后我们的程序写一句话就可以了：</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"at\">@EnableEurekaServer</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a><span class=\"at\">@SpringBootApplication</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\"></a><span class=\"kw\">public</span> <span class=\"kw\">class</span> EurekaServerApplication {</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\"></a>    <span class=\"kw\">public</span> <span class=\"dt\">static</span> <span class=\"dt\">void</span> <span class=\"fu\">main</span>(<span class=\"bu\">String</span>[] args){</span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\"></a>        SpringApplication.<span class=\"fu\">run</span>(EurekaServerApplication.<span class=\"fu\">class</span>, args);</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\"></a>    }</span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\"></a>}</span></code></pre></div>\n<p>这样启动后就可以访问到eureka的web页面了，我们可以在application.properties中配置一些属性：</p>\n<pre class=\"properties\"><code>server.port=8761\neureka.client.register-with-eureka=false\neureka.client.fetch-registry=false</code></pre>\n<p>然后来想办法把应用打包到docker中。我们新建一个Dockerfile到src/main/docker中：</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode lua\"><code class=\"sourceCode lua\"><span id=\"cb5-1\"><a href=\"#cb5-1\"></a><span class=\"cn\">FROM</span> oracle<span class=\"op\">/</span>openjdk<span class=\"op\">:</span><span class=\"dv\">8</span></span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\"></a><span class=\"cn\">VOLUME</span> <span class=\"op\">/</span>tmp</span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\"></a><span class=\"cn\">ADD</span> eureka<span class=\"op\">-</span>server<span class=\"op\">-</span><span class=\"dv\">1.0</span><span class=\"op\">-</span><span class=\"cn\">SNAPSHOT</span><span class=\"op\">.</span>jar app<span class=\"op\">.</span>jar</span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\"></a><span class=\"cn\">RUN</span> sh <span class=\"op\">-</span>c <span class=\"st\">&#39;touch /app.jar&#39;</span></span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\"></a><span class=\"cn\">ENV</span> <span class=\"cn\">JAVA_OPTS</span><span class=\"op\">=</span><span class=\"st\">&quot;&quot;</span></span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\"></a><span class=\"cn\">ENTRYPOINT</span> <span class=\"op\">[</span> <span class=\"st\">&quot;sh&quot;</span><span class=\"op\">,</span> <span class=\"st\">&quot;-c&quot;</span><span class=\"op\">,</span> <span class=\"st\">&quot;java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar&quot;</span> <span class=\"op\">]</span></span></code></pre></div>\n<p>然后在build.gradle中添加一个构建任务：</p>\n<pre class=\"grovvy\"><code>buildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE&quot;)\n        classpath(&#39;se.transmode.gradle:gradle-docker:1.2&#39;)\n    }\n}\ntask buildDocker(type: Docker, dependsOn: build) {\n    push = false\n    applicationName = jar.baseName\n    dockerfile = file(&#39;src/main/docker/Dockerfile&#39;)\n    doFirst {\n        copy {\n            from jar\n            into stageDir\n        }\n    }\n}</code></pre>\n<p>这样当我们执行<code>gradle build buildDocker</code>命令的时候就会把springboot应用打包成docker镜像了。</p>\n","categories":["Programing","MicroService"],"tags":["Docker","CI","SpringBoot"]},{"title":"搭建Nexus私服","url":"/it/devops/deploy_nexus/","content":"<p>我们安装<a href=\"https://store.docker.com/community/images/sonatype/nexus3\" target=\"_blank\" rel=\"noopener\">Nexus</a>来作为我们的Docker镜像仓库。 <a id=\"more\"></a></p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"ex\">sodu</span> docker pull sonatype/nexus3</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a><span class=\"fu\">mkdir</span> /home/docker/nexus</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a><span class=\"fu\">chown</span> -R 200 /home/docker/nexus</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a><span class=\"fu\">sudo</span> docker run -d \\</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>    --name nexus \\</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>    -v /home/docker/nexus \\</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a>    -p 8081:8081 \\</span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\"></a>    sonatype/nexus3</span></code></pre></div>\n<p>安装完成后，可以访问192.168.56.101:8081，登录进去后，添加一个Docker Hosted源，比如http://192.168.56.101:8081/repository/cloud-images/</p>\n<p>我们可以把项目中需要用到的文件传到Nexus上。我们新建一个<code>raw</code>格式的repository</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"ex\">curl</span> --fail -u admin:admin123 --upload-file gradle-4.0-bin.zip <span class=\"st\">&#39;http://192.168.56.101:8081/repository/files/&#39;</span></span></code></pre></div>\n<p>这样就可以通过http://192.168.56.101:8081/repository/files/gradle-4.0-bin.zip 来访问我们这个文件了。</p>\n","categories":["Programing","MicroService"],"tags":["Docker","Nexus"]},{"title":"再谈Micro Services Architecture","url":"/it/arch/rethink_microservice/","content":"<p>再来谈一点我对微服务的理解。首先是微服务的一个服务划分问题。 <a id=\"more\"></a> <img src=\"https://cdn-1.wp.nginx.com/wp-content/uploads/2016/04/Richardson-microservices-part1-2_microservices-architecture.png\" alt=\"Micro Services\" /></p>\n<p>这张架构图我觉得比价典型了，在设计微服务架构的时候，个人认为应该有以下可以考虑的：</p>\n<ul>\n<li>每个服务应该按照业务功能去划分，相对要独立、小，但又不能过分细微否则微服务的数量和数据共享将变得复杂</li>\n<li>每个微服务有自己的数据存储，不同的微服务不应该共享数据库存储；当然如果是对某一个微服务进行多部署和负载均衡，那么这些微服务可能会共享一个数据库或者数据库集群</li>\n<li>微服务间应该只通过接口调用，不应该去直接读取其他接口的数据例如数据库</li>\n<li>通常情况下，微服务内部不需要进行权限认证；但必须通过API Gateway暴露给外部系统</li>\n<li>微服务接口应该添加版本号，这样如果接口定义有变动，可以在不影响系统的情况下实现逐步切换</li>\n</ul>\n<p>微服务对外必须走Api Gateway的理由是：</p>\n<ul>\n<li>可以通过Gateway实现介入的权限认证等</li>\n<li>可以实现负载均衡，或者内部服务的切换而对外部来说是感觉不到变化的</li>\n<li>对外提供一个统一的入口</li>\n</ul>\n<p>再来说说一个我认为不好的设计。首先我们来说说<code>前端</code>和<code>后端</code>，在我看来，对于B/S架构来说，前端单单就是在浏览器运行的这一部分东西，但通常人们也会把微服务中的Front End称之为前端，比如一个NodeJS实现的HTML5客户端，那这里NodeJS的东西也会被认为是前端了。虽然这两个定义究竟是对是错没什么价值所在，但我发现我们的<code>前端</code>开发人员有着一个不好的习惯：</p>\n<ul>\n<li>直接在前端的JS中调用微服务，通过一个api的代理直接访问了后端的一个服务（类似于Gateway的一个服务但是存在很多逻辑）</li>\n</ul>\n<p>什么意思呢，就是说，把逻辑都写在客户端执行的Javascript中，而不是传统意义上的<code>后端</code>。这样做的实际问题有（我发现的）：</p>\n<ul>\n<li>逻辑混乱，对于微服务来说不大可能会直接提供可用的接口，往往需要多次调用和自行处理，这样页面会请求很多接口，所有逻辑都在页面上，调试只能依赖于浏览器</li>\n<li>性能问题，如果加载大量的数据对浏览器来说是噩梦，处理起来会依赖于客户端的性能</li>\n<li>安全问题，相当于直接暴露了微服务的接口出来，这样本来可以在session中做的事情需要到cookie中做了</li>\n</ul>\n<p>这里其实会有争议，那么如果是有这样的业务逻辑，应该写在哪里？假设现有的微服务都是很基础的微服务。</p>\n<ul>\n<li>肯定不应该直接写在页面上</li>\n<li>写在页面对应的后端上？</li>\n<li>新建一个含有逻辑的微服务，在页面上调用这个微服务？</li>\n</ul>\n<p>我觉得后两种都是可以考虑的，或者说可以同时存在的。首先从部署来讲，后端和微服务应该是部署在同一个网络内，从后端直接访问微服务时是不需要进行权限验证的；因此业务逻辑应该写在后端中，这样页面访问的接口只会得到一个结果而你不能看到具体的过程，这样在一定程度上是更安全和有效的。其次，如果业务逻辑比较复杂，或者说有需要在其他地方也使用，而现有的微服务没有直接的接口时，需要考虑新建一个处理业务的微服务来处理这些逻辑。即使是这样，仍然最好在服务器端来调用这些微服务。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.nginx.com/blog/introduction-to-microservices/\" target=\"_blank\" rel=\"noopener\">Introduction to Microservices</a></li>\n<li><a href=\"https://www.nginx.com/blog/building-microservices-using-an-api-gateway/\" target=\"_blank\" rel=\"noopener\">Building Microservices: Using an API Gateway</a></li>\n<li><a href=\"https://www.nginx.com/blog/building-microservices-inter-process-communication/\" target=\"_blank\" rel=\"noopener\">Building Microservices: Inter-Process Communication in a Microservices Architecture</a></li>\n<li><a href=\"https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/\" target=\"_blank\" rel=\"noopener\">Service Discovery in a Microservices Architecture</a></li>\n<li><a href=\"https://www.nginx.com/blog/event-driven-data-management-microservices/\" target=\"_blank\" rel=\"noopener\">Event-Driven Data Management for Microservices</a></li>\n<li><a href=\"https://www.nginx.com/blog/deploying-microservices/\" target=\"_blank\" rel=\"noopener\">Choosing a Microservices Deployment Strategy</a></li>\n<li><a href=\"https://www.nginx.com/blog/refactoring-a-monolith-into-microservices/\" target=\"_blank\" rel=\"noopener\">Refactoring a Monolith into Microservices</a></li>\n<li><a href=\"http://microservices.io/patterns/data/database-per-service.html\" target=\"_blank\" rel=\"noopener\">Pattern: Database per service</a></li>\n<li><a href=\"https://martinfowler.com/bliki/PolyglotPersistence.html\" target=\"_blank\" rel=\"noopener\">PolyglotPersistence</a></li>\n<li><a href=\"https://www.infoq.com/articles/microservices-aggregates-events-cqrs-part-1-richardson\" target=\"_blank\" rel=\"noopener\">Developing Transactional Microservices Using Aggregates, Event Sourcing and CQRS - Part 1</a></li>\n<li><a href=\"http://chrisrichardson.net/learnmicroservices.html\" target=\"_blank\" rel=\"noopener\">Learn microservices</a></li>\n</ul>\n","categories":["Programing","Distributed"],"tags":["Docker","Api Gateway","BFF","MicroService"]},{"title":"关于Event Sourcing架构","url":"/it/arch/about_event_sourcing/","content":"<p>在微服务实践中，也许一致性是最头疼的问题了，因为跨数据库的事物将变得十分困难。我们让每一个微服务的数据存储都私有化来实现服务之间的解耦，无可避免存在很多业务需要操作多个微服务的数据库，可能不仅仅是跨服务的不同表，还可能是不同的数据库类型。如果我们采用一个数据库可能事情就会简单了，但这就脱离了微服务的真正价值了。 <a id=\"more\"></a></p>\n<p>现阶段解决分布式事物大致有这些方案：</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Two-phase_commit_protocol\" target=\"_blank\" rel=\"noopener\">2PC</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Three-phase_commit_protocol\" target=\"_blank\" rel=\"noopener\">3PC</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Paxos_(computer_science)\" target=\"_blank\" rel=\"noopener\">Paxos</a>和<a href=\"https://raft.github.io/\" target=\"_blank\" rel=\"noopener\">Raft</a></li>\n<li><a href=\"http://cdn.ttgtmedia.com/searchWebServices/downloads/Business_Activities.pdf\" target=\"_blank\" rel=\"noopener\">TCC</a></li>\n</ul>\n<p>姑且不论实现的复杂性，以上方案大多数可以实现<a href=\"https://en.wikipedia.org/wiki/Eventual_consistency\" target=\"_blank\" rel=\"noopener\">最终一致性</a>。为什么说大多呢？因为太复杂了，我还没研究清楚...</p>\n<p>而Event Sourcing目测是一个更简单的实现最终一致性的方案，采用Event Sourcing + CQRS来实现读写分离，具体是什么关系呢?这里引用一点： &gt;在CQRS中，查询方面，直接通过方法查询数据库，然后通过DTO将数据返回。在操作(Command)方面，是通过发送Command实现，由CommandBus处理特定的Command，然后由Command将特定的Event发布到EventBus上，然后EventBus使用特定的Handler来处理事件，执行一些诸如，修改，删除，更新等操作。这里，所有与Command相关的操作都通过Event实现。这样我们可以通过记录Event来记录系统的运行历史记录，并且能够方便的回滚到某一历史状态。Event Sourcing就是用来进行存储和管理事件的。</p>\n<p>再来看一张图:</p>\n<figure>\n<img src=\"https://www.codeproject.com/KB/architecture/555855/CQRS.jpg\" alt=\"\" /><figcaption>CQRS</figcaption>\n</figure>\n<p>参考文章:</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=2659597948&amp;idx=1&amp;sn=754df1597fd042537be8c25d073d3c98&amp;scene=0#rd\" target=\"_blank\" rel=\"noopener\">基于Event Sourcing和DSL的积分规则引擎设计实现案例</a></li>\n<li><a href=\"https://www.nginx.com/blog/event-driven-data-management-microservices/\" target=\"_blank\" rel=\"noopener\">Event-Driven Data Management for Microservices</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/CAP_theorem\" target=\"_blank\" rel=\"noopener\">CAP</a></li>\n<li><a href=\"https://martinfowler.com/eaaDev/EventNarrative.html\" target=\"_blank\" rel=\"noopener\">Focusing on Events</a></li>\n<li><a href=\"https://www.martinfowler.com/eaaDev/RetroactiveEvent.html\" target=\"_blank\" rel=\"noopener\">Retroactive Event</a></li>\n<li><a href=\"https://www.martinfowler.com/eaaDev/DomainEvent.html\" target=\"_blank\" rel=\"noopener\">Domain Event</a></li>\n<li><a href=\"https://github.com/cer/event-sourcing-examples\" target=\"_blank\" rel=\"noopener\">Event-Sourcing+CQRS example application</a></li>\n<li><a href=\"http://kb.cnblogs.com/page/161050/\" target=\"_blank\" rel=\"noopener\">领域驱动设计(Domain Driven Design)参考架构详解</a></li>\n<li><a href=\"http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/\" target=\"_blank\" rel=\"noopener\">CQRS, Task Based UIs, Event Sourcing agh!</a></li>\n<li><a href=\"www.codeproject.com/Articles/555855/Introduction-to-CQRS\">Introduction to CQRS</a></li>\n<li><a href=\"https://ookami86.github.io/event-sourcing-in-practice/\" target=\"_blank\" rel=\"noopener\">Event Sourcing in practice</a></li>\n<li><a href=\"http://thinkbeforecoding.com/post/2013/07/28/Event-Sourcing-vs-Command-Sourcing\" target=\"_blank\" rel=\"noopener\">Event Sourcing vs Command Sourcing</a></li>\n</ul>\n","categories":["Programing","Distributed"],"tags":["Event Sourcing","CQRS"]},{"title":"搭建GOCD Server","url":"/it/devops/deploy_gocd/","content":"<p>来部署一个<a href=\"https://hub.docker.com/r/gocd/gocd-server/\" target=\"_blank\" rel=\"noopener\">GOCD</a>的容器。 <a id=\"more\"></a></p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"fu\">sudo</span> docker pull gocd/gocd-server:v17.5.0</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a><span class=\"ex\">docker</span> run -d \\</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>    --name gocd \\</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>    -p 8153:8153 \\</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>    -p 8154:8154 \\</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>    -v /home/docker/go/data:/godata \\</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a>    -v /home/docker/go/home:/home/go \\</span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\"></a>    gocd/gocd-server:v17.5.0</span></code></pre></div>\n<p>启动起来后，访问8153端口，这时可以看到添加pipeline的界面了。</p>\n<p>安装<a href=\"https://github.com/gocd-contrib/script-executor-task/releases\" target=\"_blank\" rel=\"noopener\">Script Executor</a>插件：</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"bu\">cd</span> /home/docker/go/data/plugins/external</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a><span class=\"fu\">wget</span> https://github.com/gocd-contrib/script-executor-task/releases/download/0.3/script-executor-0.3.0.jar</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a><span class=\"fu\">chown</span> 1000 script-executor-0.3.0.jar</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a><span class=\"fu\">sudo</span> docker restart gocd</span></code></pre></div>\n<p>安装go-agent到Ubuntu宿主机上，参考<a href=\"https://docs.gocd.org/current/installation/install/agent/linux.html\" target=\"_blank\" rel=\"noopener\">GOCD文档</a></p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"bu\">echo</span> <span class=\"st\">&quot;deb https://download.gocd.io /&quot;</span> <span class=\"kw\">|</span> <span class=\"fu\">sudo</span> tee /etc/apt/sources.list.d/gocd.list</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a><span class=\"ex\">curl</span> https://download.gocd.io/GOCD-GPG-KEY.asc <span class=\"kw\">|</span> <span class=\"fu\">sudo</span> apt-key add -</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\"></a><span class=\"fu\">sudo</span> apt-get update</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\"></a><span class=\"fu\">sudo</span> apt-get install go-agent</span></code></pre></div>\n<p>注意，go-agent只能运行在jdk8上，如果装了jdk9是运行不起来的</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a><span class=\"ex\">dpkg</span> -l <span class=\"kw\">|</span> <span class=\"fu\">grep</span> jdk</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\"></a><span class=\"fu\">sudo</span> apt-get autoremove openjdk-9-jre-headless</span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\"></a><span class=\"fu\">sudo</span> apt-get install openjdk-8-jre-headless</span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\"></a><span class=\"fu\">sudo</span> apt-get install go-agent</span></code></pre></div>\n<p>记得修改环境变量/etc/profile：</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb5-1\"><a href=\"#cb5-1\"></a><span class=\"bu\">export</span> <span class=\"va\">JAVA_HOME=</span>/usr/lib/jvm/java-8-openjdk-amd64</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\"></a><span class=\"bu\">export</span> <span class=\"va\">CLASSPATH=</span>.:<span class=\"va\">$JAVA_HOME</span>/lib:<span class=\"va\">$JAVA_HOME</span>/jre/lib:<span class=\"va\">$CLASSPATH</span></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\"></a><span class=\"bu\">export</span> <span class=\"va\">PATH=$JAVA_HOME</span>/bin:<span class=\"va\">$JAVA_HOME</span>/jre/bin:<span class=\"va\">$PATH</span></span></code></pre></div>\n<p>配置gocd的工作目录：</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb6-1\"><a href=\"#cb6-1\"></a><span class=\"fu\">mkdir</span> /home/gocd</span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\"></a><span class=\"fu\">chown</span> -R go.go /home/gocd</span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\"></a><span class=\"fu\">chown</span> go.go /usr/share/go-agent/*.jar</span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\"></a></span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\"></a><span class=\"ex\">vim</span> /etc/default/go-agent</span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\"></a></span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\"></a><span class=\"va\">GO_SERVER_URL=</span>https://192.168.56.101:8154/go</span>\n<span id=\"cb6-8\"><a href=\"#cb6-8\"></a><span class=\"va\">AGENT_WORK_DIR=</span>/home/gocd/<span class=\"va\">${SERVICE_NAME:-</span>go-agent<span class=\"va\">}</span></span>\n<span id=\"cb6-9\"><a href=\"#cb6-9\"></a><span class=\"va\">DAEMON=</span>Y</span>\n<span id=\"cb6-10\"><a href=\"#cb6-10\"></a><span class=\"va\">VNC=</span></span></code></pre></div>\n<p>下面我们就来建一个pipe line试试吧。</p>\n<ul>\n<li>在Agents中启用我们的go-agent，并在Resource中添加一个LINUX的标签</li>\n<li>新建一个Environment，把我们的这个agent加入进去</li>\n<li>新建一个Pipeline，名称为hello，group为dev</li>\n<li>选择Material的地方选择Git，填写http://root:****<span class=\"citation\" data-cites=\"192.168.56.101/springcloud/helloworld.git\">@192.168.56.101/springcloud/helloworld.git</span>，其中root:****为GIT的账号密码，如果是public的库则无需这样设置，可以check connection查看是否可以访问</li>\n<li>新建一个Stage，名称为build，然后Initial Job中设置为Script Executor，可以随便执行个bash命令，例如<code>echo \"Hello World!\"</code> 这样运行就可以看到pipeline绿了~~~</li>\n</ul>\n","categories":["Programing","MicroService"],"tags":["GOCD","CICD"]},{"title":"搭建Gitlab私服","url":"/it/devops/deploy_gitlab/","content":"<p>我们利用Gitlab搭建一个内网的git私服，可以为团队提供git服务。首先是需要pull下来Gitlab的镜像了。 <a id=\"more\"></a></p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"ex\">sodu</span> docker pull gitlab/gitlab-ce</span></code></pre></div>\n<p>这个镜像大概有300多M，如果下载太慢，请参照上一篇文章说的加速的配置。下载完成后，就需要来跑起来了，参照<a href=\"https://docs.gitlab.com/omnibus/docker/\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"fu\">sudo</span> docker run --detach \\</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a>    --hostname 192.168.56.101</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a>    <span class=\"ex\">--publish</span> 1443:443 --publish 1080:80 --publish 1022:22 \\</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a>    --name gitlab \\</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a>    --restart always \\</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a>    --volume /home/docker/gitlab/etc:/etc/gitlab \\</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a>    --volume /home/docker/gitlab/logs:/var/log/gitlab \\</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\"></a>    --volume /home/docker/gitlab/data:/var/opt/gitlab \\</span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\"></a>    gitlab/gitlab-ce:latest</span></code></pre></div>\n<p>注意到这里我们填的IP地址是192.168.56.101，这是宿主机的地址（宿主机现在我改成NAT和Host两个网卡了，因为桥接网卡在酒店IP不稳定....)，另外把端口映射出来了。这样在我的Mac上也可以通过192.168.56.101:1080来访问。</p>\n<p>启动gitlab后就可以通过 http://192.168.56.101:1080 来访问了，默认的用户名是root，第一次进入会设置root密码。</p>\n<p><em>备注</em> 经过一番折腾，如果不使用默认端口（80，443）等配置的时候有些问题没有解决，于是为了简单起见，最终使用80端口。 ---</p>\n<p><em>以下是可选操作，如果生成独立IP在Mac上访问虚拟机内的Docker也会存在麻烦，仅供参考</em></p>\n<p>我们把几个数据目录挂在到Ubuntu上，这样即便删除Docker后，数据也还存在。现在有一个很重要的问题了，按照上面的方式是把容器的80、22、443端口映射到了宿主机的端口上，如果能给容器一个独立的IP岂不是更好？根据网上的资料来看，目前有几种办法：</p>\n<ul>\n<li>Pipework</li>\n<li>Weave</li>\n<li>Flannel</li>\n</ul>\n<p>就选<a href=\"https://github.com/jpetazzo/pipework\" target=\"_blank\" rel=\"noopener\">Pipework</a>吧，感觉会比较简单。</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"fu\">git</span> clone https://github.com/jpetazzo/pipework.git</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a><span class=\"fu\">sudo</span> cp pipework/pipework /usr/local/bin/</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\"></a><span class=\"fu\">sudo</span> chmod +x /usr/local/bin/pipework</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\"></a><span class=\"fu\">sudo</span> apt install bridge-utils</span></code></pre></div>\n<p>配置宿主机为静态IP：</p>\n<pre><code># /etc/network/interfaces\nauto enp0s3\niface enp0s3 inet static\n        address 192.168.11.242\n        netmask 255.255.248.0\n        gateway 192.168.11.1\n\ndns-nameservers 114.114.114.114</code></pre>\n<p>Ubuntu16.04貌似有BUG，通过重启networking服务不能改变IP地址，非要重启一下。 我们来看一下网络桥接的情况：</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb5-1\"><a href=\"#cb5-1\"></a><span class=\"ex\">riguz@docker-host</span>:~$ brctl show</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\"></a><span class=\"ex\">bridge</span> name bridge id       STP enabled interfaces</span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\"></a><span class=\"ex\">docker0</span>     8000.02425039a299   no</span></code></pre></div>\n<p>这个docker0就是docker自动生成的桥接网卡.我们来创建一个桥接网卡：</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb6-1\"><a href=\"#cb6-1\"></a><span class=\"fu\">sudo</span> brctl addbr br0</span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\"></a><span class=\"fu\">sudo</span> ip link set dev br0 up </span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\"></a><span class=\"fu\">sudo</span> ip addr add 192.168.10.1/24 dev br0</span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\"></a><span class=\"fu\">sudo</span> pipework br0 gitlab 192.168.10.100/24@192.168.10.1</span></code></pre></div>\n","categories":["Programing","MicroService"],"tags":["Docker","Gitlab"]},{"title":"在虚拟机中使用Docker","url":"/it/devops/docker_in_virtualbox/","content":"<p>几年前在公司复杂维护机房的时候，就开始关注Docker这种基于容器的虚拟化技术了，当时并没有选择Docker，因为几年前docker刚起步还不是很成熟，不敢采用这样的技术（当然关键是自己不了解也能力不够）。当时采取的是KVM和Virtual Box，问题也很明显，因为一台物理机（Dell T320 32GRAM)开个四五台Virtual Box虚拟机就有点吃不消了，想做到专机专用，也是很困难的事情。当时的主要目的是想把Oracle、WebSphere等吃内存的东西隔离出来。 <a id=\"more\"></a> 现在有机会接触到Docker了，有必要认真的学习下了。貌似在Mac上Docker实际上是运行在虚拟的Linux中的，因此决定使用虚拟机来运行Docker，以下是我的配置：</p>\n<ul>\n<li>Mac Book Pro, OSX</li>\n<li>Virtual Box, Ubuntu-server 16.04.2 X64 LTS, 4G Ram, 30G HDD，网卡桥接</li>\n</ul>\n<p>好了，首先是安装Docker，参考<a href=\"https://docs.docker.com/engine/installation/linux/ubuntu/#install-docker\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"fu\">sudo</span> apt-get install \\</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a>    apt-transport-https \\</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>    ca-certificates \\</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>    curl \\</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>    software-properties-common</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a><span class=\"ex\">curl</span> -fsSL https://download.docker.com/linux/ubuntu/gpg <span class=\"kw\">|</span> <span class=\"fu\">sudo</span> apt-key add -</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a><span class=\"fu\">sudo</span> add-apt-repository \\</span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\"></a>   <span class=\"st\">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\"></a><span class=\"st\">   </span><span class=\"va\">$(</span><span class=\"ex\">lsb_release</span> -cs<span class=\"va\">)</span><span class=\"st\"> \\</span></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\"></a><span class=\"st\">   stable&quot;</span></span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\"></a><span class=\"fu\">sudo</span> apt-get update</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\"></a><span class=\"fu\">sudo</span> apt-get install docker-ce</span></code></pre></div>\n<p>好了，这样就安装成功了。来下载一些<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">docker镜像</a>吧，我们在后面可能慢慢会用到（先这样设想吧）：</p>\n<ul>\n<li>oracle/openjdk:8 选用Oracle的JDK8镜像来部署SpringBoot应用</li>\n<li>gitlab/gitlab-ce 用来搭建私有的GIT仓库</li>\n<li>sonatype/nexus3 用来搭建私有的Docker镜像库</li>\n<li>gocd/gocd-server 用来搭建gocd作CICD</li>\n<li>node 用来运行NodeJS的前端</li>\n<li>percona 用来提供MySQL服务</li>\n<li>mongo 用来提供MongoDB服务</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"ex\">docker</span> pull oracle/openjdk</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a><span class=\"ex\">docker</span> pull gitlab/gitlab-ce</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a><span class=\"ex\">docker</span> pull sonatype/nexus3</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a><span class=\"ex\">docker</span> pull gocd/gocd-server</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a><span class=\"ex\">docker</span> pull node</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a><span class=\"ex\">docker</span> pull percona</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a><span class=\"ex\">docker</span> pull mongo</span></code></pre></div>\n<p>你会发现太慢了，是不是?幸好可以有加速的方式，可以试用<a href=\"https://www.daocloud.io/mirror#accelerator-doc\" target=\"_blank\" rel=\"noopener\">DaoCloud</a>的加速器。</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a><span class=\"fu\">sudo</span> vim /etc/docker/daemon.json</span></code></pre></div>\n<p>输入以下内容:</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode json\"><code class=\"sourceCode json\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a><span class=\"fu\">{</span></span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\"></a>    <span class=\"dt\">&quot;registry-mirrors&quot;</span><span class=\"fu\">:</span> <span class=\"ot\">[</span></span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\"></a>        <span class=\"st\">&quot;http://1729****.m.daocloud.io&quot;</span></span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\"></a>    <span class=\"ot\">]</span><span class=\"fu\">,</span></span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\"></a>    <span class=\"dt\">&quot;insecure-registries&quot;</span><span class=\"fu\">:</span> <span class=\"ot\">[]</span></span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\"></a><span class=\"fu\">}</span></span></code></pre></div>\n<p>重启Docker：</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb5-1\"><a href=\"#cb5-1\"></a><span class=\"fu\">sudo</span> /etc/init.d/docker restart</span></code></pre></div>\n","categories":["Programing","MicroService"],"tags":["Docker"]},{"title":"抓取QQ空间皮肤图片","url":"/it/misc/crawling_qzone_images/","content":"<p>最近把博客重新整理了一下，博文设置featured image果然看起来现代不少，但是要去哪找这么多合适的图片呢？当然PS是一个不错的选择，但是费时费力。看到QQ空间的皮肤倒是做的不错，直接拿来用吧，反正不违法。于是想用爬虫抓取。 <a id=\"more\"></a> 先调试一下，找几个图片看看：</p>\n<pre><code>http://i.gtimg.cn/qzone/space_item/orig/3/103603_top.jpg\nhttp://i.gtimg.cn/qzone/space_item/orig/7/101703_top.jpg\nhttp://i.gtimg.cn/qzone/space_item/orig/5/108725_top.jpg\nhttp://i.gtimg.cn/qzone/space_item/orig/15/111327_top.jpg\nhttp://i.gtimg.cn/qzone/space_item/orig/8/106904_top.jpg\nhttp://i.gtimg.cn/qzone/space_item/orig/10/102490_top.jpg</code></pre>\n<p>可以看到前面的网址都是一样的<code>orig/%d/%d_top.jpg</code>，刚开始以为前面的一个数字是主题编号还是什么的，后面自然是图片ID，于是用以下的脚本抓取（Scrapy):</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"kw\">def</span> start_requests(<span class=\"va\">self</span>):</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a>    <span class=\"cf\">for</span> i <span class=\"kw\">in</span> <span class=\"bu\">range</span>(<span class=\"dv\">0</span>, <span class=\"dv\">100</span>):</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a>        <span class=\"cf\">for</span> j <span class=\"kw\">in</span> <span class=\"bu\">range</span>(<span class=\"dv\">100000</span>, <span class=\"dv\">119999</span>):</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a>            url <span class=\"op\">=</span> <span class=\"st\">&#39;http://i.gtimg.cn/qzone/space_item/orig/</span><span class=\"sc\">%d</span><span class=\"st\">/</span><span class=\"sc\">%d</span><span class=\"st\">_top.jpg&#39;</span> <span class=\"op\">%</span> (i, j)        </span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a>            <span class=\"cf\">yield</span> scrapy.Request(url<span class=\"op\">=</span>url, callback<span class=\"op\">=</span><span class=\"va\">self</span>.parse)</span></code></pre></div>\n<p>后来抓取完成后，一共15个文件夹，每个文件夹差不多都是50-80个左右，这就有点意思了，可能腾讯利用了分布式的图片服务器，分散到0-15个不同的服务器上。随便找一个看看： 101195_top.jpg在11下面，通常取余的方式实现，于是来试试：</p>\n<pre><code>101195% 16 = 11</code></pre>\n<p>另外再验证几次也都是正确的，证明的我们的猜想。于是我们可以修改一下我们的爬虫了：</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a><span class=\"cf\">for</span> i <span class=\"kw\">in</span> <span class=\"bu\">range</span>(<span class=\"dv\">100000</span>, <span class=\"dv\">200000</span>):</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\"></a>    url <span class=\"op\">=</span> <span class=\"st\">&#39;http://i.gtimg.cn/qzone/space_item/orig/</span><span class=\"sc\">%d</span><span class=\"st\">/</span><span class=\"sc\">%d</span><span class=\"st\">_top.jpg&#39;</span> <span class=\"op\">%</span> (i <span class=\"op\">%</span> <span class=\"dv\">16</span>, i) </span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\"></a>    <span class=\"cf\">yield</span> scrapy.Request(url<span class=\"op\">=</span>url, callback<span class=\"op\">=</span><span class=\"va\">self</span>.parse)</span></code></pre></div>\n<p>这样抓取就快多了，总共抓取了1232个图片。</p>\n","categories":["Programing","Scrapy"],"tags":["Python","Scrapy"]},{"title":"破解Db Schema序列号","url":"/it/security/crack_db_schema/","content":"<p>我始终认为数据库设计在系统设计中是一个很重要的工作，然而一直没有比较好的ER建模工具。使用过MySQL Workbench和Power Designer两种工具，但都存在很多不喜欢的地方，直到遇到DbSchema后眼前一亮，这才是一个Nice的工具嘛。 很可惜对于我们这种屌丝来说，是不舍得花钱去购买一个license的，试用期15天到了怎么办呢？当时也没发现有可用的破解版，因为它是基于Java的，这对破解来说减小了难度，于是趁着辞职后在家没事的空档来研究了一下破解。其实也就上午花了一会时间就搞定了。记录下破解的过程。 <a id=\"more\"></a> 首先是找到dbschema.jar，这是程序的主要jar包，其他是一些第三方的jar包和jdbc驱动等，于是它就是破解的关键。利用jd-gui反编译这个jar包，首先把源码都保存下来。</p>\n顺藤摸瓜，首先打开dbschema的注册窗口，根据里面的关键字搜索，比如Registration，然后一个个去找，这时，发现一个对话框：\n<pre>\n<code class=\"java\">\npublic class RegistrationDialog\n...\nJButton localJButton1 = new JButton(getAction(\"register\"));\n<code>\n</pre>\n<p>这不就是注册的按钮么？然后就看它的action:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"co\">/*     */</span>   <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">register</span>() {</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a><span class=\"co\">/*  96 */</span>     <span class=\"bu\">String</span> str1 = <span class=\"kw\">this</span>.<span class=\"fu\">b</span>.<span class=\"fu\">getText</span>();</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a><span class=\"co\">/*     */</span>     </span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a><span class=\"co\">/*  98 */</span>     <span class=\"kw\">if</span> ((str1 == <span class=\"kw\">null</span>) || (str1.<span class=\"fu\">length</span>() == <span class=\"dv\">0</span>)) {</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a><span class=\"co\">/*  99 */</span>       <span class=\"bu\">JOptionPane</span>.<span class=\"fu\">showMessageDialog</span>(<span class=\"kw\">this</span>, d.<span class=\"fu\">a</span>(<span class=\"dv\">11</span>), <span class=\"st\">&quot;Error&quot;</span>, <span class=\"dv\">0</span>);</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a><span class=\"co\">/* 100 */</span>       <span class=\"kw\">return</span>;</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a><span class=\"co\">/*     */</span>     }</span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\"></a><span class=\"co\">/* 102 */</span>     <span class=\"bu\">String</span> str2 = <span class=\"kw\">this</span>.<span class=\"fu\">c</span>.<span class=\"fu\">getText</span>();</span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\"></a><span class=\"co\">/* 103 */</span>     <span class=\"kw\">if</span> (str2 == <span class=\"kw\">null</span>) {</span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\"></a><span class=\"co\">/* 104 */</span>       <span class=\"bu\">JOptionPane</span>.<span class=\"fu\">showMessageDialog</span>(<span class=\"kw\">this</span>, d.<span class=\"fu\">a</span>(<span class=\"dv\">19</span>), <span class=\"st\">&quot;Error&quot;</span>, <span class=\"dv\">0</span>);</span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\"></a><span class=\"co\">/* 105 */</span>       <span class=\"kw\">return</span>;</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\"></a><span class=\"co\">/*     */</span>     }</span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\"></a><span class=\"co\">/* 107 */</span>     str1 = str1.<span class=\"fu\">trim</span>();</span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\"></a><span class=\"co\">/* 108 */</span>     str2 = str2.<span class=\"fu\">trim</span>();</span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\"></a><span class=\"co\">/* 109 */</span>     e.<span class=\"fu\">b</span>(d.<span class=\"fu\">a</span>(<span class=\"dv\">31</span>), str1);</span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\"></a><span class=\"co\">/* 110 */</span>     e.<span class=\"fu\">b</span>(d.<span class=\"fu\">a</span>(<span class=\"dv\">21</span>), str2);</span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\"></a><span class=\"co\">/*     */</span>     </span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\"></a><span class=\"co\">/* 112 */</span>     <span class=\"dt\">int</span> i = g.<span class=\"fu\">b</span>();</span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\"></a><span class=\"co\">/* 113 */</span>     <span class=\"kw\">if</span> (i == <span class=\"bu\">Integer</span>.<span class=\"fu\">MAX_VALUE</span>) {</span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\"></a><span class=\"co\">/* 114 */</span>       <span class=\"fu\">dispose</span>();</span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\"></a><span class=\"co\">/* 115 */</span>       <span class=\"bu\">JOptionPane</span>.<span class=\"fu\">showMessageDialog</span>(<span class=\"kw\">this</span>.<span class=\"fu\">a</span>.<span class=\"fu\">c</span>(), d.<span class=\"fu\">a</span>(<span class=\"dv\">23</span>), <span class=\"st\">&quot;Info&quot;</span>, <span class=\"dv\">1</span>, <span class=\"kw\">null</span>);</span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\"></a><span class=\"co\">/* 116 */</span>       <span class=\"kw\">this</span>.<span class=\"fu\">a</span>.<span class=\"fu\">c</span>().<span class=\"fu\">c</span>();</span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\"></a><span class=\"co\">/* 117 */</span>     } <span class=\"kw\">else</span> <span class=\"kw\">if</span> ((i &gt; <span class=\"dv\">0</span>) &amp;&amp; (str1.<span class=\"fu\">toLowerCase</span>().<span class=\"fu\">startsWith</span>(<span class=\"st\">&quot;extend&quot;</span>))) {</span>\n<span id=\"cb1-24\"><a href=\"#cb1-24\"></a><span class=\"co\">/* 118 */</span>       <span class=\"fu\">dispose</span>();</span>\n<span id=\"cb1-25\"><a href=\"#cb1-25\"></a><span class=\"co\">/* 119 */</span>       <span class=\"bu\">JOptionPane</span>.<span class=\"fu\">showMessageDialog</span>(<span class=\"kw\">this</span>.<span class=\"fu\">a</span>.<span class=\"fu\">c</span>(), d.<span class=\"fu\">a</span>(<span class=\"dv\">24</span>).<span class=\"fu\">replaceAll</span>(<span class=\"st\">&quot;</span><span class=\"sc\">\\\\</span><span class=\"st\">{days</span><span class=\"sc\">\\\\</span><span class=\"st\">}&quot;</span>, <span class=\"st\">&quot;&quot;</span> + i), <span class=\"st\">&quot;Info&quot;</span>, <span class=\"dv\">1</span>, <span class=\"kw\">null</span>);</span>\n<span id=\"cb1-26\"><a href=\"#cb1-26\"></a><span class=\"co\">/* 120 */</span>     } <span class=\"kw\">else</span> <span class=\"kw\">if</span> (i == -<span class=\"dv\">2</span>) {</span>\n<span id=\"cb1-27\"><a href=\"#cb1-27\"></a><span class=\"co\">/* 121 */</span>       <span class=\"bu\">String</span> str3 = d.<span class=\"fu\">a</span>(<span class=\"dv\">77</span>).<span class=\"fu\">replace</span>(<span class=\"st\">&quot;{0}&quot;</span>, <span class=\"kw\">new</span> <span class=\"bu\">SimpleDateFormat</span>(<span class=\"st\">&quot;dd.MMMMM.yyyy&quot;</span>)<span class=\"fu\">.format</span>(<span class=\"kw\">new</span> <span class=\"bu\">Date</span>(g.<span class=\"fu\">c</span>())));</span>\n<span id=\"cb1-28\"><a href=\"#cb1-28\"></a><span class=\"co\">/* 122 */</span>       <span class=\"bu\">JOptionPane</span>.<span class=\"fu\">showMessageDialog</span>(<span class=\"kw\">this</span>.<span class=\"fu\">a</span>.<span class=\"fu\">c</span>(), str3, <span class=\"st\">&quot;Error&quot;</span>, <span class=\"dv\">0</span>);</span>\n<span id=\"cb1-29\"><a href=\"#cb1-29\"></a><span class=\"co\">/*     */</span>     } <span class=\"kw\">else</span> {</span>\n<span id=\"cb1-30\"><a href=\"#cb1-30\"></a><span class=\"co\">/* 124 */</span>       <span class=\"bu\">JOptionPane</span>.<span class=\"fu\">showMessageDialog</span>(<span class=\"kw\">this</span>.<span class=\"fu\">a</span>.<span class=\"fu\">c</span>(), d.<span class=\"fu\">a</span>(<span class=\"dv\">8</span>), <span class=\"st\">&quot;Error&quot;</span>, <span class=\"dv\">0</span>);</span>\n<span id=\"cb1-31\"><a href=\"#cb1-31\"></a><span class=\"co\">/*     */</span>     }</span>\n<span id=\"cb1-32\"><a href=\"#cb1-32\"></a><span class=\"co\">/*     */</span>   }</span></code></pre></div>\n<p>112行开始有点意思，其实大概能猜到是干什么，反正是算剩余天数的，那么这个int i = g.b();就是最核心的东西了：</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"kw\">public</span> <span class=\"dt\">static</span> <span class=\"dt\">int</span> <span class=\"fu\">b</span>()</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a>  {</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a>    <span class=\"bu\">String</span> str1 = e.<span class=\"fu\">d</span>(d.<span class=\"fu\">a</span>(<span class=\"dv\">31</span>), <span class=\"kw\">null</span>);</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a>    <span class=\"bu\">String</span> str2 = e.<span class=\"fu\">d</span>(d.<span class=\"fu\">a</span>(<span class=\"dv\">21</span>), <span class=\"kw\">null</span>);</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a>    <span class=\"dt\">int</span> m = -<span class=\"dv\">1</span>;</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a>    <span class=\"kw\">if</span> ((str1 != <span class=\"kw\">null</span>) &amp;&amp; (str2 != <span class=\"kw\">null</span>) &amp;&amp; (str2.<span class=\"fu\">length</span>() &gt; <span class=\"dv\">3</span>))</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a>    {</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\"></a>      <span class=\"kw\">if</span> ((str1.<span class=\"fu\">toLowerCase</span>().<span class=\"fu\">startsWith</span>(<span class=\"st\">&quot;extend&quot;</span>)) &amp;&amp; (<span class=\"fu\">c</span>(str1, str2)))</span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\"></a>      {</span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\"></a>        m = <span class=\"bu\">Math</span>.<span class=\"fu\">max</span>(<span class=\"dv\">15</span> - <span class=\"fu\">f</span>(<span class=\"st\">&quot;mmax&quot;</span>), -<span class=\"dv\">1</span>);</span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\"></a>      }</span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\"></a>      <span class=\"kw\">else</span> <span class=\"kw\">if</span> (str2.<span class=\"fu\">length</span>() &gt; <span class=\"dv\">15</span>)</span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\"></a>      {</span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\"></a>        <span class=\"bu\">String</span> str3 = str2.<span class=\"fu\">substring</span>(<span class=\"dv\">4</span>, <span class=\"dv\">9</span>);</span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\"></a>        <span class=\"bu\">String</span> str4 = str2.<span class=\"fu\">substring</span>(<span class=\"dv\">0</span>, <span class=\"dv\">4</span>) + str2.<span class=\"fu\">substring</span>(<span class=\"dv\">9</span>);</span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\"></a>        <span class=\"kw\">if</span> (<span class=\"fu\">c</span>(<span class=\"st\">&quot;ax5&quot;</span> + str1 + <span class=\"st\">&quot;b52w&quot;</span> + str3 + <span class=\"st\">&quot;vb3&quot;</span>, str4))</span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\"></a>        {</span>\n<span id=\"cb2-18\"><a href=\"#cb2-18\"></a>          <span class=\"kw\">try</span></span>\n<span id=\"cb2-19\"><a href=\"#cb2-19\"></a>          {</span>\n<span id=\"cb2-20\"><a href=\"#cb2-20\"></a>            k = <span class=\"bu\">Integer</span>.<span class=\"fu\">parseInt</span>(str3) * <span class=\"dv\">86400000L</span> + <span class=\"dv\">1356994800000L</span>;</span>\n<span id=\"cb2-21\"><a href=\"#cb2-21\"></a>          }</span>\n<span id=\"cb2-22\"><a href=\"#cb2-22\"></a>          <span class=\"kw\">catch</span> (<span class=\"bu\">NumberFormatException</span> localNumberFormatException)</span>\n<span id=\"cb2-23\"><a href=\"#cb2-23\"></a>          {</span>\n<span id=\"cb2-24\"><a href=\"#cb2-24\"></a>            c.<span class=\"fu\">b</span>(localNumberFormatException);</span>\n<span id=\"cb2-25\"><a href=\"#cb2-25\"></a>          }</span>\n<span id=\"cb2-26\"><a href=\"#cb2-26\"></a>          m = <span class=\"bu\">Integer</span>.<span class=\"fu\">MAX_VALUE</span>;</span>\n<span id=\"cb2-27\"><a href=\"#cb2-27\"></a>        }</span>\n<span id=\"cb2-28\"><a href=\"#cb2-28\"></a>      }</span>\n<span id=\"cb2-29\"><a href=\"#cb2-29\"></a>    }</span>\n<span id=\"cb2-30\"><a href=\"#cb2-30\"></a>    <span class=\"kw\">else</span> {</span>\n<span id=\"cb2-31\"><a href=\"#cb2-31\"></a>      m = <span class=\"bu\">Math</span>.<span class=\"fu\">max</span>(<span class=\"dv\">15</span> - <span class=\"fu\">f</span>(<span class=\"st\">&quot;mma&quot;</span>), -<span class=\"dv\">1</span>);</span>\n<span id=\"cb2-32\"><a href=\"#cb2-32\"></a>    }</span>\n<span id=\"cb2-33\"><a href=\"#cb2-33\"></a>    <span class=\"kw\">return</span> m;</span>\n<span id=\"cb2-34\"><a href=\"#cb2-34\"></a>  }</span></code></pre></div>\n<p>看到这，我们其实已经拿到了计算key的方法，只不过这是一个验证的函数，如果我们要计算出key，需要反向推倒出来，这里就不具体解释了，最终反向出来的代码其实很简单，我做了一个C++版本的：</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb3-1\"><a href=\"#cb3-1\"></a>inline <span class=\"dt\">const</span> string <span class=\"fu\">generateKey</span>(string name)</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\"></a>{</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\"></a>    string salt = <span class=\"fu\">getSalt</span>();</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\"></a>    cout &lt;&lt; <span class=\"st\">&quot;salt:&quot;</span> &lt;&lt; salt &lt;&lt; endl;</span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\"></a>    string encryptSource = <span class=\"st\">&quot;ax5&quot;</span> + name + <span class=\"st\">&quot;b52w&quot;</span> + salt + <span class=\"st\">&quot;vb3&quot;</span>;</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\"></a>    cout &lt;&lt; <span class=\"st\">&quot;encrypt:&quot;</span> &lt;&lt; encryptSource &lt;&lt; endl;</span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\"></a>    string hash = <span class=\"fu\">MD5</span>(encryptSource).<span class=\"fu\">toStr</span>();</span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\"></a>    cout &lt;&lt; <span class=\"st\">&quot;md5:&quot;</span> &lt;&lt; hash &lt;&lt; endl;</span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\"></a>    <span class=\"kw\">return</span> hash.<span class=\"fu\">substr</span>(<span class=\"dv\">0</span>, <span class=\"dv\">4</span>) + salt + hash.<span class=\"fu\">substr</span>(<span class=\"dv\">4</span>);</span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\"></a>}</span></code></pre></div>\n<p>于是我们就有了一个key生成器了，完整的key生成器源码在Github。</p>\n","categories":["Programing","Security"],"tags":["DB Schema","MySQL","Jad"]}]